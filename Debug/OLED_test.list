
OLED_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001850  080094b8  080094b8  000194b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad08  0800ad08  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad08  0800ad08  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad08  0800ad08  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ad10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001fc  0800af0c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800af0c  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe72  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002614  00000000  00000000  00030097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000326b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  000337f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195ca  00000000  00000000  00034870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c85  00000000  00000000  0004de3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9b0  00000000  00000000  00060abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef46f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fcc  00000000  00000000  000ef4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	080094a0 	.word	0x080094a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	080094a0 	.word	0x080094a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <_Error_Handler>:
#include "stm32f1xx_hal.h"

#include "BH1750.h"

void _Error_Handler(char * file, int line)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  while(1)
 80010c6:	e7fe      	b.n	80010c6 <_Error_Handler+0xa>

080010c8 <BH1750_init_i2c>:
  {
  }
}

HAL_StatusTypeDef BH1750_init_i2c(I2C_HandleTypeDef* i2c_handle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <BH1750_init_i2c+0x70>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <BH1750_init_i2c+0x70>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <BH1750_init_i2c+0x70>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

	//i2c_handle->Instance = I2C1;
	i2c_handle->Init.ClockSpeed = 100000;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a14      	ldr	r2, [pc, #80]	; (800113c <BH1750_init_i2c+0x74>)
 80010ec:	605a      	str	r2, [r3, #4]
	i2c_handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
	i2c_handle->Init.OwnAddress1 = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
	i2c_handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001100:	611a      	str	r2, [r3, #16]
	i2c_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
	i2c_handle->Init.OwnAddress2 = 0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
	i2c_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
	i2c_handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2c_handle) != HAL_OK)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 f8be 	bl	800329c <HAL_I2C_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <BH1750_init_i2c+0x66>
	{
		_Error_Handler(__FILE__, __LINE__);
 8001126:	2136      	movs	r1, #54	; 0x36
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <BH1750_init_i2c+0x78>)
 800112a:	f7ff ffc7 	bl	80010bc <_Error_Handler>
	}

	return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	000186a0 	.word	0x000186a0
 8001140:	080094b8 	.word	0x080094b8

08001144 <BH1750_send_command>:

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8001158:	b299      	uxth	r1, r3
 800115a:	1cfa      	adds	r2, r7, #3
 800115c:	230a      	movs	r3, #10
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	f002 f9df 	bl	8003524 <HAL_I2C_Master_Transmit>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <BH1750_send_command+0x2e>

	return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f8aa 	bl	80012dc <BH1750_get_lumen>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4613      	mov	r3, r2
 800119c:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 800119e:	2114      	movs	r1, #20
 80011a0:	2001      	movs	r0, #1
 80011a2:	f004 fd7d 	bl	8005ca0 <calloc>
 80011a6:	4603      	mov	r3, r0
 80011a8:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <BH1750_init_dev_struct+0x24>
 80011b0:	2300      	movs	r3, #0
 80011b2:	e02d      	b.n	8001210 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2247      	movs	r2, #71	; 0x47
 80011be:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2246      	movs	r2, #70	; 0x46
 80011c4:	725a      	strb	r2, [r3, #9]
 80011c6:	e005      	b.n	80011d4 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	22ba      	movs	r2, #186	; 0xba
 80011cc:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	22b9      	movs	r2, #185	; 0xb9
 80011d2:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f7fe ffbb 	bl	8000150 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 fd91 	bl	8005d04 <malloc>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <BH1750_init_dev_struct+0x66>
 80011f2:	2300      	movs	r3, #0
 80011f4:	e00c      	b.n	8001210 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	4618      	mov	r0, r3
 8001204:	f005 fb95 	bl	8006932 <strcpy>

	init->poll = &BH1750_poll_self;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	4a03      	ldr	r2, [pc, #12]	; (8001218 <BH1750_init_dev_struct+0x88>)
 800120c:	611a      	str	r2, [r3, #16]

	return init;
 800120e:	697b      	ldr	r3, [r7, #20]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800117b 	.word	0x0800117b

0800121c <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8001224:	2101      	movs	r1, #1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff8c 	bl	8001144 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 800122c:	2103      	movs	r1, #3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff88 	bl	8001144 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8001234:	2110      	movs	r1, #16
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff84 	bl	8001144 <BH1750_send_command>

	return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af02      	add	r7, sp, #8
 800124c:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8001256:	b299      	uxth	r1, r3
			dev->buffer,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 800125e:	230a      	movs	r3, #10
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	f002 fa5c 	bl	8003720 <HAL_I2C_Master_Receive>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7b1b      	ldrb	r3, [r3, #12]
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	895b      	ldrh	r3, [r3, #10]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b21a      	sxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7b5b      	ldrb	r3, [r3, #13]
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	895b      	ldrh	r3, [r3, #10]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8aa 	bl	8000404 <__aeabi_i2d>
 80012b0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <BH1750_convert+0x5c>)
 80012b6:	f7ff fa39 	bl	800072c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fbe1 	bl	8000a88 <__aeabi_d2uiz>
 80012c6:	4603      	mov	r3, r0
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	3ff33333 	.word	0x3ff33333

080012dc <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffae 	bl	8001246 <BH1750_read_dev>
	BH1750_convert(dev);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffc6 	bl	800127c <BH1750_convert>
	return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <delay>:
float temp;
int warning_temp = 90;
int warning_lux = 50;
////////
void delay (uint16_t time)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <delay+0x2c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 800130e:	bf00      	nop
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <delay+0x2c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3f9      	bcc.n	8001310 <delay+0x14>
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	200002c4 	.word	0x200002c4

0800132c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2302      	movs	r3, #2
 8001350:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f001 fdbb 	bl	8002ed4 <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001388:	2301      	movs	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4619      	mov	r1, r3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f001 fd9e 	bl	8002ed4 <HAL_GPIO_Init>
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <DS18B20_Start>:

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_0

uint8_t DS18B20_Start (void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80013aa:	2101      	movs	r1, #1
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <DS18B20_Start+0x5c>)
 80013ae:	f7ff ffbd 	bl	800132c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80013b2:	2200      	movs	r2, #0
 80013b4:	2101      	movs	r1, #1
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <DS18B20_Start+0x5c>)
 80013b8:	f001 ff27 	bl	800320a <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80013bc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80013c0:	f7ff ff9c 	bl	80012fc <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80013c4:	2101      	movs	r1, #1
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <DS18B20_Start+0x5c>)
 80013c8:	f7ff ffcd 	bl	8001366 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 80013cc:	2050      	movs	r0, #80	; 0x50
 80013ce:	f7ff ff95 	bl	80012fc <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80013d2:	2101      	movs	r1, #1
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <DS18B20_Start+0x5c>)
 80013d6:	f001 ff01 	bl	80031dc <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <DS18B20_Start+0x46>
 80013e0:	2301      	movs	r3, #1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	e001      	b.n	80013ea <DS18B20_Start+0x4a>
	else Response = -1;
 80013e6:	23ff      	movs	r3, #255	; 0xff
 80013e8:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 80013ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80013ee:	f7ff ff85 	bl	80012fc <delay>

	return Response;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40010800 	.word	0x40010800

08001400 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800140a:	2101      	movs	r1, #1
 800140c:	481e      	ldr	r0, [pc, #120]	; (8001488 <DS18B20_Write+0x88>)
 800140e:	f7ff ff8d 	bl	800132c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e02e      	b.n	8001476 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	fa42 f303 	asr.w	r3, r2, r3
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d013      	beq.n	8001450 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001428:	2101      	movs	r1, #1
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <DS18B20_Write+0x88>)
 800142c:	f7ff ff7e 	bl	800132c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001430:	2200      	movs	r2, #0
 8001432:	2101      	movs	r1, #1
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <DS18B20_Write+0x88>)
 8001436:	f001 fee8 	bl	800320a <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff ff5e 	bl	80012fc <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001440:	2101      	movs	r1, #1
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <DS18B20_Write+0x88>)
 8001444:	f7ff ff8f 	bl	8001366 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8001448:	2032      	movs	r0, #50	; 0x32
 800144a:	f7ff ff57 	bl	80012fc <delay>
 800144e:	e00f      	b.n	8001470 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8001450:	2101      	movs	r1, #1
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <DS18B20_Write+0x88>)
 8001454:	f7ff ff6a 	bl	800132c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001458:	2200      	movs	r2, #0
 800145a:	2101      	movs	r1, #1
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <DS18B20_Write+0x88>)
 800145e:	f001 fed4 	bl	800320a <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8001462:	2032      	movs	r0, #50	; 0x32
 8001464:	f7ff ff4a 	bl	80012fc <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001468:	2101      	movs	r1, #1
 800146a:	4807      	ldr	r0, [pc, #28]	; (8001488 <DS18B20_Write+0x88>)
 800146c:	f7ff ff7b 	bl	8001366 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b07      	cmp	r3, #7
 800147a:	ddcd      	ble.n	8001418 <DS18B20_Write+0x18>
		}
	}
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010800 	.word	0x40010800

0800148c <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001492:	2300      	movs	r3, #0
 8001494:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001496:	2101      	movs	r1, #1
 8001498:	481a      	ldr	r0, [pc, #104]	; (8001504 <DS18B20_Read+0x78>)
 800149a:	f7ff ff64 	bl	8001366 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	e026      	b.n	80014f2 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80014a4:	2101      	movs	r1, #1
 80014a6:	4817      	ldr	r0, [pc, #92]	; (8001504 <DS18B20_Read+0x78>)
 80014a8:	f7ff ff40 	bl	800132c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 80014ac:	2200      	movs	r2, #0
 80014ae:	2101      	movs	r1, #1
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <DS18B20_Read+0x78>)
 80014b2:	f001 feaa 	bl	800320a <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff ff20 	bl	80012fc <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80014bc:	2101      	movs	r1, #1
 80014be:	4811      	ldr	r0, [pc, #68]	; (8001504 <DS18B20_Read+0x78>)
 80014c0:	f7ff ff51 	bl	8001366 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80014c4:	2101      	movs	r1, #1
 80014c6:	480f      	ldr	r0, [pc, #60]	; (8001504 <DS18B20_Read+0x78>)
 80014c8:	f001 fe88 	bl	80031dc <HAL_GPIO_ReadPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80014d2:	2201      	movs	r2, #1
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 80014e6:	2032      	movs	r0, #50	; 0x32
 80014e8:	f7ff ff08 	bl	80012fc <delay>
	for (int i=0;i<8;i++)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	ddd5      	ble.n	80014a4 <DS18B20_Read+0x18>
	}
	return value;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40010800 	.word	0x40010800

08001508 <DS18B20_Readvalue>:
float DS18B20_Readvalue ()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint8_t  Temp_byte1, Temp_byte2;
	uint16_t  TEMP;

	float Temperature = 0;
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	607b      	str	r3, [r7, #4]

	 DS18B20_Start ();
 8001514:	f7ff ff44 	bl	80013a0 <DS18B20_Start>
		  	  HAL_Delay (1);
 8001518:	2001      	movs	r0, #1
 800151a:	f001 faf9 	bl	8002b10 <HAL_Delay>
		  	  DS18B20_Write (0xCC);  // skip ROM
 800151e:	20cc      	movs	r0, #204	; 0xcc
 8001520:	f7ff ff6e 	bl	8001400 <DS18B20_Write>
		  	  DS18B20_Write (0x44);  // convert t
 8001524:	2044      	movs	r0, #68	; 0x44
 8001526:	f7ff ff6b 	bl	8001400 <DS18B20_Write>
		  	  HAL_Delay (800);
 800152a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800152e:	f001 faef 	bl	8002b10 <HAL_Delay>

		  	   DS18B20_Start ();
 8001532:	f7ff ff35 	bl	80013a0 <DS18B20_Start>
		        HAL_Delay(1);
 8001536:	2001      	movs	r0, #1
 8001538:	f001 faea 	bl	8002b10 <HAL_Delay>
		        DS18B20_Write (0xCC);  // skip ROM
 800153c:	20cc      	movs	r0, #204	; 0xcc
 800153e:	f7ff ff5f 	bl	8001400 <DS18B20_Write>
		        DS18B20_Write (0xBE);  // Read Scratch-pad
 8001542:	20be      	movs	r0, #190	; 0xbe
 8001544:	f7ff ff5c 	bl	8001400 <DS18B20_Write>

		        Temp_byte1 = DS18B20_Read();
 8001548:	f7ff ffa0 	bl	800148c <DS18B20_Read>
 800154c:	4603      	mov	r3, r0
 800154e:	70fb      	strb	r3, [r7, #3]
		  	  Temp_byte2 = DS18B20_Read();
 8001550:	f7ff ff9c 	bl	800148c <DS18B20_Read>
 8001554:	4603      	mov	r3, r0
 8001556:	70bb      	strb	r3, [r7, #2]
		  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8001558:	78bb      	ldrb	r3, [r7, #2]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21b      	sxth	r3, r3
 8001566:	803b      	strh	r3, [r7, #0]
		  	  Temperature = (float)TEMP/16;
 8001568:	883b      	ldrh	r3, [r7, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fb62 	bl	8000c34 <__aeabi_ui2f>
 8001570:	4603      	mov	r3, r0
 8001572:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fc68 	bl	8000e4c <__aeabi_fdiv>
 800157c:	4603      	mov	r3, r0
 800157e:	607b      	str	r3, [r7, #4]
		  	  return Temperature;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <__io_putchar>:
void hien_thi(const unsigned char* str);
BH1750_device_t* test_dev;
void task1();
void task2();
void canh_bao ();
int __io_putchar (int ch){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,100);
 8001594:	1d39      	adds	r1, r7, #4
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	2201      	movs	r2, #1
 800159a:	4804      	ldr	r0, [pc, #16]	; (80015ac <__io_putchar+0x20>)
 800159c:	f003 fe95 	bl	80052ca <HAL_UART_Transmit>
	return ch;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000030c 	.word	0x2000030c

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f001 fa4a 	bl	8002a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f8d2 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f000 f9ec 	bl	8001998 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015c0:	f000 f914 	bl	80017ec <MX_I2C1_Init>
  MX_I2C2_Init();
 80015c4:	f000 f940 	bl	8001848 <MX_I2C2_Init>
  MX_TIM1_Init();
 80015c8:	f000 f96c 	bl	80018a4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80015cc:	f000 f9ba 	bl	8001944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80015d0:	4859      	ldr	r0, [pc, #356]	; (8001738 <main+0x188>)
 80015d2:	f003 fbc9 	bl	8004d68 <HAL_TIM_Base_Start>
  SSD1306_Init (); // initialize the display
 80015d6:	f000 fd3b 	bl	8002050 <SSD1306_Init>
  BH1750_init_i2c(&hi2c2);
 80015da:	4858      	ldr	r0, [pc, #352]	; (800173c <main+0x18c>)
 80015dc:	f7ff fd74 	bl	80010c8 <BH1750_init_i2c>
  test_dev = BH1750_init_dev_struct(&hi2c2, "test device", true);
 80015e0:	2201      	movs	r2, #1
 80015e2:	4957      	ldr	r1, [pc, #348]	; (8001740 <main+0x190>)
 80015e4:	4855      	ldr	r0, [pc, #340]	; (800173c <main+0x18c>)
 80015e6:	f7ff fdd3 	bl	8001190 <BH1750_init_dev_struct>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a55      	ldr	r2, [pc, #340]	; (8001744 <main+0x194>)
 80015ee:	6013      	str	r3, [r2, #0]
  BH1750_init_dev(test_dev);
 80015f0:	4b54      	ldr	r3, [pc, #336]	; (8001744 <main+0x194>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe11 	bl	800121c <BH1750_init_dev>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)Uart_recv, 8);
 80015fa:	2208      	movs	r2, #8
 80015fc:	4952      	ldr	r1, [pc, #328]	; (8001748 <main+0x198>)
 80015fe:	4853      	ldr	r0, [pc, #332]	; (800174c <main+0x19c>)
 8001600:	f003 fef5 	bl	80053ee <HAL_UART_Receive_IT>
  SSD1306_UpdateScreen();
 8001604:	f000 fde8 	bl	80021d8 <SSD1306_UpdateScreen>
  uwTick=0;
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <main+0x1a0>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(Tx_Flag == 3)
 800160e:	4b51      	ldr	r3, [pc, #324]	; (8001754 <main+0x1a4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d140      	bne.n	8001698 <main+0xe8>
	 {
		 st[0] = 6000; st[1] =1000; st[2]=3000;//1 la canh bao, 2 la temp, 3 la lux
 8001616:	4b50      	ldr	r3, [pc, #320]	; (8001758 <main+0x1a8>)
 8001618:	f241 7270 	movw	r2, #6000	; 0x1770
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <main+0x1a8>)
 8001620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <main+0x1a8>)
 8001628:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800162c:	609a      	str	r2, [r3, #8]
		 if (uwTick % st[0] == 0)
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <main+0x1a0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a49      	ldr	r2, [pc, #292]	; (8001758 <main+0x1a8>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	fbb3 f1f2 	udiv	r1, r3, r2
 800163a:	fb01 f202 	mul.w	r2, r1, r2
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <main+0xa0>
		 {
			 uwtick1 = uwTick;
 8001644:	4b42      	ldr	r3, [pc, #264]	; (8001750 <main+0x1a0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a44      	ldr	r2, [pc, #272]	; (800175c <main+0x1ac>)
 800164a:	6013      	str	r3, [r2, #0]
			 canh_bao();
 800164c:	f000 fb20 	bl	8001c90 <canh_bao>

		 }
		 if (uwTick % st[1] == 100)
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <main+0x1a0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a40      	ldr	r2, [pc, #256]	; (8001758 <main+0x1a8>)
 8001656:	6852      	ldr	r2, [r2, #4]
 8001658:	fbb3 f1f2 	udiv	r1, r3, r2
 800165c:	fb01 f202 	mul.w	r2, r1, r2
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d105      	bne.n	8001672 <main+0xc2>
		 {
			 uwtick1 = uwTick;
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <main+0x1a0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a3c      	ldr	r2, [pc, #240]	; (800175c <main+0x1ac>)
 800166c:	6013      	str	r3, [r2, #0]
			 task1();
 800166e:	f000 fa91 	bl	8001b94 <task1>
		 }
		 if (uwTick % st[2] == 950)
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <main+0x1a0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a38      	ldr	r2, [pc, #224]	; (8001758 <main+0x1a8>)
 8001678:	6892      	ldr	r2, [r2, #8]
 800167a:	fbb3 f1f2 	udiv	r1, r3, r2
 800167e:	fb01 f202 	mul.w	r2, r1, r2
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001688:	4293      	cmp	r3, r2
 800168a:	d105      	bne.n	8001698 <main+0xe8>
		 {
		 	uwtick1 = uwTick;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <main+0x1a0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <main+0x1ac>)
 8001692:	6013      	str	r3, [r2, #0]
		 	task2();
 8001694:	f000 fabe 	bl	8001c14 <task2>
		 }
	 }
	 if(Tx_Flag == 1)
 8001698:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <main+0x1a4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d121      	bne.n	80016e4 <main+0x134>
	 {
		 if (uwTick % st[0] == 0)
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <main+0x1a0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <main+0x1a8>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80016ac:	fb01 f202 	mul.w	r2, r1, r2
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d105      	bne.n	80016c2 <main+0x112>
		 {
			 uwtick1 = uwTick;
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <main+0x1a0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <main+0x1ac>)
 80016bc:	6013      	str	r3, [r2, #0]
			 canh_bao();
 80016be:	f000 fae7 	bl	8001c90 <canh_bao>
		 }
		 if (uwTick % st[1] == 100)
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <main+0x1a0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a24      	ldr	r2, [pc, #144]	; (8001758 <main+0x1a8>)
 80016c8:	6852      	ldr	r2, [r2, #4]
 80016ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80016ce:	fb01 f202 	mul.w	r2, r1, r2
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d105      	bne.n	80016e4 <main+0x134>
		 {
		 	uwtick1 = uwTick;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <main+0x1a0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1f      	ldr	r2, [pc, #124]	; (800175c <main+0x1ac>)
 80016de:	6013      	str	r3, [r2, #0]
		 	task1();
 80016e0:	f000 fa58 	bl	8001b94 <task1>
		 }
	 }
	 if(Tx_Flag ==2)
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <main+0x1a4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d190      	bne.n	800160e <main+0x5e>
	 {
		 if (uwTick % st[0] == 0)
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <main+0x1a0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a19      	ldr	r2, [pc, #100]	; (8001758 <main+0x1a8>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80016f8:	fb01 f202 	mul.w	r2, r1, r2
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <main+0x15e>
		 {
			uwtick1 = uwTick;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <main+0x1a0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <main+0x1ac>)
 8001708:	6013      	str	r3, [r2, #0]
		 	canh_bao();
 800170a:	f000 fac1 	bl	8001c90 <canh_bao>
		 }
		 if (uwTick % st[2] == 950)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <main+0x1a0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a11      	ldr	r2, [pc, #68]	; (8001758 <main+0x1a8>)
 8001714:	6892      	ldr	r2, [r2, #8]
 8001716:	fbb3 f1f2 	udiv	r1, r3, r2
 800171a:	fb01 f202 	mul.w	r2, r1, r2
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001724:	4293      	cmp	r3, r2
 8001726:	f47f af72 	bne.w	800160e <main+0x5e>
		 {
			 uwtick1 = uwTick;
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <main+0x1a0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <main+0x1ac>)
 8001730:	6013      	str	r3, [r2, #0]
		 	task2();
 8001732:	f000 fa6f 	bl	8001c14 <task2>
	 if(Tx_Flag == 3)
 8001736:	e76a      	b.n	800160e <main+0x5e>
 8001738:	200002c4 	.word	0x200002c4
 800173c:	20000270 	.word	0x20000270
 8001740:	080094d0 	.word	0x080094d0
 8001744:	20000378 	.word	0x20000378
 8001748:	20000350 	.word	0x20000350
 800174c:	2000030c 	.word	0x2000030c
 8001750:	20000788 	.word	0x20000788
 8001754:	20000008 	.word	0x20000008
 8001758:	2000000c 	.word	0x2000000c
 800175c:	2000036c 	.word	0x2000036c

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b090      	sub	sp, #64	; 0x40
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	2228      	movs	r2, #40	; 0x28
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fad0 	bl	8005d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001782:	2301      	movs	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800178a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001794:	2302      	movs	r3, #2
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800179e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fe73 	bl	8004494 <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017b4:	f000 fbde 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017bc:	2302      	movs	r3, #2
 80017be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2102      	movs	r1, #2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 f8e0 	bl	8004998 <HAL_RCC_ClockConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017de:	f000 fbc9 	bl	8001f74 <Error_Handler>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3740      	adds	r7, #64	; 0x40
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C1_Init+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <MX_I2C1_Init+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C1_Init+0x50>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_I2C1_Init+0x58>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C1_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_I2C1_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_I2C1_Init+0x50>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_I2C1_Init+0x50>)
 800182a:	f001 fd37 	bl	800329c <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 fb9e 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000021c 	.word	0x2000021c
 8001840:	40005400 	.word	0x40005400
 8001844:	00061a80 	.word	0x00061a80

08001848 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C2_Init+0x50>)
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <MX_I2C2_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C2_Init+0x50>)
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_I2C2_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C2_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_I2C2_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_I2C2_Init+0x50>)
 8001866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_I2C2_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_I2C2_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <MX_I2C2_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_I2C2_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_I2C2_Init+0x50>)
 8001886:	f001 fd09 	bl	800329c <HAL_I2C_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001890:	f000 fb70 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000270 	.word	0x20000270
 800189c:	40005800 	.word	0x40005800
 80018a0:	000186a0 	.word	0x000186a0

080018a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b8:	463b      	mov	r3, r7
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_TIM1_Init+0x98>)
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <MX_TIM1_Init+0x9c>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_TIM1_Init+0x98>)
 80018c8:	2231      	movs	r2, #49	; 0x31
 80018ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <MX_TIM1_Init+0x98>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_TIM1_Init+0x98>)
 80018d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_TIM1_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <MX_TIM1_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_TIM1_Init+0x98>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <MX_TIM1_Init+0x98>)
 80018ee:	f003 f9eb 	bl	8004cc8 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018f8:	f000 fb3c 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	4619      	mov	r1, r3
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <MX_TIM1_Init+0x98>)
 800190a:	f003 fa77 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001914:	f000 fb2e 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_TIM1_Init+0x98>)
 8001926:	f003 fc25 	bl	8005174 <HAL_TIMEx_MasterConfigSynchronization>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001930:	f000 fb20 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200002c4 	.word	0x200002c4
 8001940:	40012c00 	.word	0x40012c00

08001944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800194a:	4a12      	ldr	r2, [pc, #72]	; (8001994 <MX_USART1_UART_Init+0x50>)
 800194c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_USART1_UART_Init+0x4c>)
 800197c:	f003 fc58 	bl	8005230 <HAL_UART_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001986:	f000 faf5 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000030c 	.word	0x2000030c
 8001994:	40013800 	.word	0x40013800

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_GPIO_Init+0xb4>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2181      	movs	r1, #129	; 0x81
 80019f8:	4815      	ldr	r0, [pc, #84]	; (8001a50 <MX_GPIO_Init+0xb8>)
 80019fa:	f001 fc06 	bl	800320a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80019fe:	2381      	movs	r3, #129	; 0x81
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	480e      	ldr	r0, [pc, #56]	; (8001a50 <MX_GPIO_Init+0xb8>)
 8001a16:	f001 fa5d 	bl	8002ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_GPIO_Init+0xbc>)
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4808      	ldr	r0, [pc, #32]	; (8001a50 <MX_GPIO_Init+0xb8>)
 8001a30:	f001 fa50 	bl	8002ed4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	2028      	movs	r0, #40	; 0x28
 8001a3a:	f001 f964 	bl	8002d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a3e:	2028      	movs	r0, #40	; 0x28
 8001a40:	f001 f97d 	bl	8002d3e <HAL_NVIC_EnableIRQ>

}
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010800 	.word	0x40010800
 8001a54:	10110000 	.word	0x10110000

08001a58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_UART_RxCpltCallback+0xa8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d145      	bne.n	8001af8 <HAL_UART_RxCpltCallback+0xa0>
	{
		if(strstr(Uart_recv,"t1:")!=NULL)
 8001a6c:	4925      	ldr	r1, [pc, #148]	; (8001b04 <HAL_UART_RxCpltCallback+0xac>)
 8001a6e:	4826      	ldr	r0, [pc, #152]	; (8001b08 <HAL_UART_RxCpltCallback+0xb0>)
 8001a70:	f004 ff67 	bl	8006942 <strstr>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_UART_RxCpltCallback+0x2e>
		{
			sscanf(Uart_recv+3,"%d",&st[1]);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_UART_RxCpltCallback+0xb4>)
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <HAL_UART_RxCpltCallback+0xb8>)
 8001a7e:	4925      	ldr	r1, [pc, #148]	; (8001b14 <HAL_UART_RxCpltCallback+0xbc>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 fee7 	bl	8006854 <siscanf>
		}
		if(strstr(Uart_recv,"t2:")!=NULL)
 8001a86:	4924      	ldr	r1, [pc, #144]	; (8001b18 <HAL_UART_RxCpltCallback+0xc0>)
 8001a88:	481f      	ldr	r0, [pc, #124]	; (8001b08 <HAL_UART_RxCpltCallback+0xb0>)
 8001a8a:	f004 ff5a 	bl	8006942 <strstr>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_UART_RxCpltCallback+0x48>
		{
			sscanf(Uart_recv+3,"%d",&st[2]);
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_UART_RxCpltCallback+0xb4>)
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <HAL_UART_RxCpltCallback+0xc4>)
 8001a98:	491e      	ldr	r1, [pc, #120]	; (8001b14 <HAL_UART_RxCpltCallback+0xbc>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 feda 	bl	8006854 <siscanf>
		}
		if(strstr(Uart_recv,"chedo:")!=NULL)
 8001aa0:	491f      	ldr	r1, [pc, #124]	; (8001b20 <HAL_UART_RxCpltCallback+0xc8>)
 8001aa2:	4819      	ldr	r0, [pc, #100]	; (8001b08 <HAL_UART_RxCpltCallback+0xb0>)
 8001aa4:	f004 ff4d 	bl	8006942 <strstr>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_UART_RxCpltCallback+0x62>
		{
			sscanf(Uart_recv+7,"%d",&Tx_Flag);
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_UART_RxCpltCallback+0xcc>)
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_UART_RxCpltCallback+0xd0>)
 8001ab2:	4918      	ldr	r1, [pc, #96]	; (8001b14 <HAL_UART_RxCpltCallback+0xbc>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fecd 	bl	8006854 <siscanf>
		}
		if(strstr(Uart_recv,"bao1:")!=NULL)
 8001aba:	491c      	ldr	r1, [pc, #112]	; (8001b2c <HAL_UART_RxCpltCallback+0xd4>)
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <HAL_UART_RxCpltCallback+0xb0>)
 8001abe:	f004 ff40 	bl	8006942 <strstr>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_UART_RxCpltCallback+0x7c>
		{
			sscanf(Uart_recv+6,"%d",&warning_temp);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_UART_RxCpltCallback+0xd8>)
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_UART_RxCpltCallback+0xdc>)
 8001acc:	4911      	ldr	r1, [pc, #68]	; (8001b14 <HAL_UART_RxCpltCallback+0xbc>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fec0 	bl	8006854 <siscanf>
		}
		if(strstr(Uart_recv,"bao2:")!=NULL)
 8001ad4:	4918      	ldr	r1, [pc, #96]	; (8001b38 <HAL_UART_RxCpltCallback+0xe0>)
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <HAL_UART_RxCpltCallback+0xb0>)
 8001ad8:	f004 ff33 	bl	8006942 <strstr>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_UART_RxCpltCallback+0x96>
		{
			sscanf(Uart_recv+6,"%d",&warning_lux);
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_UART_RxCpltCallback+0xd8>)
 8001ae4:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <HAL_UART_RxCpltCallback+0xe4>)
 8001ae6:	490b      	ldr	r1, [pc, #44]	; (8001b14 <HAL_UART_RxCpltCallback+0xbc>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 feb3 	bl	8006854 <siscanf>
		}
		HAL_UART_Receive_IT(&huart1,(uint8_t*)Uart_recv,8);
 8001aee:	2208      	movs	r2, #8
 8001af0:	4905      	ldr	r1, [pc, #20]	; (8001b08 <HAL_UART_RxCpltCallback+0xb0>)
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <HAL_UART_RxCpltCallback+0xa8>)
 8001af4:	f003 fc7b 	bl	80053ee <HAL_UART_Receive_IT>
	}
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	2000030c 	.word	0x2000030c
 8001b04:	080094dc 	.word	0x080094dc
 8001b08:	20000350 	.word	0x20000350
 8001b0c:	20000353 	.word	0x20000353
 8001b10:	20000010 	.word	0x20000010
 8001b14:	080094e0 	.word	0x080094e0
 8001b18:	080094e4 	.word	0x080094e4
 8001b1c:	20000014 	.word	0x20000014
 8001b20:	080094e8 	.word	0x080094e8
 8001b24:	20000357 	.word	0x20000357
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	080094f0 	.word	0x080094f0
 8001b30:	20000356 	.word	0x20000356
 8001b34:	20000018 	.word	0x20000018
 8001b38:	080094f8 	.word	0x080094f8
 8001b3c:	2000001c 	.word	0x2000001c

08001b40 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_11) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b50:	d109      	bne.n	8001b66 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	st[0]= st[0] + 500;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b5c:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <HAL_GPIO_EXTI_Callback+0x50>)
 8001b62:	f001 fb6a 	bl	800323a <HAL_GPIO_TogglePin>
    }
    if(GPIO_Pin == GPIO_PIN_12) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6c:	d109      	bne.n	8001b82 <HAL_GPIO_EXTI_Callback+0x42>
        {
        	st[1]= st[1] + 500;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b78:	6053      	str	r3, [r2, #4]
        	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <HAL_GPIO_EXTI_Callback+0x50>)
 8001b7e:	f001 fb5c 	bl	800323a <HAL_GPIO_TogglePin>
     }
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000000c 	.word	0x2000000c
 8001b90:	40010800 	.word	0x40010800

08001b94 <task1>:
void task1 ()
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af02      	add	r7, sp, #8
	char Temp[15] ;
	ticknow= HAL_GetTick();
 8001b9a:	f000 ffaf 	bl	8002afc <HAL_GetTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <task1+0x68>)
 8001ba2:	6013      	str	r3, [r2, #0]
			  		temp=DS18B20_Readvalue ();
 8001ba4:	f7ff fcb0 	bl	8001508 <DS18B20_Readvalue>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <task1+0x6c>)
 8001bac:	6013      	str	r3, [r2, #0]
//			  			SSD1306_DrawBitmap(85, 0, nhietdo, 64, 64, 1);
//			  			SSD1306_UpdateScreen();
//			  		}
//			  		else

			  			printf("Temp: %.1f %d %d\n",temp,(int)ticknow, (int)(uwTick-uwtick1));
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <task1+0x6c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc38 	bl	8000428 <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	490f      	ldr	r1, [pc, #60]	; (8001bfc <task1+0x68>)
 8001bbe:	6809      	ldr	r1, [r1, #0]
 8001bc0:	460c      	mov	r4, r1
 8001bc2:	4910      	ldr	r1, [pc, #64]	; (8001c04 <task1+0x70>)
 8001bc4:	6808      	ldr	r0, [r1, #0]
 8001bc6:	4910      	ldr	r1, [pc, #64]	; (8001c08 <task1+0x74>)
 8001bc8:	6809      	ldr	r1, [r1, #0]
 8001bca:	1a41      	subs	r1, r0, r1
 8001bcc:	9101      	str	r1, [sp, #4]
 8001bce:	9400      	str	r4, [sp, #0]
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <task1+0x78>)
 8001bd2:	f004 fdf7 	bl	80067c4 <iprintf>
			  			sprintf(Temp, "Temp:%.1f", temp);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <task1+0x6c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc24 	bl	8000428 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4638      	mov	r0, r7
 8001be6:	490a      	ldr	r1, [pc, #40]	; (8001c10 <task1+0x7c>)
 8001be8:	f004 fe14 	bl	8006814 <siprintf>

			  			hien_thitemp(Temp);
 8001bec:	463b      	mov	r3, r7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f9aa 	bl	8001f48 <hien_thitemp>

}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	20000218 	.word	0x20000218
 8001c00:	20000374 	.word	0x20000374
 8001c04:	20000788 	.word	0x20000788
 8001c08:	2000036c 	.word	0x2000036c
 8001c0c:	08009500 	.word	0x08009500
 8001c10:	08009514 	.word	0x08009514

08001c14 <task2>:
void task2()
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
	char light[15] ;
	ticknow= HAL_GetTick();
 8001c1a:	f000 ff6f 	bl	8002afc <HAL_GetTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <task2+0x60>)
 8001c22:	6013      	str	r3, [r2, #0]
			  		BH1750_get_lumen(test_dev);
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <task2+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fb57 	bl	80012dc <BH1750_get_lumen>
			  		value=test_dev->value;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <task2+0x64>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	895b      	ldrh	r3, [r3, #10]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <task2+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
//			  			SSD1306_DrawBitmap(85, 0, anh_sang, 64, 64, 1);
//			  			SSD1306_UpdateScreen();
//			  		}
//			  		else

			  			sprintf(light, "%d", value);
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <task2+0x68>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	463b      	mov	r3, r7
 8001c40:	490f      	ldr	r1, [pc, #60]	; (8001c80 <task2+0x6c>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fde6 	bl	8006814 <siprintf>
			  			hien_thilux(light);
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f93c 	bl	8001ec8 <hien_thilux>
			  			printf("Lux:%d %d %d\n",value,(int)ticknow, (int)(uwTick-uwtick1));
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <task2+0x68>)
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <task2+0x60>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <task2+0x70>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <task2+0x74>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4602      	mov	r2, r0
 8001c66:	4809      	ldr	r0, [pc, #36]	; (8001c8c <task2+0x78>)
 8001c68:	f004 fdac 	bl	80067c4 <iprintf>

}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000218 	.word	0x20000218
 8001c78:	20000378 	.word	0x20000378
 8001c7c:	20000370 	.word	0x20000370
 8001c80:	080094e0 	.word	0x080094e0
 8001c84:	20000788 	.word	0x20000788
 8001c88:	2000036c 	.word	0x2000036c
 8001c8c:	08009520 	.word	0x08009520

08001c90 <canh_bao>:
void canh_bao (){
 8001c90:	b598      	push	{r3, r4, r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	ticknow= HAL_GetTick();
 8001c94:	f000 ff32 	bl	8002afc <HAL_GetTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a6f      	ldr	r2, [pc, #444]	; (8001e58 <canh_bao+0x1c8>)
 8001c9c:	6013      	str	r3, [r2, #0]
	if(temp < warning_temp && value < warning_lux)
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <canh_bao+0x1cc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe ffca 	bl	8000c3c <__aeabi_i2f>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <canh_bao+0x1d0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f7ff f9d3 	bl	800105c <__aeabi_fcmpgt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01b      	beq.n	8001cf4 <canh_bao+0x64>
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <canh_bao+0x1d4>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b69      	ldr	r3, [pc, #420]	; (8001e68 <canh_bao+0x1d8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	da15      	bge.n	8001cf4 <canh_bao+0x64>
	{
		m1++;m2=0;m3=0;m4=0;
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <canh_bao+0x1dc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a67      	ldr	r2, [pc, #412]	; (8001e6c <canh_bao+0x1dc>)
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <canh_bao+0x1e0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b66      	ldr	r3, [pc, #408]	; (8001e74 <canh_bao+0x1e4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <canh_bao+0x1e8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
	    if (m1==1) {
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <canh_bao+0x1dc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	f040 80a6 	bne.w	8001e3a <canh_bao+0x1aa>
	    	SSD1306_Clear();
 8001cee:	f000 fbd2 	bl	8002496 <SSD1306_Clear>
	    if (m1==1) {
 8001cf2:	e0a2      	b.n	8001e3a <canh_bao+0x1aa>
	    }
	}else if (temp > warning_temp && value < warning_lux) {
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <canh_bao+0x1cc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe ff9f 	bl	8000c3c <__aeabi_i2f>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <canh_bao+0x1d0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff f98a 	bl	8001020 <__aeabi_fcmplt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d027      	beq.n	8001d62 <canh_bao+0xd2>
 8001d12:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <canh_bao+0x1d4>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b54      	ldr	r3, [pc, #336]	; (8001e68 <canh_bao+0x1d8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	da21      	bge.n	8001d62 <canh_bao+0xd2>
		printf("CHAY ROI::%d\n",(int)temp);
 8001d1e:	4b50      	ldr	r3, [pc, #320]	; (8001e60 <canh_bao+0x1d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f9a4 	bl	8001070 <__aeabi_f2iz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4853      	ldr	r0, [pc, #332]	; (8001e7c <canh_bao+0x1ec>)
 8001d2e:	f004 fd49 	bl	80067c4 <iprintf>
	    m1=0;m2++;m3=0;m4=0;
 8001d32:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <canh_bao+0x1dc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <canh_bao+0x1e0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <canh_bao+0x1e0>)
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <canh_bao+0x1e4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <canh_bao+0x1e8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
	    if (m2==1) {
 8001d4e:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <canh_bao+0x1e0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <canh_bao+0xca>
		   SSD1306_Clear();
 8001d56:	f000 fb9e 	bl	8002496 <SSD1306_Clear>
	    }
	    hien_thi(nhietdo);
 8001d5a:	4849      	ldr	r0, [pc, #292]	; (8001e80 <canh_bao+0x1f0>)
 8001d5c:	f000 f8a0 	bl	8001ea0 <hien_thi>
 8001d60:	e06b      	b.n	8001e3a <canh_bao+0x1aa>
	}else if (temp < warning_temp && value > warning_lux) {
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <canh_bao+0x1cc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ff68 	bl	8000c3c <__aeabi_i2f>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <canh_bao+0x1d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f7ff f971 	bl	800105c <__aeabi_fcmpgt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d023      	beq.n	8001dc8 <canh_bao+0x138>
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <canh_bao+0x1d4>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <canh_bao+0x1d8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dd1d      	ble.n	8001dc8 <canh_bao+0x138>
		printf("SANG ROI::%d\n",value);
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <canh_bao+0x1d4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	483c      	ldr	r0, [pc, #240]	; (8001e84 <canh_bao+0x1f4>)
 8001d94:	f004 fd16 	bl	80067c4 <iprintf>
		m1=0;m3++;m2=0;m4=0;
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <canh_bao+0x1dc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <canh_bao+0x1e4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	4a33      	ldr	r2, [pc, #204]	; (8001e74 <canh_bao+0x1e4>)
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <canh_bao+0x1e0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <canh_bao+0x1e8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
		if (m3==1) {
 8001db4:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <canh_bao+0x1e4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <canh_bao+0x130>
			SSD1306_Clear();}
 8001dbc:	f000 fb6b 	bl	8002496 <SSD1306_Clear>
		hien_thi(lux);
 8001dc0:	4831      	ldr	r0, [pc, #196]	; (8001e88 <canh_bao+0x1f8>)
 8001dc2:	f000 f86d 	bl	8001ea0 <hien_thi>
 8001dc6:	e038      	b.n	8001e3a <canh_bao+0x1aa>
	}else if (temp > warning_temp && value > warning_lux) {
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <canh_bao+0x1cc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff35 	bl	8000c3c <__aeabi_i2f>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <canh_bao+0x1d0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4610      	mov	r0, r2
 8001ddc:	f7ff f920 	bl	8001020 <__aeabi_fcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d029      	beq.n	8001e3a <canh_bao+0x1aa>
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <canh_bao+0x1d4>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <canh_bao+0x1d8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dd23      	ble.n	8001e3a <canh_bao+0x1aa>
		printf("TOANG ROI::%d %d\n",value, (int)temp);
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <canh_bao+0x1d4>)
 8001df4:	681c      	ldr	r4, [r3, #0]
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <canh_bao+0x1d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f938 	bl	8001070 <__aeabi_f2iz>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4621      	mov	r1, r4
 8001e06:	4821      	ldr	r0, [pc, #132]	; (8001e8c <canh_bao+0x1fc>)
 8001e08:	f004 fcdc 	bl	80067c4 <iprintf>
		m1=0;m4++;m2=0;m3=0;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <canh_bao+0x1dc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <canh_bao+0x1e8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <canh_bao+0x1e8>)
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <canh_bao+0x1e0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <canh_bao+0x1e4>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
		if (m4==1) {
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <canh_bao+0x1e8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <canh_bao+0x1a4>
			SSD1306_Clear();}
 8001e30:	f000 fb31 	bl	8002496 <SSD1306_Clear>
		hien_thi(nguyhiem);
 8001e34:	4816      	ldr	r0, [pc, #88]	; (8001e90 <canh_bao+0x200>)
 8001e36:	f000 f833 	bl	8001ea0 <hien_thi>
	}
	printf("Canh bao:%d %d\n",(int)ticknow, (int)(uwTick-uwtick1));
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <canh_bao+0x1c8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <canh_bao+0x204>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <canh_bao+0x208>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4813      	ldr	r0, [pc, #76]	; (8001e9c <canh_bao+0x20c>)
 8001e4e:	f004 fcb9 	bl	80067c4 <iprintf>
}
 8001e52:	bf00      	nop
 8001e54:	bd98      	pop	{r3, r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000218 	.word	0x20000218
 8001e5c:	20000018 	.word	0x20000018
 8001e60:	20000374 	.word	0x20000374
 8001e64:	20000370 	.word	0x20000370
 8001e68:	2000001c 	.word	0x2000001c
 8001e6c:	2000035c 	.word	0x2000035c
 8001e70:	20000360 	.word	0x20000360
 8001e74:	20000364 	.word	0x20000364
 8001e78:	20000368 	.word	0x20000368
 8001e7c:	08009530 	.word	0x08009530
 8001e80:	0800a4f8 	.word	0x0800a4f8
 8001e84:	08009540 	.word	0x08009540
 8001e88:	0800a2f8 	.word	0x0800a2f8
 8001e8c:	08009550 	.word	0x08009550
 8001e90:	0800a6f8 	.word	0x0800a6f8
 8001e94:	20000788 	.word	0x20000788
 8001e98:	2000036c 	.word	0x2000036c
 8001e9c:	08009564 	.word	0x08009564

08001ea0 <hien_thi>:
void hien_thi(const unsigned char* str)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
	SSD1306_DrawBitmap(85, 0, str, 64, 64, 1);
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2340      	movs	r3, #64	; 0x40
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2340      	movs	r3, #64	; 0x40
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2055      	movs	r0, #85	; 0x55
 8001eb8:	f000 f861 	bl	8001f7e <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8001ebc:	f000 f98c 	bl	80021d8 <SSD1306_UpdateScreen>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <hien_thilux>:
void hien_thilux(char * str) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	//SSD1306_Clear ();
	//SSD1306_GotoXY (10,10); // goto 10, 10
	SSD1306_GotoXY (0, 10);
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 fa24 	bl	8002320 <SSD1306_GotoXY>
		  		SSD1306_Puts ("Lux:     ", &Font_11x18, 1);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4918      	ldr	r1, [pc, #96]	; (8001f3c <hien_thilux+0x74>)
 8001edc:	4818      	ldr	r0, [pc, #96]	; (8001f40 <hien_thilux+0x78>)
 8001ede:	f000 fab5 	bl	800244c <SSD1306_Puts>
		  		SSD1306_UpdateScreen();
 8001ee2:	f000 f979 	bl	80021d8 <SSD1306_UpdateScreen>
		  		if(value < 10) {
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <hien_thilux+0x7c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b09      	cmp	r3, #9
 8001eec:	dc04      	bgt.n	8001ef8 <hien_thilux+0x30>
		  			SSD1306_GotoXY (63, 10);  // 1 DIGIT
 8001eee:	210a      	movs	r1, #10
 8001ef0:	203f      	movs	r0, #63	; 0x3f
 8001ef2:	f000 fa15 	bl	8002320 <SSD1306_GotoXY>
 8001ef6:	e016      	b.n	8001f26 <hien_thilux+0x5e>
		  		}
		  		else if (value < 100 ) {
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <hien_thilux+0x7c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b63      	cmp	r3, #99	; 0x63
 8001efe:	dc04      	bgt.n	8001f0a <hien_thilux+0x42>
		  			SSD1306_GotoXY (55, 10);  // 2 DIGITS
 8001f00:	210a      	movs	r1, #10
 8001f02:	2037      	movs	r0, #55	; 0x37
 8001f04:	f000 fa0c 	bl	8002320 <SSD1306_GotoXY>
 8001f08:	e00d      	b.n	8001f26 <hien_thilux+0x5e>
		  		}
		  		else if (value < 1000 ) {
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <hien_thilux+0x7c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f12:	da04      	bge.n	8001f1e <hien_thilux+0x56>
		  			SSD1306_GotoXY (47, 10);  // 3 DIGITS
 8001f14:	210a      	movs	r1, #10
 8001f16:	202f      	movs	r0, #47	; 0x2f
 8001f18:	f000 fa02 	bl	8002320 <SSD1306_GotoXY>
 8001f1c:	e003      	b.n	8001f26 <hien_thilux+0x5e>
		  		}
		  		else {
		  			SSD1306_GotoXY (40, 10);  // 4 DIGIS
 8001f1e:	210a      	movs	r1, #10
 8001f20:	2028      	movs	r0, #40	; 0x28
 8001f22:	f000 f9fd 	bl	8002320 <SSD1306_GotoXY>
		  		}
	  SSD1306_Puts (str, &Font_11x18, 1);
 8001f26:	2201      	movs	r2, #1
 8001f28:	4904      	ldr	r1, [pc, #16]	; (8001f3c <hien_thilux+0x74>)
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fa8e 	bl	800244c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001f30:	f000 f952 	bl	80021d8 <SSD1306_UpdateScreen>

}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	08009574 	.word	0x08009574
 8001f44:	20000370 	.word	0x20000370

08001f48 <hien_thitemp>:
void hien_thitemp (char * TEMP){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY (0, 30);
 8001f50:	211e      	movs	r1, #30
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 f9e4 	bl	8002320 <SSD1306_GotoXY>
	SSD1306_Puts (TEMP, &Font_11x18, 1);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4905      	ldr	r1, [pc, #20]	; (8001f70 <hien_thitemp+0x28>)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fa75 	bl	800244c <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001f62:	f000 f939 	bl	80021d8 <SSD1306_UpdateScreen>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <Error_Handler+0x8>

08001f7e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60ba      	str	r2, [r7, #8]
 8001f86:	461a      	mov	r2, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	81fb      	strh	r3, [r7, #14]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	81bb      	strh	r3, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001f94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f98:	3307      	adds	r3, #7
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da00      	bge.n	8001fa0 <SSD1306_DrawBitmap+0x22>
 8001f9e:	3307      	adds	r3, #7
 8001fa0:	10db      	asrs	r3, r3, #3
 8001fa2:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	82bb      	strh	r3, [r7, #20]
 8001fac:	e044      	b.n	8002038 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	827b      	strh	r3, [r7, #18]
 8001fb2:	e02f      	b.n	8002014 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001fb4:	8a7b      	ldrh	r3, [r7, #18]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
 8001fc4:	e012      	b.n	8001fec <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001fc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fce:	fb03 f202 	mul.w	r2, r3, r2
 8001fd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da00      	bge.n	8001fdc <SSD1306_DrawBitmap+0x5e>
 8001fda:	3307      	adds	r3, #7
 8001fdc:	10db      	asrs	r3, r3, #3
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da09      	bge.n	8002008 <SSD1306_DrawBitmap+0x8a>
 8001ff4:	89fa      	ldrh	r2, [r7, #14]
 8001ff6:	8a7b      	ldrh	r3, [r7, #18]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	89b9      	ldrh	r1, [r7, #12]
 8001ffe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f92e 	bl	8002264 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002008:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800200c:	b29b      	uxth	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	827b      	strh	r3, [r7, #18]
 8002014:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbc9      	blt.n	8001fb4 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002020:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002024:	b29b      	uxth	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	82bb      	strh	r3, [r7, #20]
 800202c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002030:	b29b      	uxth	r3, r3
 8002032:	3301      	adds	r3, #1
 8002034:	b29b      	uxth	r3, r3
 8002036:	81bb      	strh	r3, [r7, #12]
 8002038:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800203c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbb4      	blt.n	8001fae <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002056:	f000 fa27 	bl	80024a8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800205a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800205e:	2201      	movs	r2, #1
 8002060:	2178      	movs	r1, #120	; 0x78
 8002062:	485b      	ldr	r0, [pc, #364]	; (80021d0 <SSD1306_Init+0x180>)
 8002064:	f001 fdbc 	bl	8003be0 <HAL_I2C_IsDeviceReady>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800206e:	2300      	movs	r3, #0
 8002070:	e0a9      	b.n	80021c6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002072:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002076:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002078:	e002      	b.n	8002080 <SSD1306_Init+0x30>
		p--;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3b01      	subs	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f9      	bne.n	800207a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002086:	22ae      	movs	r2, #174	; 0xae
 8002088:	2100      	movs	r1, #0
 800208a:	2078      	movs	r0, #120	; 0x78
 800208c:	f000 fa86 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002090:	2220      	movs	r2, #32
 8002092:	2100      	movs	r1, #0
 8002094:	2078      	movs	r0, #120	; 0x78
 8002096:	f000 fa81 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800209a:	2210      	movs	r2, #16
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 fa7c 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020a4:	22b0      	movs	r2, #176	; 0xb0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 fa77 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80020ae:	22c8      	movs	r2, #200	; 0xc8
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 fa72 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 fa6d 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80020c2:	2210      	movs	r2, #16
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 fa68 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	2100      	movs	r1, #0
 80020d0:	2078      	movs	r0, #120	; 0x78
 80020d2:	f000 fa63 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80020d6:	2281      	movs	r2, #129	; 0x81
 80020d8:	2100      	movs	r1, #0
 80020da:	2078      	movs	r0, #120	; 0x78
 80020dc:	f000 fa5e 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80020e0:	22ff      	movs	r2, #255	; 0xff
 80020e2:	2100      	movs	r1, #0
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f000 fa59 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80020ea:	22a1      	movs	r2, #161	; 0xa1
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 fa54 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80020f4:	22a6      	movs	r2, #166	; 0xa6
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f000 fa4f 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80020fe:	22a8      	movs	r2, #168	; 0xa8
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 fa4a 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 fa45 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002112:	22a4      	movs	r2, #164	; 0xa4
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 fa40 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800211c:	22d3      	movs	r2, #211	; 0xd3
 800211e:	2100      	movs	r1, #0
 8002120:	2078      	movs	r0, #120	; 0x78
 8002122:	f000 fa3b 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f000 fa36 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002130:	22d5      	movs	r2, #213	; 0xd5
 8002132:	2100      	movs	r1, #0
 8002134:	2078      	movs	r0, #120	; 0x78
 8002136:	f000 fa31 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800213a:	22f0      	movs	r2, #240	; 0xf0
 800213c:	2100      	movs	r1, #0
 800213e:	2078      	movs	r0, #120	; 0x78
 8002140:	f000 fa2c 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002144:	22d9      	movs	r2, #217	; 0xd9
 8002146:	2100      	movs	r1, #0
 8002148:	2078      	movs	r0, #120	; 0x78
 800214a:	f000 fa27 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800214e:	2222      	movs	r2, #34	; 0x22
 8002150:	2100      	movs	r1, #0
 8002152:	2078      	movs	r0, #120	; 0x78
 8002154:	f000 fa22 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002158:	22da      	movs	r2, #218	; 0xda
 800215a:	2100      	movs	r1, #0
 800215c:	2078      	movs	r0, #120	; 0x78
 800215e:	f000 fa1d 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002162:	2212      	movs	r2, #18
 8002164:	2100      	movs	r1, #0
 8002166:	2078      	movs	r0, #120	; 0x78
 8002168:	f000 fa18 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800216c:	22db      	movs	r2, #219	; 0xdb
 800216e:	2100      	movs	r1, #0
 8002170:	2078      	movs	r0, #120	; 0x78
 8002172:	f000 fa13 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002176:	2220      	movs	r2, #32
 8002178:	2100      	movs	r1, #0
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f000 fa0e 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002180:	228d      	movs	r2, #141	; 0x8d
 8002182:	2100      	movs	r1, #0
 8002184:	2078      	movs	r0, #120	; 0x78
 8002186:	f000 fa09 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800218a:	2214      	movs	r2, #20
 800218c:	2100      	movs	r1, #0
 800218e:	2078      	movs	r0, #120	; 0x78
 8002190:	f000 fa04 	bl	800259c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002194:	22af      	movs	r2, #175	; 0xaf
 8002196:	2100      	movs	r1, #0
 8002198:	2078      	movs	r0, #120	; 0x78
 800219a:	f000 f9ff 	bl	800259c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800219e:	222e      	movs	r2, #46	; 0x2e
 80021a0:	2100      	movs	r1, #0
 80021a2:	2078      	movs	r0, #120	; 0x78
 80021a4:	f000 f9fa 	bl	800259c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 f843 	bl	8002234 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80021ae:	f000 f813 	bl	80021d8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <SSD1306_Init+0x184>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <SSD1306_Init+0x184>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SSD1306_Init+0x184>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80021c4:	2301      	movs	r3, #1
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000021c 	.word	0x2000021c
 80021d4:	2000077c 	.word	0x2000077c

080021d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	71fb      	strb	r3, [r7, #7]
 80021e2:	e01d      	b.n	8002220 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	3b50      	subs	r3, #80	; 0x50
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	2100      	movs	r1, #0
 80021ee:	2078      	movs	r0, #120	; 0x78
 80021f0:	f000 f9d4 	bl	800259c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	2078      	movs	r0, #120	; 0x78
 80021fa:	f000 f9cf 	bl	800259c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80021fe:	2210      	movs	r2, #16
 8002200:	2100      	movs	r1, #0
 8002202:	2078      	movs	r0, #120	; 0x78
 8002204:	f000 f9ca 	bl	800259c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	01db      	lsls	r3, r3, #7
 800220c:	4a08      	ldr	r2, [pc, #32]	; (8002230 <SSD1306_UpdateScreen+0x58>)
 800220e:	441a      	add	r2, r3
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	2140      	movs	r1, #64	; 0x40
 8002214:	2078      	movs	r0, #120	; 0x78
 8002216:	f000 f95b 	bl	80024d0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	3301      	adds	r3, #1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b07      	cmp	r3, #7
 8002224:	d9de      	bls.n	80021e4 <SSD1306_UpdateScreen+0xc>
	}
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000037c 	.word	0x2000037c

08002234 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <SSD1306_Fill+0x14>
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <SSD1306_Fill+0x16>
 8002248:	23ff      	movs	r3, #255	; 0xff
 800224a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224e:	4619      	mov	r1, r3
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <SSD1306_Fill+0x2c>)
 8002252:	f003 fd5f 	bl	8005d14 <memset>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000037c 	.word	0x2000037c

08002264 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
 800226e:	460b      	mov	r3, r1
 8002270:	80bb      	strh	r3, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	70fb      	strb	r3, [r7, #3]
	if (
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	2b7f      	cmp	r3, #127	; 0x7f
 800227a:	d848      	bhi.n	800230e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	2b3f      	cmp	r3, #63	; 0x3f
 8002280:	d845      	bhi.n	800230e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <SSD1306_DrawPixel+0xb4>)
 8002284:	791b      	ldrb	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d11a      	bne.n	80022d4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	88bb      	ldrh	r3, [r7, #4]
 80022a2:	08db      	lsrs	r3, r3, #3
 80022a4:	b298      	uxth	r0, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	01db      	lsls	r3, r3, #7
 80022aa:	4413      	add	r3, r2
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <SSD1306_DrawPixel+0xb8>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	b25a      	sxtb	r2, r3
 80022b2:	88bb      	ldrh	r3, [r7, #4]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b259      	sxtb	r1, r3
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	4603      	mov	r3, r0
 80022c8:	01db      	lsls	r3, r3, #7
 80022ca:	4413      	add	r3, r2
 80022cc:	b2c9      	uxtb	r1, r1
 80022ce:	4a13      	ldr	r2, [pc, #76]	; (800231c <SSD1306_DrawPixel+0xb8>)
 80022d0:	54d1      	strb	r1, [r2, r3]
 80022d2:	e01d      	b.n	8002310 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80022d4:	88fa      	ldrh	r2, [r7, #6]
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	b298      	uxth	r0, r3
 80022dc:	4603      	mov	r3, r0
 80022de:	01db      	lsls	r3, r3, #7
 80022e0:	4413      	add	r3, r2
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <SSD1306_DrawPixel+0xb8>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	b25a      	sxtb	r2, r3
 80022e8:	88bb      	ldrh	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	4013      	ands	r3, r2
 80022fc:	b259      	sxtb	r1, r3
 80022fe:	88fa      	ldrh	r2, [r7, #6]
 8002300:	4603      	mov	r3, r0
 8002302:	01db      	lsls	r3, r3, #7
 8002304:	4413      	add	r3, r2
 8002306:	b2c9      	uxtb	r1, r1
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <SSD1306_DrawPixel+0xb8>)
 800230a:	54d1      	strb	r1, [r2, r3]
 800230c:	e000      	b.n	8002310 <SSD1306_DrawPixel+0xac>
		return;
 800230e:	bf00      	nop
	}
}
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	2000077c 	.word	0x2000077c
 800231c:	2000037c 	.word	0x2000037c

08002320 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	460a      	mov	r2, r1
 800232a:	80fb      	strh	r3, [r7, #6]
 800232c:	4613      	mov	r3, r2
 800232e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002330:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SSD1306_GotoXY+0x28>)
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002336:	4a04      	ldr	r2, [pc, #16]	; (8002348 <SSD1306_GotoXY+0x28>)
 8002338:	88bb      	ldrh	r3, [r7, #4]
 800233a:	8053      	strh	r3, [r2, #2]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	2000077c 	.word	0x2000077c

0800234c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	4613      	mov	r3, r2
 800235a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <SSD1306_Putc+0xfc>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
	if (
 8002368:	2b7f      	cmp	r3, #127	; 0x7f
 800236a:	dc07      	bgt.n	800237c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <SSD1306_Putc+0xfc>)
 800236e:	885b      	ldrh	r3, [r3, #2]
 8002370:	461a      	mov	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002378:	2b3f      	cmp	r3, #63	; 0x3f
 800237a:	dd01      	ble.n	8002380 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800237c:	2300      	movs	r3, #0
 800237e:	e05e      	b.n	800243e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e04b      	b.n	800241e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	3b20      	subs	r3, #32
 800238e:	6839      	ldr	r1, [r7, #0]
 8002390:	7849      	ldrb	r1, [r1, #1]
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4619      	mov	r1, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	440b      	add	r3, r1
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e030      	b.n	800240c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <SSD1306_Putc+0xfc>)
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	b298      	uxth	r0, r3
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <SSD1306_Putc+0xfc>)
 80023c8:	885a      	ldrh	r2, [r3, #2]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	79ba      	ldrb	r2, [r7, #6]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7ff ff45 	bl	8002264 <SSD1306_DrawPixel>
 80023da:	e014      	b.n	8002406 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80023dc:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <SSD1306_Putc+0xfc>)
 80023de:	881a      	ldrh	r2, [r3, #0]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	b298      	uxth	r0, r3
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <SSD1306_Putc+0xfc>)
 80023ea:	885a      	ldrh	r2, [r3, #2]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	b299      	uxth	r1, r3
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	f7ff ff2f 	bl	8002264 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	3301      	adds	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4293      	cmp	r3, r2
 8002416:	d3c8      	bcc.n	80023aa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	461a      	mov	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4293      	cmp	r3, r2
 8002428:	d3ad      	bcc.n	8002386 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <SSD1306_Putc+0xfc>)
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4413      	add	r3, r2
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <SSD1306_Putc+0xfc>)
 800243a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800243c:	79fb      	ldrb	r3, [r7, #7]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000077c 	.word	0x2000077c

0800244c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800245a:	e012      	b.n	8002482 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	79fa      	ldrb	r2, [r7, #7]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff71 	bl	800234c <SSD1306_Putc>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d002      	beq.n	800247c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	e008      	b.n	800248e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e8      	bne.n	800245c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	781b      	ldrb	r3, [r3, #0]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800249a:	2000      	movs	r0, #0
 800249c:	f7ff feca 	bl	8002234 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80024a0:	f7ff fe9a 	bl	80021d8 <SSD1306_UpdateScreen>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <ssd1306_I2C_Init+0x24>)
 80024b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024b2:	e002      	b.n	80024ba <ssd1306_I2C_Init+0x12>
		p--;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f9      	bne.n	80024b4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	0003d090 	.word	0x0003d090

080024d0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b0c7      	sub	sp, #284	; 0x11c
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	4604      	mov	r4, r0
 80024d8:	4608      	mov	r0, r1
 80024da:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80024de:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80024e2:	600a      	str	r2, [r1, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80024ee:	4622      	mov	r2, r4
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024f6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80024fa:	4602      	mov	r2, r0
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002502:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002506:	460a      	mov	r2, r1
 8002508:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800250a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800250e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002512:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002516:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002524:	e015      	b.n	8002552 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002526:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800252a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800252e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	441a      	add	r2, r3
 8002536:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800253a:	3301      	adds	r3, #1
 800253c:	7811      	ldrb	r1, [r2, #0]
 800253e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002542:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002546:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002548:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800254c:	3301      	adds	r3, #1
 800254e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002552:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002556:	b29b      	uxth	r3, r3
 8002558:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800255c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d8df      	bhi.n	8002526 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800256a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b299      	uxth	r1, r3
 8002572:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002576:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	f107 020c 	add.w	r2, r7, #12
 8002584:	200a      	movs	r0, #10
 8002586:	9000      	str	r0, [sp, #0]
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <ssd1306_I2C_WriteMulti+0xc8>)
 800258a:	f000 ffcb 	bl	8003524 <HAL_I2C_Master_Transmit>
}
 800258e:	bf00      	nop
 8002590:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}
 8002598:	2000021c 	.word	0x2000021c

0800259c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
 80025a6:	460b      	mov	r3, r1
 80025a8:	71bb      	strb	r3, [r7, #6]
 80025aa:	4613      	mov	r3, r2
 80025ac:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80025b2:	797b      	ldrb	r3, [r7, #5]
 80025b4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	b299      	uxth	r1, r3
 80025ba:	f107 020c 	add.w	r2, r7, #12
 80025be:	230a      	movs	r3, #10
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2302      	movs	r3, #2
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <ssd1306_I2C_Write+0x38>)
 80025c6:	f000 ffad 	bl	8003524 <HAL_I2C_Master_Transmit>
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000021c 	.word	0x2000021c

080025d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <HAL_MspInit+0x5c>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <HAL_MspInit+0x5c>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6193      	str	r3, [r2, #24]
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_MspInit+0x5c>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_MspInit+0x5c>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_MspInit+0x5c>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	61d3      	str	r3, [r2, #28]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_MspInit+0x5c>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_MspInit+0x60>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_MspInit+0x60>)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40021000 	.word	0x40021000
 8002638:	40010000 	.word	0x40010000

0800263c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2b      	ldr	r2, [pc, #172]	; (8002704 <HAL_I2C_MspInit+0xc8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d124      	bne.n	80026a6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 8002662:	f043 0308 	orr.w	r3, r3, #8
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002674:	23c0      	movs	r3, #192	; 0xc0
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002678:	2312      	movs	r3, #18
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f107 0318 	add.w	r3, r7, #24
 8002684:	4619      	mov	r1, r3
 8002686:	4821      	ldr	r0, [pc, #132]	; (800270c <HAL_I2C_MspInit+0xd0>)
 8002688:	f000 fc24 	bl	8002ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800268c:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 8002692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002696:	61d3      	str	r3, [r2, #28]
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026a4:	e029      	b.n	80026fa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_I2C_MspInit+0xd4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d124      	bne.n	80026fa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ce:	2312      	movs	r3, #18
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	4619      	mov	r1, r3
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <HAL_I2C_MspInit+0xd0>)
 80026de:	f000 fbf9 	bl	8002ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 80026e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_I2C_MspInit+0xcc>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
}
 80026fa:	bf00      	nop
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40005400 	.word	0x40005400
 8002708:	40021000 	.word	0x40021000
 800270c:	40010c00 	.word	0x40010c00
 8002710:	40005800 	.word	0x40005800

08002714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a09      	ldr	r2, [pc, #36]	; (8002748 <HAL_TIM_Base_MspInit+0x34>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10b      	bne.n	800273e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_TIM_Base_MspInit+0x38>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_TIM_Base_MspInit+0x38>)
 800272c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002730:	6193      	str	r3, [r2, #24]
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_TIM_Base_MspInit+0x38>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40012c00 	.word	0x40012c00
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a20      	ldr	r2, [pc, #128]	; (80027ec <HAL_UART_MspInit+0x9c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d139      	bne.n	80027e4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_UART_MspInit+0xa0>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <HAL_UART_MspInit+0xa0>)
 8002776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_UART_MspInit+0xa0>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_UART_MspInit+0xa0>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_UART_MspInit+0xa0>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_UART_MspInit+0xa0>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4619      	mov	r1, r3
 80027b4:	480f      	ldr	r0, [pc, #60]	; (80027f4 <HAL_UART_MspInit+0xa4>)
 80027b6:	f000 fb8d 	bl	8002ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	4809      	ldr	r0, [pc, #36]	; (80027f4 <HAL_UART_MspInit+0xa4>)
 80027d0:	f000 fb80 	bl	8002ed4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2104      	movs	r1, #4
 80027d8:	2025      	movs	r0, #37	; 0x25
 80027da:	f000 fa94 	bl	8002d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027de:	2025      	movs	r0, #37	; 0x25
 80027e0:	f000 faad 	bl	8002d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010800 	.word	0x40010800

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027fc:	e7fe      	b.n	80027fc <NMI_Handler+0x4>

080027fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002802:	e7fe      	b.n	8002802 <HardFault_Handler+0x4>

08002804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler+0x4>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <BusFault_Handler+0x4>

08002810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <UsageFault_Handler+0x4>

08002816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283e:	f000 f94b 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <USART1_IRQHandler+0x10>)
 800284e:	f002 fdff 	bl	8005450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000030c 	.word	0x2000030c

0800285c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002860:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002864:	f000 fd02 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002868:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800286c:	f000 fcfe 	bl	800326c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return 1;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <_kill>:

int _kill(int pid, int sig)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800288c:	f003 fa10 	bl	8005cb0 <__errno>
 8002890:	4603      	mov	r3, r0
 8002892:	2216      	movs	r2, #22
 8002894:	601a      	str	r2, [r3, #0]
  return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_exit>:

void _exit (int status)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028aa:	f04f 31ff 	mov.w	r1, #4294967295
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffe7 	bl	8002882 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028b4:	e7fe      	b.n	80028b4 <_exit+0x12>

080028b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e00a      	b.n	80028de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028c8:	f3af 8000 	nop.w
 80028cc:	4601      	mov	r1, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	60ba      	str	r2, [r7, #8]
 80028d4:	b2ca      	uxtb	r2, r1
 80028d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	dbf0      	blt.n	80028c8 <_read+0x12>
  }

  return len;
 80028e6:	687b      	ldr	r3, [r7, #4]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e009      	b.n	8002916 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	60ba      	str	r2, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fe3e 	bl	800158c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3301      	adds	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	dbf1      	blt.n	8002902 <_write+0x12>
  }
  return len;
 800291e:	687b      	ldr	r3, [r7, #4]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_close>:

int _close(int file)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800294e:	605a      	str	r2, [r3, #4]
  return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <_isatty>:

int _isatty(int file)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <_sbrk+0x5c>)
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <_sbrk+0x60>)
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <_sbrk+0x64>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <_sbrk+0x64>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <_sbrk+0x68>)
 80029a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d207      	bcs.n	80029c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b8:	f003 f97a 	bl	8005cb0 <__errno>
 80029bc:	4603      	mov	r3, r0
 80029be:	220c      	movs	r2, #12
 80029c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e009      	b.n	80029dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <_sbrk+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <_sbrk+0x64>)
 80029d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20005000 	.word	0x20005000
 80029e8:	00000400 	.word	0x00000400
 80029ec:	20000784 	.word	0x20000784
 80029f0:	200007a0 	.word	0x200007a0

080029f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	480c      	ldr	r0, [pc, #48]	; (8002a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a02:	490d      	ldr	r1, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a26:	f7ff ffe5 	bl	80029f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f003 f947 	bl	8005cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2e:	f7fe fdbf 	bl	80015b0 <main>
  bx lr
 8002a32:	4770      	bx	lr
  ldr r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a38:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002a3c:	0800ad10 	.word	0x0800ad10
  ldr r2, =_sbss
 8002a40:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002a44:	2000079c 	.word	0x2000079c

08002a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a48:	e7fe      	b.n	8002a48 <ADC1_2_IRQHandler>
	...

08002a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_Init+0x28>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_Init+0x28>)
 8002a56:	f043 0310 	orr.w	r3, r3, #16
 8002a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f000 f947 	bl	8002cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a62:	200f      	movs	r0, #15
 8002a64:	f000 f808 	bl	8002a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a68:	f7ff fdb6 	bl	80025d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40022000 	.word	0x40022000

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_InitTick+0x54>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x58>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f95f 	bl	8002d5a <HAL_SYSTICK_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00e      	b.n	8002ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b0f      	cmp	r3, #15
 8002aaa:	d80a      	bhi.n	8002ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aac:	2200      	movs	r2, #0
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f000 f927 	bl	8002d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <HAL_InitTick+0x5c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000020 	.word	0x20000020
 8002ad0:	20000028 	.word	0x20000028
 8002ad4:	20000024 	.word	0x20000024

08002ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x1c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x20>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_IncTick+0x20>)
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	20000028 	.word	0x20000028
 8002af8:	20000788 	.word	0x20000788

08002afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return uwTick;
 8002b00:	4b02      	ldr	r3, [pc, #8]	; (8002b0c <HAL_GetTick+0x10>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	20000788 	.word	0x20000788

08002b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff fff0 	bl	8002afc <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d005      	beq.n	8002b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_Delay+0x44>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b36:	bf00      	nop
 8002b38:	f7ff ffe0 	bl	8002afc <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d8f7      	bhi.n	8002b38 <HAL_Delay+0x28>
  {
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000028 	.word	0x20000028

08002b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <__NVIC_EnableIRQ+0x34>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
         );
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbc:	d301      	bcc.n	8002cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00f      	b.n	8002ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <SysTick_Config+0x40>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cca:	210f      	movs	r1, #15
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f7ff ff90 	bl	8002bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <SysTick_Config+0x40>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SysTick_Config+0x40>)
 8002cdc:	2207      	movs	r2, #7
 8002cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	e000e010 	.word	0xe000e010

08002cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff2d 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d18:	f7ff ff42 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff90 	bl	8002c48 <NVIC_EncodePriority>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4611      	mov	r1, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff5f 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff35 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ffa2 	bl	8002cac <SysTick_Config>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b085      	sub	sp, #20
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d008      	beq.n	8002d9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e020      	b.n	8002ddc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 020e 	bic.w	r2, r2, #14
 8002da8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d005      	beq.n	8002e0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2204      	movs	r2, #4
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e051      	b.n	8002eae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 020e 	bic.w	r2, r2, #14
 8002e18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0201 	bic.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <HAL_DMA_Abort_IT+0xd0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d029      	beq.n	8002e88 <HAL_DMA_Abort_IT+0xa0>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <HAL_DMA_Abort_IT+0xd4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d022      	beq.n	8002e84 <HAL_DMA_Abort_IT+0x9c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <HAL_DMA_Abort_IT+0xd8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d01a      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x96>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_DMA_Abort_IT+0xdc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d012      	beq.n	8002e78 <HAL_DMA_Abort_IT+0x90>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_DMA_Abort_IT+0xe0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00a      	beq.n	8002e72 <HAL_DMA_Abort_IT+0x8a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <HAL_DMA_Abort_IT+0xe4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d102      	bne.n	8002e6c <HAL_DMA_Abort_IT+0x84>
 8002e66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e6a:	e00e      	b.n	8002e8a <HAL_DMA_Abort_IT+0xa2>
 8002e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e70:	e00b      	b.n	8002e8a <HAL_DMA_Abort_IT+0xa2>
 8002e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e76:	e008      	b.n	8002e8a <HAL_DMA_Abort_IT+0xa2>
 8002e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7c:	e005      	b.n	8002e8a <HAL_DMA_Abort_IT+0xa2>
 8002e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e82:	e002      	b.n	8002e8a <HAL_DMA_Abort_IT+0xa2>
 8002e84:	2310      	movs	r3, #16
 8002e86:	e000      	b.n	8002e8a <HAL_DMA_Abort_IT+0xa2>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <HAL_DMA_Abort_IT+0xe8>)
 8002e8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
    } 
  }
  return status;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40020008 	.word	0x40020008
 8002ebc:	4002001c 	.word	0x4002001c
 8002ec0:	40020030 	.word	0x40020030
 8002ec4:	40020044 	.word	0x40020044
 8002ec8:	40020058 	.word	0x40020058
 8002ecc:	4002006c 	.word	0x4002006c
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b08b      	sub	sp, #44	; 0x2c
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee6:	e169      	b.n	80031bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	f040 8158 	bne.w	80031b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4a9a      	ldr	r2, [pc, #616]	; (8003174 <HAL_GPIO_Init+0x2a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d05e      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f10:	4a98      	ldr	r2, [pc, #608]	; (8003174 <HAL_GPIO_Init+0x2a0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d875      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f16:	4a98      	ldr	r2, [pc, #608]	; (8003178 <HAL_GPIO_Init+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d058      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f1c:	4a96      	ldr	r2, [pc, #600]	; (8003178 <HAL_GPIO_Init+0x2a4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d86f      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f22:	4a96      	ldr	r2, [pc, #600]	; (800317c <HAL_GPIO_Init+0x2a8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d052      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f28:	4a94      	ldr	r2, [pc, #592]	; (800317c <HAL_GPIO_Init+0x2a8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d869      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f2e:	4a94      	ldr	r2, [pc, #592]	; (8003180 <HAL_GPIO_Init+0x2ac>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04c      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f34:	4a92      	ldr	r2, [pc, #584]	; (8003180 <HAL_GPIO_Init+0x2ac>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d863      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f3a:	4a92      	ldr	r2, [pc, #584]	; (8003184 <HAL_GPIO_Init+0x2b0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d046      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
 8002f40:	4a90      	ldr	r2, [pc, #576]	; (8003184 <HAL_GPIO_Init+0x2b0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d85d      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f46:	2b12      	cmp	r3, #18
 8002f48:	d82a      	bhi.n	8002fa0 <HAL_GPIO_Init+0xcc>
 8002f4a:	2b12      	cmp	r3, #18
 8002f4c:	d859      	bhi.n	8003002 <HAL_GPIO_Init+0x12e>
 8002f4e:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <HAL_GPIO_Init+0x80>)
 8002f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f54:	08002fcf 	.word	0x08002fcf
 8002f58:	08002fa9 	.word	0x08002fa9
 8002f5c:	08002fbb 	.word	0x08002fbb
 8002f60:	08002ffd 	.word	0x08002ffd
 8002f64:	08003003 	.word	0x08003003
 8002f68:	08003003 	.word	0x08003003
 8002f6c:	08003003 	.word	0x08003003
 8002f70:	08003003 	.word	0x08003003
 8002f74:	08003003 	.word	0x08003003
 8002f78:	08003003 	.word	0x08003003
 8002f7c:	08003003 	.word	0x08003003
 8002f80:	08003003 	.word	0x08003003
 8002f84:	08003003 	.word	0x08003003
 8002f88:	08003003 	.word	0x08003003
 8002f8c:	08003003 	.word	0x08003003
 8002f90:	08003003 	.word	0x08003003
 8002f94:	08003003 	.word	0x08003003
 8002f98:	08002fb1 	.word	0x08002fb1
 8002f9c:	08002fc5 	.word	0x08002fc5
 8002fa0:	4a79      	ldr	r2, [pc, #484]	; (8003188 <HAL_GPIO_Init+0x2b4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fa6:	e02c      	b.n	8003002 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	623b      	str	r3, [r7, #32]
          break;
 8002fae:	e029      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	623b      	str	r3, [r7, #32]
          break;
 8002fb8:	e024      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	623b      	str	r3, [r7, #32]
          break;
 8002fc2:	e01f      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	623b      	str	r3, [r7, #32]
          break;
 8002fcc:	e01a      	b.n	8003004 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	623b      	str	r3, [r7, #32]
          break;
 8002fda:	e013      	b.n	8003004 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	611a      	str	r2, [r3, #16]
          break;
 8002fee:	e009      	b.n	8003004 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	615a      	str	r2, [r3, #20]
          break;
 8002ffa:	e003      	b.n	8003004 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
          break;
 8003000:	e000      	b.n	8003004 <HAL_GPIO_Init+0x130>
          break;
 8003002:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d801      	bhi.n	800300e <HAL_GPIO_Init+0x13a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	e001      	b.n	8003012 <HAL_GPIO_Init+0x13e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	d802      	bhi.n	8003020 <HAL_GPIO_Init+0x14c>
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x152>
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	3b08      	subs	r3, #8
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	210f      	movs	r1, #15
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	401a      	ands	r2, r3
 8003038:	6a39      	ldr	r1, [r7, #32]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	431a      	orrs	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80b1 	beq.w	80031b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003054:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_GPIO_Init+0x2b8>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_GPIO_Init+0x2b8>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6193      	str	r3, [r2, #24]
 8003060:	4b4a      	ldr	r3, [pc, #296]	; (800318c <HAL_GPIO_Init+0x2b8>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800306c:	4a48      	ldr	r2, [pc, #288]	; (8003190 <HAL_GPIO_Init+0x2bc>)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	3302      	adds	r3, #2
 8003074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003078:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a40      	ldr	r2, [pc, #256]	; (8003194 <HAL_GPIO_Init+0x2c0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_GPIO_Init+0x1ec>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3f      	ldr	r2, [pc, #252]	; (8003198 <HAL_GPIO_Init+0x2c4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00d      	beq.n	80030bc <HAL_GPIO_Init+0x1e8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a3e      	ldr	r2, [pc, #248]	; (800319c <HAL_GPIO_Init+0x2c8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d007      	beq.n	80030b8 <HAL_GPIO_Init+0x1e4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <HAL_GPIO_Init+0x2cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_GPIO_Init+0x1e0>
 80030b0:	2303      	movs	r3, #3
 80030b2:	e006      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030b4:	2304      	movs	r3, #4
 80030b6:	e004      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e002      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_GPIO_Init+0x1ee>
 80030c0:	2300      	movs	r3, #0
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	f002 0203 	and.w	r2, r2, #3
 80030c8:	0092      	lsls	r2, r2, #2
 80030ca:	4093      	lsls	r3, r2
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030d2:	492f      	ldr	r1, [pc, #188]	; (8003190 <HAL_GPIO_Init+0x2bc>)
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	492c      	ldr	r1, [pc, #176]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	43db      	mvns	r3, r3
 8003102:	4928      	ldr	r1, [pc, #160]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003104:	4013      	ands	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003114:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4922      	ldr	r1, [pc, #136]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	43db      	mvns	r3, r3
 800312a:	491e      	ldr	r1, [pc, #120]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800312c:	4013      	ands	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d006      	beq.n	800314a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	4918      	ldr	r1, [pc, #96]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	43db      	mvns	r3, r3
 8003152:	4914      	ldr	r1, [pc, #80]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003154:	4013      	ands	r3, r2
 8003156:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d021      	beq.n	80031a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_GPIO_Init+0x2d0>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	60cb      	str	r3, [r1, #12]
 8003170:	e021      	b.n	80031b6 <HAL_GPIO_Init+0x2e2>
 8003172:	bf00      	nop
 8003174:	10320000 	.word	0x10320000
 8003178:	10310000 	.word	0x10310000
 800317c:	10220000 	.word	0x10220000
 8003180:	10210000 	.word	0x10210000
 8003184:	10120000 	.word	0x10120000
 8003188:	10110000 	.word	0x10110000
 800318c:	40021000 	.word	0x40021000
 8003190:	40010000 	.word	0x40010000
 8003194:	40010800 	.word	0x40010800
 8003198:	40010c00 	.word	0x40010c00
 800319c:	40011000 	.word	0x40011000
 80031a0:	40011400 	.word	0x40011400
 80031a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_GPIO_Init+0x304>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4909      	ldr	r1, [pc, #36]	; (80031d8 <HAL_GPIO_Init+0x304>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	3301      	adds	r3, #1
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f47f ae8e 	bne.w	8002ee8 <HAL_GPIO_Init+0x14>
  }
}
 80031cc:	bf00      	nop
 80031ce:	bf00      	nop
 80031d0:	372c      	adds	r7, #44	; 0x2c
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e001      	b.n	80031fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	807b      	strh	r3, [r7, #2]
 8003216:	4613      	mov	r3, r2
 8003218:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800321a:	787b      	ldrb	r3, [r7, #1]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003220:	887a      	ldrh	r2, [r7, #2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003226:	e003      	b.n	8003230 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	041a      	lsls	r2, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4013      	ands	r3, r2
 8003252:	041a      	lsls	r2, r3, #16
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43d9      	mvns	r1, r3
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	400b      	ands	r3, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	611a      	str	r2, [r3, #16]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fc58 	bl	8001b40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003290:	bf00      	nop
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e12b      	b.n	8003506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff f9ba 	bl	800263c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003300:	f001 fc9c 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a81      	ldr	r2, [pc, #516]	; (8003510 <HAL_I2C_Init+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d807      	bhi.n	8003320 <HAL_I2C_Init+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a80      	ldr	r2, [pc, #512]	; (8003514 <HAL_I2C_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e006      	b.n	800332e <HAL_I2C_Init+0x92>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a7d      	ldr	r2, [pc, #500]	; (8003518 <HAL_I2C_Init+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0e7      	b.n	8003506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a78      	ldr	r2, [pc, #480]	; (800351c <HAL_I2C_Init+0x280>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6a      	ldr	r2, [pc, #424]	; (8003510 <HAL_I2C_Init+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <HAL_I2C_Init+0xd4>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	e009      	b.n	8003384 <HAL_I2C_Init+0xe8>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <HAL_I2C_Init+0x284>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	495c      	ldr	r1, [pc, #368]	; (8003510 <HAL_I2C_Init+0x274>)
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d819      	bhi.n	80033d8 <HAL_I2C_Init+0x13c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e59      	subs	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b8:	400b      	ands	r3, r1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_I2C_Init+0x138>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e59      	subs	r1, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	e051      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x168>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x18e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x196>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	461a      	mov	r2, r3
 8003530:	460b      	mov	r3, r1
 8003532:	817b      	strh	r3, [r7, #10]
 8003534:	4613      	mov	r3, r2
 8003536:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff fae0 	bl	8002afc <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	f040 80e0 	bne.w	800370c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	4970      	ldr	r1, [pc, #448]	; (8003718 <HAL_I2C_Master_Transmit+0x1f4>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fdc0 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	e0d3      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_I2C_Master_Transmit+0x50>
 8003570:	2302      	movs	r3, #2
 8003572:	e0cc      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d007      	beq.n	800359a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2221      	movs	r2, #33	; 0x21
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2210      	movs	r2, #16
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a50      	ldr	r2, [pc, #320]	; (800371c <HAL_I2C_Master_Transmit+0x1f8>)
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035dc:	8979      	ldrh	r1, [r7, #10]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6a3a      	ldr	r2, [r7, #32]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fc2a 	bl	8003e3c <I2C_MasterRequestWrite>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e08d      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003608:	e066      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	6a39      	ldr	r1, [r7, #32]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fe3a 	bl	8004288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b04      	cmp	r3, #4
 8003620:	d107      	bne.n	8003632 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06b      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	781a      	ldrb	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d11b      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x188>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6a39      	ldr	r1, [r7, #32]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fe2a 	bl	800430a <I2C_WaitOnBTFFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e01a      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d194      	bne.n	800360a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	00100002 	.word	0x00100002
 800371c:	ffff0000 	.word	0xffff0000

08003720 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	; 0x30
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	460b      	mov	r3, r1
 800372e:	817b      	strh	r3, [r7, #10]
 8003730:	4613      	mov	r3, r2
 8003732:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff f9e0 	bl	8002afc <HAL_GetTick>
 800373c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b20      	cmp	r3, #32
 8003748:	f040 823f 	bne.w	8003bca <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	497f      	ldr	r1, [pc, #508]	; (8003954 <HAL_I2C_Master_Receive+0x234>)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fcc0 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
 8003764:	e232      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_I2C_Master_Receive+0x54>
 8003770:	2302      	movs	r3, #2
 8003772:	e22b      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b01      	cmp	r3, #1
 8003788:	d007      	beq.n	800379a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0201 	orr.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2222      	movs	r2, #34	; 0x22
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2210      	movs	r2, #16
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	893a      	ldrh	r2, [r7, #8]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a5f      	ldr	r2, [pc, #380]	; (8003958 <HAL_I2C_Master_Receive+0x238>)
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037dc:	8979      	ldrh	r1, [r7, #10]
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fbac 	bl	8003f40 <I2C_MasterRequestRead>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e1ec      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d113      	bne.n	8003822 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e1c0      	b.n	8003ba4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b01      	cmp	r3, #1
 8003828:	d11e      	bne.n	8003868 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003838:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800383a:	b672      	cpsid	i
}
 800383c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003864:	b662      	cpsie	i
}
 8003866:	e035      	b.n	80038d4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	2b02      	cmp	r3, #2
 800386e:	d11e      	bne.n	80038ae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003880:	b672      	cpsid	i
}
 8003882:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038aa:	b662      	cpsie	i
}
 80038ac:	e012      	b.n	80038d4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038d4:	e166      	b.n	8003ba4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	2b03      	cmp	r3, #3
 80038dc:	f200 811f 	bhi.w	8003b1e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d123      	bne.n	8003930 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fd4d 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e167      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392e:	e139      	b.n	8003ba4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	2b02      	cmp	r3, #2
 8003936:	d152      	bne.n	80039de <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	2200      	movs	r2, #0
 8003940:	4906      	ldr	r1, [pc, #24]	; (800395c <HAL_I2C_Master_Receive+0x23c>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fbca 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e13c      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
 8003952:	bf00      	nop
 8003954:	00100002 	.word	0x00100002
 8003958:	ffff0000 	.word	0xffff0000
 800395c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003960:	b672      	cpsid	i
}
 8003962:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039a6:	b662      	cpsie	i
}
 80039a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039dc:	e0e2      	b.n	8003ba4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	2200      	movs	r2, #0
 80039e6:	497b      	ldr	r1, [pc, #492]	; (8003bd4 <HAL_I2C_Master_Receive+0x4b4>)
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fb77 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0e9      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a08:	b672      	cpsid	i
}
 8003a0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a3e:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <HAL_I2C_Master_Receive+0x4b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	08db      	lsrs	r3, r3, #3
 8003a44:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <HAL_I2C_Master_Receive+0x4bc>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0a1a      	lsrs	r2, r3, #8
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00da      	lsls	r2, r3, #3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d118      	bne.n	8003a96 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a86:	b662      	cpsie	i
}
 8003a88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e09a      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d1d9      	bne.n	8003a58 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ae6:	b662      	cpsie	i
}
 8003ae8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b1c:	e042      	b.n	8003ba4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fc32 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e04c      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d118      	bne.n	8003ba4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f47f ae94 	bne.w	80038d6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3728      	adds	r7, #40	; 0x28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	00010004 	.word	0x00010004
 8003bd8:	20000020 	.word	0x20000020
 8003bdc:	14f8b589 	.word	0x14f8b589

08003be0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	460b      	mov	r3, r1
 8003bee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7fe ff84 	bl	8002afc <HAL_GetTick>
 8003bf4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	f040 8111 	bne.w	8003e2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2319      	movs	r3, #25
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4988      	ldr	r1, [pc, #544]	; (8003e34 <HAL_I2C_IsDeviceReady+0x254>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fa62 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e104      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_I2C_IsDeviceReady+0x50>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0fd      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d007      	beq.n	8003c56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2224      	movs	r2, #36	; 0x24
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4a70      	ldr	r2, [pc, #448]	; (8003e38 <HAL_I2C_IsDeviceReady+0x258>)
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa20 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb0:	d103      	bne.n	8003cba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0b6      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cbe:	897b      	ldrh	r3, [r7, #10]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ccc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fe ff15 	bl	8002afc <HAL_GetTick>
 8003cd2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d02:	e025      	b.n	8003d50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d04:	f7fe fefa 	bl	8002afc <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <HAL_I2C_IsDeviceReady+0x13a>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	22a0      	movs	r2, #160	; 0xa0
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2ba0      	cmp	r3, #160	; 0xa0
 8003d5a:	d005      	beq.n	8003d68 <HAL_I2C_IsDeviceReady+0x188>
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <HAL_I2C_IsDeviceReady+0x188>
 8003d62:	7dbb      	ldrb	r3, [r7, #22]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0cd      	beq.n	8003d04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d129      	bne.n	8003dd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2319      	movs	r3, #25
 8003daa:	2201      	movs	r2, #1
 8003dac:	4921      	ldr	r1, [pc, #132]	; (8003e34 <HAL_I2C_IsDeviceReady+0x254>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f994 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e036      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e02c      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2319      	movs	r3, #25
 8003df2:	2201      	movs	r2, #1
 8003df4:	490f      	ldr	r1, [pc, #60]	; (8003e34 <HAL_I2C_IsDeviceReady+0x254>)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f970 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e012      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	f4ff af32 	bcc.w	8003c7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e2a:	2302      	movs	r3, #2
  }
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00100002 	.word	0x00100002
 8003e38:	ffff0000 	.word	0xffff0000

08003e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d006      	beq.n	8003e66 <I2C_MasterRequestWrite+0x2a>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d003      	beq.n	8003e66 <I2C_MasterRequestWrite+0x2a>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e64:	d108      	bne.n	8003e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e00b      	b.n	8003e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	2b12      	cmp	r3, #18
 8003e7e:	d107      	bne.n	8003e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f91d 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d103      	bne.n	8003ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e035      	b.n	8003f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ecc:	d108      	bne.n	8003ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003edc:	611a      	str	r2, [r3, #16]
 8003ede:	e01b      	b.n	8003f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ee0:	897b      	ldrh	r3, [r7, #10]
 8003ee2:	11db      	asrs	r3, r3, #7
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0306 	and.w	r3, r3, #6
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f063 030f 	orn	r3, r3, #15
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	490e      	ldr	r1, [pc, #56]	; (8003f38 <I2C_MasterRequestWrite+0xfc>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f943 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e010      	b.n	8003f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4907      	ldr	r1, [pc, #28]	; (8003f3c <I2C_MasterRequestWrite+0x100>)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f933 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	00010008 	.word	0x00010008
 8003f3c:	00010002 	.word	0x00010002

08003f40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d006      	beq.n	8003f7a <I2C_MasterRequestRead+0x3a>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d003      	beq.n	8003f7a <I2C_MasterRequestRead+0x3a>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f78:	d108      	bne.n	8003f8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e00b      	b.n	8003fa4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	2b11      	cmp	r3, #17
 8003f92:	d107      	bne.n	8003fa4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f893 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fca:	d103      	bne.n	8003fd4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e079      	b.n	80040cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe0:	d108      	bne.n	8003ff4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]
 8003ff2:	e05f      	b.n	80040b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff4:	897b      	ldrh	r3, [r7, #10]
 8003ff6:	11db      	asrs	r3, r3, #7
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f003 0306 	and.w	r3, r3, #6
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f063 030f 	orn	r3, r3, #15
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4930      	ldr	r1, [pc, #192]	; (80040d4 <I2C_MasterRequestRead+0x194>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f8b9 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e054      	b.n	80040cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004022:	897b      	ldrh	r3, [r7, #10]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	4929      	ldr	r1, [pc, #164]	; (80040d8 <I2C_MasterRequestRead+0x198>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f8a9 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e044      	b.n	80040cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f831 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d103      	bne.n	8004098 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e017      	b.n	80040cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	11db      	asrs	r3, r3, #7
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f003 0306 	and.w	r3, r3, #6
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f063 030e 	orn	r3, r3, #14
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <I2C_MasterRequestRead+0x198>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f865 	bl	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	00010008 	.word	0x00010008
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	e025      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d021      	beq.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fe fd01 	bl	8002afc <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e023      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10d      	bne.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	43da      	mvns	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4013      	ands	r3, r2
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	e00c      	b.n	800417a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	429a      	cmp	r2, r3
 800417e:	d0b6      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004198:	e051      	b.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a8:	d123      	bne.n	80041f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e046      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d021      	beq.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe fc7f 	bl	8002afc <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d116      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e020      	b.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10c      	bne.n	8004262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e00b      	b.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	43da      	mvns	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4013      	ands	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d18d      	bne.n	800419a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004294:	e02d      	b.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8ce 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02d      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fe fc25 	bl	8002afc <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d1ca      	bne.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004316:	e02d      	b.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f88d 	bl	8004438 <I2C_IsAcknowledgeFailed>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e02d      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d021      	beq.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fe fbe4 	bl	8002afc <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d1ca      	bne.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e042      	b.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d119      	bne.n	80043dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0210 	mvn.w	r2, #16
 80043b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e029      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043dc:	f7fe fb8e 	bl	8002afc <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d302      	bcc.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d116      	bne.n	8004420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e007      	b.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d1b5      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d11b      	bne.n	8004488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0204 	orr.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e272      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8087 	beq.w	80045c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044b4:	4b92      	ldr	r3, [pc, #584]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d00c      	beq.n	80044da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044c0:	4b8f      	ldr	r3, [pc, #572]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d112      	bne.n	80044f2 <HAL_RCC_OscConfig+0x5e>
 80044cc:	4b8c      	ldr	r3, [pc, #560]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d10b      	bne.n	80044f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044da:	4b89      	ldr	r3, [pc, #548]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d06c      	beq.n	80045c0 <HAL_RCC_OscConfig+0x12c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d168      	bne.n	80045c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e24c      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x76>
 80044fc:	4b80      	ldr	r3, [pc, #512]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7f      	ldr	r2, [pc, #508]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e02e      	b.n	8004568 <HAL_RCC_OscConfig+0xd4>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x98>
 8004512:	4b7b      	ldr	r3, [pc, #492]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7a      	ldr	r2, [pc, #488]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b78      	ldr	r3, [pc, #480]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a77      	ldr	r2, [pc, #476]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e01d      	b.n	8004568 <HAL_RCC_OscConfig+0xd4>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0xbc>
 8004536:	4b72      	ldr	r3, [pc, #456]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a71      	ldr	r2, [pc, #452]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0xd4>
 8004550:	4b6b      	ldr	r3, [pc, #428]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a6a      	ldr	r2, [pc, #424]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b68      	ldr	r3, [pc, #416]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a67      	ldr	r2, [pc, #412]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004566:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d013      	beq.n	8004598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe fac4 	bl	8002afc <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fe fac0 	bl	8002afc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e200      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b5d      	ldr	r3, [pc, #372]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0xe4>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7fe fab0 	bl	8002afc <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fe faac 	bl	8002afc <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1ec      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	4b53      	ldr	r3, [pc, #332]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x10c>
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d063      	beq.n	8004696 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ce:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045da:	4b49      	ldr	r3, [pc, #292]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d11c      	bne.n	8004620 <HAL_RCC_OscConfig+0x18c>
 80045e6:	4b46      	ldr	r3, [pc, #280]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d116      	bne.n	8004620 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	4b43      	ldr	r3, [pc, #268]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_RCC_OscConfig+0x176>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d001      	beq.n	800460a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e1c0      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460a:	4b3d      	ldr	r3, [pc, #244]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4939      	ldr	r1, [pc, #228]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	e03a      	b.n	8004696 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d020      	beq.n	800466a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fe fa65 	bl	8002afc <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004636:	f7fe fa61 	bl	8002afc <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e1a1      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004648:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4b2a      	ldr	r3, [pc, #168]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4927      	ldr	r1, [pc, #156]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
 8004668:	e015      	b.n	8004696 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466a:	4b26      	ldr	r3, [pc, #152]	; (8004704 <HAL_RCC_OscConfig+0x270>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fe fa44 	bl	8002afc <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fe fa40 	bl	8002afc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e180      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d03a      	beq.n	8004718 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d019      	beq.n	80046de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046aa:	4b17      	ldr	r3, [pc, #92]	; (8004708 <HAL_RCC_OscConfig+0x274>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fe fa24 	bl	8002afc <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b8:	f7fe fa20 	bl	8002afc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e160      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046d6:	2001      	movs	r0, #1
 80046d8:	f000 fad8 	bl	8004c8c <RCC_Delay>
 80046dc:	e01c      	b.n	8004718 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_OscConfig+0x274>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e4:	f7fe fa0a 	bl	8002afc <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ea:	e00f      	b.n	800470c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fe fa06 	bl	8002afc <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d908      	bls.n	800470c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e146      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	42420000 	.word	0x42420000
 8004708:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	4b92      	ldr	r3, [pc, #584]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e9      	bne.n	80046ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80a6 	beq.w	8004872 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b8b      	ldr	r3, [pc, #556]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	4b88      	ldr	r3, [pc, #544]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4a87      	ldr	r2, [pc, #540]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	61d3      	str	r3, [r2, #28]
 8004742:	4b85      	ldr	r3, [pc, #532]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474e:	2301      	movs	r3, #1
 8004750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	4b82      	ldr	r3, [pc, #520]	; (800495c <HAL_RCC_OscConfig+0x4c8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d118      	bne.n	8004790 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475e:	4b7f      	ldr	r3, [pc, #508]	; (800495c <HAL_RCC_OscConfig+0x4c8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a7e      	ldr	r2, [pc, #504]	; (800495c <HAL_RCC_OscConfig+0x4c8>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476a:	f7fe f9c7 	bl	8002afc <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004770:	e008      	b.n	8004784 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004772:	f7fe f9c3 	bl	8002afc <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b64      	cmp	r3, #100	; 0x64
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e103      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004784:	4b75      	ldr	r3, [pc, #468]	; (800495c <HAL_RCC_OscConfig+0x4c8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d106      	bne.n	80047a6 <HAL_RCC_OscConfig+0x312>
 8004798:	4b6f      	ldr	r3, [pc, #444]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4a6e      	ldr	r2, [pc, #440]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6213      	str	r3, [r2, #32]
 80047a4:	e02d      	b.n	8004802 <HAL_RCC_OscConfig+0x36e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCC_OscConfig+0x334>
 80047ae:	4b6a      	ldr	r3, [pc, #424]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a69      	ldr	r2, [pc, #420]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6213      	str	r3, [r2, #32]
 80047ba:	4b67      	ldr	r3, [pc, #412]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a66      	ldr	r2, [pc, #408]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	6213      	str	r3, [r2, #32]
 80047c6:	e01c      	b.n	8004802 <HAL_RCC_OscConfig+0x36e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d10c      	bne.n	80047ea <HAL_RCC_OscConfig+0x356>
 80047d0:	4b61      	ldr	r3, [pc, #388]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4a60      	ldr	r2, [pc, #384]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	f043 0304 	orr.w	r3, r3, #4
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	4b5e      	ldr	r3, [pc, #376]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4a5d      	ldr	r2, [pc, #372]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6213      	str	r3, [r2, #32]
 80047e8:	e00b      	b.n	8004802 <HAL_RCC_OscConfig+0x36e>
 80047ea:	4b5b      	ldr	r3, [pc, #364]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	4a5a      	ldr	r2, [pc, #360]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	6213      	str	r3, [r2, #32]
 80047f6:	4b58      	ldr	r3, [pc, #352]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4a57      	ldr	r2, [pc, #348]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	f023 0304 	bic.w	r3, r3, #4
 8004800:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d015      	beq.n	8004836 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fe f977 	bl	8002afc <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fe f973 	bl	8002afc <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0b1      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	4b4b      	ldr	r3, [pc, #300]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ee      	beq.n	8004812 <HAL_RCC_OscConfig+0x37e>
 8004834:	e014      	b.n	8004860 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004836:	f7fe f961 	bl	8002afc <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fe f95d 	bl	8002afc <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e09b      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004854:	4b40      	ldr	r3, [pc, #256]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ee      	bne.n	800483e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004866:	4b3c      	ldr	r3, [pc, #240]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8087 	beq.w	800498a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800487c:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d061      	beq.n	800494c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d146      	bne.n	800491e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004890:	4b33      	ldr	r3, [pc, #204]	; (8004960 <HAL_RCC_OscConfig+0x4cc>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7fe f931 	bl	8002afc <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489e:	f7fe f92d 	bl	8002afc <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e06d      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b0:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d108      	bne.n	80048d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	4921      	ldr	r1, [pc, #132]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d8:	4b1f      	ldr	r3, [pc, #124]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a19      	ldr	r1, [r3, #32]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	430b      	orrs	r3, r1
 80048ea:	491b      	ldr	r1, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x4cc>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fe f901 	bl	8002afc <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048fe:	f7fe f8fd 	bl	8002afc <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e03d      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x46a>
 800491c:	e035      	b.n	800498a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <HAL_RCC_OscConfig+0x4cc>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fe f8ea 	bl	8002afc <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fe f8e6 	bl	8002afc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e026      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_RCC_OscConfig+0x4c4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x498>
 800494a:	e01e      	b.n	800498a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d107      	bne.n	8004964 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e019      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
 8004958:	40021000 	.word	0x40021000
 800495c:	40007000 	.word	0x40007000
 8004960:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_OscConfig+0x500>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	429a      	cmp	r2, r3
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000

08004998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0d0      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b6a      	ldr	r3, [pc, #424]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d910      	bls.n	80049dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b67      	ldr	r3, [pc, #412]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 0207 	bic.w	r2, r3, #7
 80049c2:	4965      	ldr	r1, [pc, #404]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b63      	ldr	r3, [pc, #396]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0b8      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a58      	ldr	r2, [pc, #352]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4a52      	ldr	r2, [pc, #328]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b50      	ldr	r3, [pc, #320]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	494d      	ldr	r1, [pc, #308]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d040      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d115      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e07f      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e073      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06b      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4936      	ldr	r1, [pc, #216]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a88:	f7fe f838 	bl	8002afc <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fe f834 	bl	8002afc <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e053      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 020c 	and.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1eb      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d210      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 0207 	bic.w	r2, r3, #7
 8004ace:	4922      	ldr	r1, [pc, #136]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad6:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d001      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e032      	b.n	8004b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4916      	ldr	r1, [pc, #88]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	490e      	ldr	r1, [pc, #56]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b26:	f000 f821 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	490a      	ldr	r1, [pc, #40]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	5ccb      	ldrb	r3, [r1, r3]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <HAL_RCC_ClockConfig+0x1cc>)
 8004b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCC_ClockConfig+0x1d0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fd ff96 	bl	8002a78 <HAL_InitTick>

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40022000 	.word	0x40022000
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800a8f8 	.word	0x0800a8f8
 8004b64:	20000020 	.word	0x20000020
 8004b68:	20000024 	.word	0x20000024

08004b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	b490      	push	{r4, r7}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b72:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <HAL_RCC_GetSysClockFreq+0xac>)
 8004b74:	1d3c      	adds	r4, r7, #4
 8004b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b7c:	f240 2301 	movw	r3, #513	; 0x201
 8004b80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b96:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d002      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x40>
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d003      	beq.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x46>
 8004baa:	e02b      	b.n	8004c04 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bac:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bae:	623b      	str	r3, [r7, #32]
      break;
 8004bb0:	e02b      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	0c9b      	lsrs	r3, r3, #18
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	3328      	adds	r3, #40	; 0x28
 8004bbc:	443b      	add	r3, r7
 8004bbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bc2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bce:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	0c5b      	lsrs	r3, r3, #17
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	3328      	adds	r3, #40	; 0x28
 8004bda:	443b      	add	r3, r7
 8004bdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004be0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004be6:	fb03 f202 	mul.w	r2, r3, r2
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf2:	e004      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	623b      	str	r3, [r7, #32]
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c06:	623b      	str	r3, [r7, #32]
      break;
 8004c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3728      	adds	r7, #40	; 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc90      	pop	{r4, r7}
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	08009580 	.word	0x08009580
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	007a1200 	.word	0x007a1200
 8004c24:	003d0900 	.word	0x003d0900

08004c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c2c:	4b02      	ldr	r3, [pc, #8]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr
 8004c38:	20000020 	.word	0x20000020

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c40:	f7ff fff2 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800a908 	.word	0x0800a908

08004c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c68:	f7ff ffde 	bl	8004c28 <HAL_RCC_GetHCLKFreq>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0adb      	lsrs	r3, r3, #11
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	4903      	ldr	r1, [pc, #12]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7a:	5ccb      	ldrb	r3, [r1, r3]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	0800a908 	.word	0x0800a908

08004c8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c94:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <RCC_Delay+0x34>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <RCC_Delay+0x38>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	0a5b      	lsrs	r3, r3, #9
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ca8:	bf00      	nop
  }
  while (Delay --);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1e5a      	subs	r2, r3, #1
 8004cae:	60fa      	str	r2, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f9      	bne.n	8004ca8 <RCC_Delay+0x1c>
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr
 8004cc0:	20000020 	.word	0x20000020
 8004cc4:	10624dd3 	.word	0x10624dd3

08004cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e041      	b.n	8004d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd fd10 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 f93c 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d001      	beq.n	8004d80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e032      	b.n	8004de6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_TIM_Base_Start+0x88>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_TIM_Base_Start+0x48>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9a:	d009      	beq.n	8004db0 <HAL_TIM_Base_Start+0x48>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a14      	ldr	r2, [pc, #80]	; (8004df4 <HAL_TIM_Base_Start+0x8c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_TIM_Base_Start+0x48>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <HAL_TIM_Base_Start+0x90>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d111      	bne.n	8004dd4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d010      	beq.n	8004de4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd2:	e007      	b.n	8004de4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800

08004dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIM_ConfigClockSource+0x18>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0b3      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x180>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4c:	d03e      	beq.n	8004ecc <HAL_TIM_ConfigClockSource+0xd0>
 8004e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e52:	f200 8087 	bhi.w	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	f000 8085 	beq.w	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e62:	d87f      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e64:	2b70      	cmp	r3, #112	; 0x70
 8004e66:	d01a      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0xa2>
 8004e68:	2b70      	cmp	r3, #112	; 0x70
 8004e6a:	d87b      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e6c:	2b60      	cmp	r3, #96	; 0x60
 8004e6e:	d050      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0x116>
 8004e70:	2b60      	cmp	r3, #96	; 0x60
 8004e72:	d877      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e74:	2b50      	cmp	r3, #80	; 0x50
 8004e76:	d03c      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0xf6>
 8004e78:	2b50      	cmp	r3, #80	; 0x50
 8004e7a:	d873      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e7c:	2b40      	cmp	r3, #64	; 0x40
 8004e7e:	d058      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0x136>
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d86f      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e84:	2b30      	cmp	r3, #48	; 0x30
 8004e86:	d064      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x156>
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	d86b      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d060      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x156>
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d867      	bhi.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05c      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x156>
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d05a      	beq.n	8004f52 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e9c:	e062      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6899      	ldr	r1, [r3, #8]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f000 f942 	bl	8005136 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ec0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	609a      	str	r2, [r3, #8]
      break;
 8004eca:	e04e      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6899      	ldr	r1, [r3, #8]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f000 f92b 	bl	8005136 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eee:	609a      	str	r2, [r3, #8]
      break;
 8004ef0:	e03b      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6859      	ldr	r1, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f000 f8a2 	bl	8005048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2150      	movs	r1, #80	; 0x50
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f8f9 	bl	8005102 <TIM_ITRx_SetConfig>
      break;
 8004f10:	e02b      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6859      	ldr	r1, [r3, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f000 f8c0 	bl	80050a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2160      	movs	r1, #96	; 0x60
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f8e9 	bl	8005102 <TIM_ITRx_SetConfig>
      break;
 8004f30:	e01b      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f000 f882 	bl	8005048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2140      	movs	r1, #64	; 0x40
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f8d9 	bl	8005102 <TIM_ITRx_SetConfig>
      break;
 8004f50:	e00b      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	f000 f8d0 	bl	8005102 <TIM_ITRx_SetConfig>
        break;
 8004f62:	e002      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f64:	bf00      	nop
 8004f66:	e000      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a29      	ldr	r2, [pc, #164]	; (800503c <TIM_Base_SetConfig+0xb8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x30>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x30>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a26      	ldr	r2, [pc, #152]	; (8005040 <TIM_Base_SetConfig+0xbc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x30>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a25      	ldr	r2, [pc, #148]	; (8005044 <TIM_Base_SetConfig+0xc0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	; (800503c <TIM_Base_SetConfig+0xb8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a19      	ldr	r2, [pc, #100]	; (8005040 <TIM_Base_SetConfig+0xbc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a18      	ldr	r2, [pc, #96]	; (8005044 <TIM_Base_SetConfig+0xc0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d108      	bne.n	8004ff8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a07      	ldr	r2, [pc, #28]	; (800503c <TIM_Base_SetConfig+0xb8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d103      	bne.n	800502c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	615a      	str	r2, [r3, #20]
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800

08005048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 030a 	bic.w	r3, r3, #10
 8005084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0210 	bic.w	r2, r3, #16
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	031b      	lsls	r3, r3, #12
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	621a      	str	r2, [r3, #32]
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr

08005102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	f043 0307 	orr.w	r3, r3, #7
 8005124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005136:	b480      	push	{r7}
 8005138:	b087      	sub	sp, #28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005150:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	021a      	lsls	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	431a      	orrs	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4313      	orrs	r3, r2
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	609a      	str	r2, [r3, #8]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005188:	2302      	movs	r3, #2
 800518a:	e046      	b.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a16      	ldr	r2, [pc, #88]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d8:	d009      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a10      	ldr	r2, [pc, #64]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10c      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800

08005230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e03f      	b.n	80052c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fd fa7a 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2224      	movs	r2, #36	; 0x24
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fc85 	bl	8005b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b08a      	sub	sp, #40	; 0x28
 80052ce:	af02      	add	r7, sp, #8
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	603b      	str	r3, [r7, #0]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d17c      	bne.n	80053e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <HAL_UART_Transmit+0x2c>
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e075      	b.n	80053e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_UART_Transmit+0x3e>
 8005304:	2302      	movs	r3, #2
 8005306:	e06e      	b.n	80053e6 <HAL_UART_Transmit+0x11c>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2221      	movs	r2, #33	; 0x21
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531e:	f7fd fbed 	bl	8002afc <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	88fa      	ldrh	r2, [r7, #6]
 8005328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x82>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800535c:	e02a      	b.n	80053b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2200      	movs	r2, #0
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fa38 	bl	80057de <UART_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e036      	b.n	80053e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800538c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3302      	adds	r3, #2
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e007      	b.n	80053a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1cf      	bne.n	800535e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2140      	movs	r1, #64	; 0x40
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fa08 	bl	80057de <UART_WaitOnFlagUntilTimeout>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e006      	b.n	80053e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e000      	b.n	80053e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053e4:	2302      	movs	r3, #2
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b20      	cmp	r3, #32
 8005406:	d11d      	bne.n	8005444 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_UART_Receive_IT+0x26>
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e016      	b.n	8005446 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_UART_Receive_IT+0x38>
 8005422:	2302      	movs	r3, #2
 8005424:	e00f      	b.n	8005446 <HAL_UART_Receive_IT+0x58>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	461a      	mov	r2, r3
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fa19 	bl	8005872 <UART_Start_Receive_IT>
 8005440:	4603      	mov	r3, r0
 8005442:	e000      	b.n	8005446 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
  }
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b08a      	sub	sp, #40	; 0x28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_UART_IRQHandler+0x52>
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fac9 	bl	8005a32 <UART_Receive_IT>
      return;
 80054a0:	e17b      	b.n	800579a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80b1 	beq.w	800560c <HAL_UART_IRQHandler+0x1bc>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <HAL_UART_IRQHandler+0x70>
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80a6 	beq.w	800560c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_UART_IRQHandler+0x90>
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_UART_IRQHandler+0xb0>
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f043 0202 	orr.w	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_UART_IRQHandler+0xd0>
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	f043 0204 	orr.w	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00f      	beq.n	800554a <HAL_UART_IRQHandler+0xfa>
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_UART_IRQHandler+0xee>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f043 0208 	orr.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 811e 	beq.w	8005790 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_UART_IRQHandler+0x11e>
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa62 	bl	8005a32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <HAL_UART_IRQHandler+0x146>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d031      	beq.n	80055fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9a4 	bl	80058e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d023      	beq.n	80055f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4a76      	ldr	r2, [pc, #472]	; (80057a0 <HAL_UART_IRQHandler+0x350>)
 80055c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd fc0a 	bl	8002de8 <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00e      	b.n	8005608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8e3 	bl	80057b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e00a      	b.n	8005608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8df 	bl	80057b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	e006      	b.n	8005608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8db 	bl	80057b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005606:	e0c3      	b.n	8005790 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	bf00      	nop
    return;
 800560a:	e0c1      	b.n	8005790 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 80a1 	bne.w	8005758 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 809b 	beq.w	8005758 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8095 	beq.w	8005758 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04e      	beq.n	80056f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800565c:	8a3b      	ldrh	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8098 	beq.w	8005794 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005668:	8a3a      	ldrh	r2, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	f080 8092 	bcs.w	8005794 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8a3a      	ldrh	r2, [r7, #16]
 8005674:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b20      	cmp	r3, #32
 800567e:	d02b      	beq.n	80056d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800568e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695a      	ldr	r2, [r3, #20]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0210 	bic.w	r2, r2, #16
 80056cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fd fb4d 	bl	8002d72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f86d 	bl	80057c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056ee:	e051      	b.n	8005794 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d047      	beq.n	8005798 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005708:	8a7b      	ldrh	r3, [r7, #18]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d044      	beq.n	8005798 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800571c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0201 	bic.w	r2, r2, #1
 800572c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0210 	bic.w	r2, r2, #16
 800574a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800574c:	8a7b      	ldrh	r3, [r7, #18]
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f839 	bl	80057c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005756:	e01f      	b.n	8005798 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_UART_IRQHandler+0x324>
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8f9 	bl	8005964 <UART_Transmit_IT>
    return;
 8005772:	e012      	b.n	800579a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <HAL_UART_IRQHandler+0x34a>
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f93a 	bl	8005a02 <UART_EndTransmit_IT>
    return;
 800578e:	e004      	b.n	800579a <HAL_UART_IRQHandler+0x34a>
    return;
 8005790:	bf00      	nop
 8005792:	e002      	b.n	800579a <HAL_UART_IRQHandler+0x34a>
      return;
 8005794:	bf00      	nop
 8005796:	e000      	b.n	800579a <HAL_UART_IRQHandler+0x34a>
      return;
 8005798:	bf00      	nop
  }
}
 800579a:	3728      	adds	r7, #40	; 0x28
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	0800593d 	.word	0x0800593d

080057a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr

080057b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ee:	e02c      	b.n	800584a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d028      	beq.n	800584a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <UART_WaitOnFlagUntilTimeout+0x30>
 80057fe:	f7fd f97d 	bl	8002afc <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	429a      	cmp	r2, r3
 800580c:	d21d      	bcs.n	800584a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800581c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0201 	bic.w	r2, r2, #1
 800582c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e00f      	b.n	800586a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4013      	ands	r3, r2
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	429a      	cmp	r2, r3
 8005866:	d0c3      	beq.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	4613      	mov	r3, r2
 800587e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	88fa      	ldrh	r2, [r7, #6]
 800588a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2222      	movs	r2, #34	; 0x22
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0220 	orr.w	r2, r2, #32
 80058d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	2b01      	cmp	r3, #1
 8005912:	d107      	bne.n	8005924 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0210 	bic.w	r2, r2, #16
 8005922:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff ff2d 	bl	80057b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b21      	cmp	r3, #33	; 0x21
 8005976:	d13e      	bne.n	80059f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005980:	d114      	bne.n	80059ac <UART_Transmit_IT+0x48>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d110      	bne.n	80059ac <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800599e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	1c9a      	adds	r2, r3, #2
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]
 80059aa:	e008      	b.n	80059be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	1c59      	adds	r1, r3, #1
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6211      	str	r1, [r2, #32]
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4619      	mov	r1, r3
 80059cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff febe 	bl	80057a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b22      	cmp	r3, #34	; 0x22
 8005a44:	f040 8099 	bne.w	8005b7a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a50:	d117      	bne.n	8005a82 <UART_Receive_IT+0x50>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d113      	bne.n	8005a82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a80:	e026      	b.n	8005ad0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a94:	d007      	beq.n	8005aa6 <UART_Receive_IT+0x74>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <UART_Receive_IT+0x82>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	e008      	b.n	8005ac6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4619      	mov	r1, r3
 8005ade:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d148      	bne.n	8005b76 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0220 	bic.w	r2, r2, #32
 8005af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d123      	bne.n	8005b6c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0210 	bic.w	r2, r2, #16
 8005b38:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d10a      	bne.n	8005b5e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fe2f 	bl	80057c8 <HAL_UARTEx_RxEventCallback>
 8005b6a:	e002      	b.n	8005b72 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fb ff73 	bl	8001a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e002      	b.n	8005b7c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bbe:	f023 030c 	bic.w	r3, r3, #12
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <UART_SetConfig+0x114>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d103      	bne.n	8005bf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7ff f83a 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	e002      	b.n	8005bfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7ff f822 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 8005bf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009a      	lsls	r2, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <UART_SetConfig+0x118>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	0119      	lsls	r1, r3, #4
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009a      	lsls	r2, r3, #2
 8005c24:	441a      	add	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c30:	4b1a      	ldr	r3, [pc, #104]	; (8005c9c <UART_SetConfig+0x118>)
 8005c32:	fba3 0302 	umull	r0, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2064      	movs	r0, #100	; 0x64
 8005c3a:	fb00 f303 	mul.w	r3, r0, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	3332      	adds	r3, #50	; 0x32
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <UART_SetConfig+0x118>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c50:	4419      	add	r1, r3
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009a      	lsls	r2, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <UART_SetConfig+0x118>)
 8005c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2064      	movs	r0, #100	; 0x64
 8005c72:	fb00 f303 	mul.w	r3, r0, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	3332      	adds	r3, #50	; 0x32
 8005c7c:	4a07      	ldr	r2, [pc, #28]	; (8005c9c <UART_SetConfig+0x118>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f003 020f 	and.w	r2, r3, #15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	51eb851f 	.word	0x51eb851f

08005ca0 <calloc>:
 8005ca0:	4b02      	ldr	r3, [pc, #8]	; (8005cac <calloc+0xc>)
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	f000 b83c 	b.w	8005d24 <_calloc_r>
 8005cac:	2000002c 	.word	0x2000002c

08005cb0 <__errno>:
 8005cb0:	4b01      	ldr	r3, [pc, #4]	; (8005cb8 <__errno+0x8>)
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	2000002c 	.word	0x2000002c

08005cbc <__libc_init_array>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	2600      	movs	r6, #0
 8005cc0:	4d0c      	ldr	r5, [pc, #48]	; (8005cf4 <__libc_init_array+0x38>)
 8005cc2:	4c0d      	ldr	r4, [pc, #52]	; (8005cf8 <__libc_init_array+0x3c>)
 8005cc4:	1b64      	subs	r4, r4, r5
 8005cc6:	10a4      	asrs	r4, r4, #2
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	d109      	bne.n	8005ce0 <__libc_init_array+0x24>
 8005ccc:	f003 fbe8 	bl	80094a0 <_init>
 8005cd0:	2600      	movs	r6, #0
 8005cd2:	4d0a      	ldr	r5, [pc, #40]	; (8005cfc <__libc_init_array+0x40>)
 8005cd4:	4c0a      	ldr	r4, [pc, #40]	; (8005d00 <__libc_init_array+0x44>)
 8005cd6:	1b64      	subs	r4, r4, r5
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d105      	bne.n	8005cea <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce4:	4798      	blx	r3
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__libc_init_array+0xc>
 8005cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cee:	4798      	blx	r3
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7f2      	b.n	8005cda <__libc_init_array+0x1e>
 8005cf4:	0800ad08 	.word	0x0800ad08
 8005cf8:	0800ad08 	.word	0x0800ad08
 8005cfc:	0800ad08 	.word	0x0800ad08
 8005d00:	0800ad0c 	.word	0x0800ad0c

08005d04 <malloc>:
 8005d04:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <malloc+0xc>)
 8005d06:	4601      	mov	r1, r0
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f000 b887 	b.w	8005e1c <_malloc_r>
 8005d0e:	bf00      	nop
 8005d10:	2000002c 	.word	0x2000002c

08005d14 <memset>:
 8005d14:	4603      	mov	r3, r0
 8005d16:	4402      	add	r2, r0
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <memset+0xa>
 8005d1c:	4770      	bx	lr
 8005d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d22:	e7f9      	b.n	8005d18 <memset+0x4>

08005d24 <_calloc_r>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	fba1 5402 	umull	r5, r4, r1, r2
 8005d2a:	b934      	cbnz	r4, 8005d3a <_calloc_r+0x16>
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f000 f875 	bl	8005e1c <_malloc_r>
 8005d32:	4606      	mov	r6, r0
 8005d34:	b928      	cbnz	r0, 8005d42 <_calloc_r+0x1e>
 8005d36:	4630      	mov	r0, r6
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	220c      	movs	r2, #12
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	6002      	str	r2, [r0, #0]
 8005d40:	e7f9      	b.n	8005d36 <_calloc_r+0x12>
 8005d42:	462a      	mov	r2, r5
 8005d44:	4621      	mov	r1, r4
 8005d46:	f7ff ffe5 	bl	8005d14 <memset>
 8005d4a:	e7f4      	b.n	8005d36 <_calloc_r+0x12>

08005d4c <_free_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4605      	mov	r5, r0
 8005d50:	2900      	cmp	r1, #0
 8005d52:	d040      	beq.n	8005dd6 <_free_r+0x8a>
 8005d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d58:	1f0c      	subs	r4, r1, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bfb8      	it	lt
 8005d5e:	18e4      	addlt	r4, r4, r3
 8005d60:	f001 fdd0 	bl	8007904 <__malloc_lock>
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <_free_r+0x8c>)
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	b933      	cbnz	r3, 8005d78 <_free_r+0x2c>
 8005d6a:	6063      	str	r3, [r4, #4]
 8005d6c:	6014      	str	r4, [r2, #0]
 8005d6e:	4628      	mov	r0, r5
 8005d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d74:	f001 bdcc 	b.w	8007910 <__malloc_unlock>
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	d908      	bls.n	8005d8e <_free_r+0x42>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	1821      	adds	r1, r4, r0
 8005d80:	428b      	cmp	r3, r1
 8005d82:	bf01      	itttt	eq
 8005d84:	6819      	ldreq	r1, [r3, #0]
 8005d86:	685b      	ldreq	r3, [r3, #4]
 8005d88:	1809      	addeq	r1, r1, r0
 8005d8a:	6021      	streq	r1, [r4, #0]
 8005d8c:	e7ed      	b.n	8005d6a <_free_r+0x1e>
 8005d8e:	461a      	mov	r2, r3
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	b10b      	cbz	r3, 8005d98 <_free_r+0x4c>
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d9fa      	bls.n	8005d8e <_free_r+0x42>
 8005d98:	6811      	ldr	r1, [r2, #0]
 8005d9a:	1850      	adds	r0, r2, r1
 8005d9c:	42a0      	cmp	r0, r4
 8005d9e:	d10b      	bne.n	8005db8 <_free_r+0x6c>
 8005da0:	6820      	ldr	r0, [r4, #0]
 8005da2:	4401      	add	r1, r0
 8005da4:	1850      	adds	r0, r2, r1
 8005da6:	4283      	cmp	r3, r0
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	d1e0      	bne.n	8005d6e <_free_r+0x22>
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4401      	add	r1, r0
 8005db2:	6011      	str	r1, [r2, #0]
 8005db4:	6053      	str	r3, [r2, #4]
 8005db6:	e7da      	b.n	8005d6e <_free_r+0x22>
 8005db8:	d902      	bls.n	8005dc0 <_free_r+0x74>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	602b      	str	r3, [r5, #0]
 8005dbe:	e7d6      	b.n	8005d6e <_free_r+0x22>
 8005dc0:	6820      	ldr	r0, [r4, #0]
 8005dc2:	1821      	adds	r1, r4, r0
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	bf01      	itttt	eq
 8005dc8:	6819      	ldreq	r1, [r3, #0]
 8005dca:	685b      	ldreq	r3, [r3, #4]
 8005dcc:	1809      	addeq	r1, r1, r0
 8005dce:	6021      	streq	r1, [r4, #0]
 8005dd0:	6063      	str	r3, [r4, #4]
 8005dd2:	6054      	str	r4, [r2, #4]
 8005dd4:	e7cb      	b.n	8005d6e <_free_r+0x22>
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	2000078c 	.word	0x2000078c

08005ddc <sbrk_aligned>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	4e0e      	ldr	r6, [pc, #56]	; (8005e18 <sbrk_aligned+0x3c>)
 8005de0:	460c      	mov	r4, r1
 8005de2:	6831      	ldr	r1, [r6, #0]
 8005de4:	4605      	mov	r5, r0
 8005de6:	b911      	cbnz	r1, 8005dee <sbrk_aligned+0x12>
 8005de8:	f000 fd04 	bl	80067f4 <_sbrk_r>
 8005dec:	6030      	str	r0, [r6, #0]
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 fcff 	bl	80067f4 <_sbrk_r>
 8005df6:	1c43      	adds	r3, r0, #1
 8005df8:	d00a      	beq.n	8005e10 <sbrk_aligned+0x34>
 8005dfa:	1cc4      	adds	r4, r0, #3
 8005dfc:	f024 0403 	bic.w	r4, r4, #3
 8005e00:	42a0      	cmp	r0, r4
 8005e02:	d007      	beq.n	8005e14 <sbrk_aligned+0x38>
 8005e04:	1a21      	subs	r1, r4, r0
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 fcf4 	bl	80067f4 <_sbrk_r>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d101      	bne.n	8005e14 <sbrk_aligned+0x38>
 8005e10:	f04f 34ff 	mov.w	r4, #4294967295
 8005e14:	4620      	mov	r0, r4
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	20000790 	.word	0x20000790

08005e1c <_malloc_r>:
 8005e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e20:	1ccd      	adds	r5, r1, #3
 8005e22:	f025 0503 	bic.w	r5, r5, #3
 8005e26:	3508      	adds	r5, #8
 8005e28:	2d0c      	cmp	r5, #12
 8005e2a:	bf38      	it	cc
 8005e2c:	250c      	movcc	r5, #12
 8005e2e:	2d00      	cmp	r5, #0
 8005e30:	4607      	mov	r7, r0
 8005e32:	db01      	blt.n	8005e38 <_malloc_r+0x1c>
 8005e34:	42a9      	cmp	r1, r5
 8005e36:	d905      	bls.n	8005e44 <_malloc_r+0x28>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4630      	mov	r0, r6
 8005e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e44:	4e2e      	ldr	r6, [pc, #184]	; (8005f00 <_malloc_r+0xe4>)
 8005e46:	f001 fd5d 	bl	8007904 <__malloc_lock>
 8005e4a:	6833      	ldr	r3, [r6, #0]
 8005e4c:	461c      	mov	r4, r3
 8005e4e:	bb34      	cbnz	r4, 8005e9e <_malloc_r+0x82>
 8005e50:	4629      	mov	r1, r5
 8005e52:	4638      	mov	r0, r7
 8005e54:	f7ff ffc2 	bl	8005ddc <sbrk_aligned>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	d14d      	bne.n	8005efa <_malloc_r+0xde>
 8005e5e:	6834      	ldr	r4, [r6, #0]
 8005e60:	4626      	mov	r6, r4
 8005e62:	2e00      	cmp	r6, #0
 8005e64:	d140      	bne.n	8005ee8 <_malloc_r+0xcc>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	eb04 0803 	add.w	r8, r4, r3
 8005e70:	f000 fcc0 	bl	80067f4 <_sbrk_r>
 8005e74:	4580      	cmp	r8, r0
 8005e76:	d13a      	bne.n	8005eee <_malloc_r+0xd2>
 8005e78:	6821      	ldr	r1, [r4, #0]
 8005e7a:	3503      	adds	r5, #3
 8005e7c:	1a6d      	subs	r5, r5, r1
 8005e7e:	f025 0503 	bic.w	r5, r5, #3
 8005e82:	3508      	adds	r5, #8
 8005e84:	2d0c      	cmp	r5, #12
 8005e86:	bf38      	it	cc
 8005e88:	250c      	movcc	r5, #12
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	f7ff ffa5 	bl	8005ddc <sbrk_aligned>
 8005e92:	3001      	adds	r0, #1
 8005e94:	d02b      	beq.n	8005eee <_malloc_r+0xd2>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	442b      	add	r3, r5
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	e00e      	b.n	8005ebc <_malloc_r+0xa0>
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	1b52      	subs	r2, r2, r5
 8005ea2:	d41e      	bmi.n	8005ee2 <_malloc_r+0xc6>
 8005ea4:	2a0b      	cmp	r2, #11
 8005ea6:	d916      	bls.n	8005ed6 <_malloc_r+0xba>
 8005ea8:	1961      	adds	r1, r4, r5
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	6025      	str	r5, [r4, #0]
 8005eae:	bf18      	it	ne
 8005eb0:	6059      	strne	r1, [r3, #4]
 8005eb2:	6863      	ldr	r3, [r4, #4]
 8005eb4:	bf08      	it	eq
 8005eb6:	6031      	streq	r1, [r6, #0]
 8005eb8:	5162      	str	r2, [r4, r5]
 8005eba:	604b      	str	r3, [r1, #4]
 8005ebc:	4638      	mov	r0, r7
 8005ebe:	f104 060b 	add.w	r6, r4, #11
 8005ec2:	f001 fd25 	bl	8007910 <__malloc_unlock>
 8005ec6:	f026 0607 	bic.w	r6, r6, #7
 8005eca:	1d23      	adds	r3, r4, #4
 8005ecc:	1af2      	subs	r2, r6, r3
 8005ece:	d0b6      	beq.n	8005e3e <_malloc_r+0x22>
 8005ed0:	1b9b      	subs	r3, r3, r6
 8005ed2:	50a3      	str	r3, [r4, r2]
 8005ed4:	e7b3      	b.n	8005e3e <_malloc_r+0x22>
 8005ed6:	6862      	ldr	r2, [r4, #4]
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	bf0c      	ite	eq
 8005edc:	6032      	streq	r2, [r6, #0]
 8005ede:	605a      	strne	r2, [r3, #4]
 8005ee0:	e7ec      	b.n	8005ebc <_malloc_r+0xa0>
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	6864      	ldr	r4, [r4, #4]
 8005ee6:	e7b2      	b.n	8005e4e <_malloc_r+0x32>
 8005ee8:	4634      	mov	r4, r6
 8005eea:	6876      	ldr	r6, [r6, #4]
 8005eec:	e7b9      	b.n	8005e62 <_malloc_r+0x46>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	f001 fd0c 	bl	8007910 <__malloc_unlock>
 8005ef8:	e7a1      	b.n	8005e3e <_malloc_r+0x22>
 8005efa:	6025      	str	r5, [r4, #0]
 8005efc:	e7de      	b.n	8005ebc <_malloc_r+0xa0>
 8005efe:	bf00      	nop
 8005f00:	2000078c 	.word	0x2000078c

08005f04 <__cvt>:
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	bfbb      	ittet	lt
 8005f0e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f12:	461f      	movlt	r7, r3
 8005f14:	2300      	movge	r3, #0
 8005f16:	232d      	movlt	r3, #45	; 0x2d
 8005f18:	b088      	sub	sp, #32
 8005f1a:	4614      	mov	r4, r2
 8005f1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005f20:	7013      	strb	r3, [r2, #0]
 8005f22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f24:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005f28:	f023 0820 	bic.w	r8, r3, #32
 8005f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f30:	d005      	beq.n	8005f3e <__cvt+0x3a>
 8005f32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f36:	d100      	bne.n	8005f3a <__cvt+0x36>
 8005f38:	3501      	adds	r5, #1
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e000      	b.n	8005f40 <__cvt+0x3c>
 8005f3e:	2303      	movs	r3, #3
 8005f40:	aa07      	add	r2, sp, #28
 8005f42:	9204      	str	r2, [sp, #16]
 8005f44:	aa06      	add	r2, sp, #24
 8005f46:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005f4a:	e9cd 3500 	strd	r3, r5, [sp]
 8005f4e:	4622      	mov	r2, r4
 8005f50:	463b      	mov	r3, r7
 8005f52:	f000 fdbd 	bl	8006ad0 <_dtoa_r>
 8005f56:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	d102      	bne.n	8005f64 <__cvt+0x60>
 8005f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f60:	07db      	lsls	r3, r3, #31
 8005f62:	d522      	bpl.n	8005faa <__cvt+0xa6>
 8005f64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f68:	eb06 0905 	add.w	r9, r6, r5
 8005f6c:	d110      	bne.n	8005f90 <__cvt+0x8c>
 8005f6e:	7833      	ldrb	r3, [r6, #0]
 8005f70:	2b30      	cmp	r3, #48	; 0x30
 8005f72:	d10a      	bne.n	8005f8a <__cvt+0x86>
 8005f74:	2200      	movs	r2, #0
 8005f76:	2300      	movs	r3, #0
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8005f80:	b918      	cbnz	r0, 8005f8a <__cvt+0x86>
 8005f82:	f1c5 0501 	rsb	r5, r5, #1
 8005f86:	f8ca 5000 	str.w	r5, [sl]
 8005f8a:	f8da 3000 	ldr.w	r3, [sl]
 8005f8e:	4499      	add	r9, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	2300      	movs	r3, #0
 8005f94:	4620      	mov	r0, r4
 8005f96:	4639      	mov	r1, r7
 8005f98:	f7fa fd06 	bl	80009a8 <__aeabi_dcmpeq>
 8005f9c:	b108      	cbz	r0, 8005fa2 <__cvt+0x9e>
 8005f9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fa2:	2230      	movs	r2, #48	; 0x30
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	454b      	cmp	r3, r9
 8005fa8:	d307      	bcc.n	8005fba <__cvt+0xb6>
 8005faa:	4630      	mov	r0, r6
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fb0:	1b9b      	subs	r3, r3, r6
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	b008      	add	sp, #32
 8005fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fba:	1c59      	adds	r1, r3, #1
 8005fbc:	9107      	str	r1, [sp, #28]
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	e7f0      	b.n	8005fa4 <__cvt+0xa0>

08005fc2 <__exponent>:
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	f803 2b02 	strb.w	r2, [r3], #2
 8005fcc:	bfb6      	itet	lt
 8005fce:	222d      	movlt	r2, #45	; 0x2d
 8005fd0:	222b      	movge	r2, #43	; 0x2b
 8005fd2:	4249      	neglt	r1, r1
 8005fd4:	2909      	cmp	r1, #9
 8005fd6:	7042      	strb	r2, [r0, #1]
 8005fd8:	dd2b      	ble.n	8006032 <__exponent+0x70>
 8005fda:	f10d 0407 	add.w	r4, sp, #7
 8005fde:	46a4      	mov	ip, r4
 8005fe0:	270a      	movs	r7, #10
 8005fe2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	46a6      	mov	lr, r4
 8005fea:	fb07 1516 	mls	r5, r7, r6, r1
 8005fee:	2a63      	cmp	r2, #99	; 0x63
 8005ff0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ffe:	dcf0      	bgt.n	8005fe2 <__exponent+0x20>
 8006000:	3130      	adds	r1, #48	; 0x30
 8006002:	f1ae 0502 	sub.w	r5, lr, #2
 8006006:	f804 1c01 	strb.w	r1, [r4, #-1]
 800600a:	4629      	mov	r1, r5
 800600c:	1c44      	adds	r4, r0, #1
 800600e:	4561      	cmp	r1, ip
 8006010:	d30a      	bcc.n	8006028 <__exponent+0x66>
 8006012:	f10d 0209 	add.w	r2, sp, #9
 8006016:	eba2 020e 	sub.w	r2, r2, lr
 800601a:	4565      	cmp	r5, ip
 800601c:	bf88      	it	hi
 800601e:	2200      	movhi	r2, #0
 8006020:	4413      	add	r3, r2
 8006022:	1a18      	subs	r0, r3, r0
 8006024:	b003      	add	sp, #12
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	f811 2b01 	ldrb.w	r2, [r1], #1
 800602c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006030:	e7ed      	b.n	800600e <__exponent+0x4c>
 8006032:	2330      	movs	r3, #48	; 0x30
 8006034:	3130      	adds	r1, #48	; 0x30
 8006036:	7083      	strb	r3, [r0, #2]
 8006038:	70c1      	strb	r1, [r0, #3]
 800603a:	1d03      	adds	r3, r0, #4
 800603c:	e7f1      	b.n	8006022 <__exponent+0x60>
	...

08006040 <_printf_float>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	b091      	sub	sp, #68	; 0x44
 8006046:	460c      	mov	r4, r1
 8006048:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800604c:	4616      	mov	r6, r2
 800604e:	461f      	mov	r7, r3
 8006050:	4605      	mov	r5, r0
 8006052:	f001 fc21 	bl	8007898 <_localeconv_r>
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	9309      	str	r3, [sp, #36]	; 0x24
 800605c:	f7fa f878 	bl	8000150 <strlen>
 8006060:	2300      	movs	r3, #0
 8006062:	930e      	str	r3, [sp, #56]	; 0x38
 8006064:	f8d8 3000 	ldr.w	r3, [r8]
 8006068:	900a      	str	r0, [sp, #40]	; 0x28
 800606a:	3307      	adds	r3, #7
 800606c:	f023 0307 	bic.w	r3, r3, #7
 8006070:	f103 0208 	add.w	r2, r3, #8
 8006074:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006078:	f8d4 b000 	ldr.w	fp, [r4]
 800607c:	f8c8 2000 	str.w	r2, [r8]
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006088:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800608c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	f04f 32ff 	mov.w	r2, #4294967295
 8006096:	4640      	mov	r0, r8
 8006098:	4b9c      	ldr	r3, [pc, #624]	; (800630c <_printf_float+0x2cc>)
 800609a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800609c:	f7fa fcb6 	bl	8000a0c <__aeabi_dcmpun>
 80060a0:	bb70      	cbnz	r0, 8006100 <_printf_float+0xc0>
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295
 80060a6:	4640      	mov	r0, r8
 80060a8:	4b98      	ldr	r3, [pc, #608]	; (800630c <_printf_float+0x2cc>)
 80060aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ac:	f7fa fc90 	bl	80009d0 <__aeabi_dcmple>
 80060b0:	bb30      	cbnz	r0, 8006100 <_printf_float+0xc0>
 80060b2:	2200      	movs	r2, #0
 80060b4:	2300      	movs	r3, #0
 80060b6:	4640      	mov	r0, r8
 80060b8:	4651      	mov	r1, sl
 80060ba:	f7fa fc7f 	bl	80009bc <__aeabi_dcmplt>
 80060be:	b110      	cbz	r0, 80060c6 <_printf_float+0x86>
 80060c0:	232d      	movs	r3, #45	; 0x2d
 80060c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c6:	4b92      	ldr	r3, [pc, #584]	; (8006310 <_printf_float+0x2d0>)
 80060c8:	4892      	ldr	r0, [pc, #584]	; (8006314 <_printf_float+0x2d4>)
 80060ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80060ce:	bf94      	ite	ls
 80060d0:	4698      	movls	r8, r3
 80060d2:	4680      	movhi	r8, r0
 80060d4:	2303      	movs	r3, #3
 80060d6:	f04f 0a00 	mov.w	sl, #0
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	f02b 0304 	bic.w	r3, fp, #4
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	4633      	mov	r3, r6
 80060e4:	4621      	mov	r1, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	9700      	str	r7, [sp, #0]
 80060ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80060ec:	f000 f9d4 	bl	8006498 <_printf_common>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f040 8090 	bne.w	8006216 <_printf_float+0x1d6>
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	b011      	add	sp, #68	; 0x44
 80060fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	4642      	mov	r2, r8
 8006102:	4653      	mov	r3, sl
 8006104:	4640      	mov	r0, r8
 8006106:	4651      	mov	r1, sl
 8006108:	f7fa fc80 	bl	8000a0c <__aeabi_dcmpun>
 800610c:	b148      	cbz	r0, 8006122 <_printf_float+0xe2>
 800610e:	f1ba 0f00 	cmp.w	sl, #0
 8006112:	bfb8      	it	lt
 8006114:	232d      	movlt	r3, #45	; 0x2d
 8006116:	4880      	ldr	r0, [pc, #512]	; (8006318 <_printf_float+0x2d8>)
 8006118:	bfb8      	it	lt
 800611a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800611e:	4b7f      	ldr	r3, [pc, #508]	; (800631c <_printf_float+0x2dc>)
 8006120:	e7d3      	b.n	80060ca <_printf_float+0x8a>
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	d142      	bne.n	80061b2 <_printf_float+0x172>
 800612c:	2306      	movs	r3, #6
 800612e:	6063      	str	r3, [r4, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	9206      	str	r2, [sp, #24]
 8006134:	aa0e      	add	r2, sp, #56	; 0x38
 8006136:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800613a:	aa0d      	add	r2, sp, #52	; 0x34
 800613c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006140:	9203      	str	r2, [sp, #12]
 8006142:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006146:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	4642      	mov	r2, r8
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	4628      	mov	r0, r5
 8006154:	4653      	mov	r3, sl
 8006156:	910b      	str	r1, [sp, #44]	; 0x2c
 8006158:	f7ff fed4 	bl	8005f04 <__cvt>
 800615c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800615e:	4680      	mov	r8, r0
 8006160:	2947      	cmp	r1, #71	; 0x47
 8006162:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006164:	d108      	bne.n	8006178 <_printf_float+0x138>
 8006166:	1cc8      	adds	r0, r1, #3
 8006168:	db02      	blt.n	8006170 <_printf_float+0x130>
 800616a:	6863      	ldr	r3, [r4, #4]
 800616c:	4299      	cmp	r1, r3
 800616e:	dd40      	ble.n	80061f2 <_printf_float+0x1b2>
 8006170:	f1a9 0902 	sub.w	r9, r9, #2
 8006174:	fa5f f989 	uxtb.w	r9, r9
 8006178:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800617c:	d81f      	bhi.n	80061be <_printf_float+0x17e>
 800617e:	464a      	mov	r2, r9
 8006180:	3901      	subs	r1, #1
 8006182:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006186:	910d      	str	r1, [sp, #52]	; 0x34
 8006188:	f7ff ff1b 	bl	8005fc2 <__exponent>
 800618c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800618e:	4682      	mov	sl, r0
 8006190:	1813      	adds	r3, r2, r0
 8006192:	2a01      	cmp	r2, #1
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	dc02      	bgt.n	800619e <_printf_float+0x15e>
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	07d2      	lsls	r2, r2, #31
 800619c:	d501      	bpl.n	80061a2 <_printf_float+0x162>
 800619e:	3301      	adds	r3, #1
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d09b      	beq.n	80060e2 <_printf_float+0xa2>
 80061aa:	232d      	movs	r3, #45	; 0x2d
 80061ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b0:	e797      	b.n	80060e2 <_printf_float+0xa2>
 80061b2:	2947      	cmp	r1, #71	; 0x47
 80061b4:	d1bc      	bne.n	8006130 <_printf_float+0xf0>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1ba      	bne.n	8006130 <_printf_float+0xf0>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7b7      	b.n	800612e <_printf_float+0xee>
 80061be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80061c2:	d118      	bne.n	80061f6 <_printf_float+0x1b6>
 80061c4:	2900      	cmp	r1, #0
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	dd0b      	ble.n	80061e2 <_printf_float+0x1a2>
 80061ca:	6121      	str	r1, [r4, #16]
 80061cc:	b913      	cbnz	r3, 80061d4 <_printf_float+0x194>
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	07d0      	lsls	r0, r2, #31
 80061d2:	d502      	bpl.n	80061da <_printf_float+0x19a>
 80061d4:	3301      	adds	r3, #1
 80061d6:	440b      	add	r3, r1
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	65a1      	str	r1, [r4, #88]	; 0x58
 80061e0:	e7df      	b.n	80061a2 <_printf_float+0x162>
 80061e2:	b913      	cbnz	r3, 80061ea <_printf_float+0x1aa>
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	07d2      	lsls	r2, r2, #31
 80061e8:	d501      	bpl.n	80061ee <_printf_float+0x1ae>
 80061ea:	3302      	adds	r3, #2
 80061ec:	e7f4      	b.n	80061d8 <_printf_float+0x198>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e7f2      	b.n	80061d8 <_printf_float+0x198>
 80061f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80061f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061f8:	4299      	cmp	r1, r3
 80061fa:	db05      	blt.n	8006208 <_printf_float+0x1c8>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6121      	str	r1, [r4, #16]
 8006200:	07d8      	lsls	r0, r3, #31
 8006202:	d5ea      	bpl.n	80061da <_printf_float+0x19a>
 8006204:	1c4b      	adds	r3, r1, #1
 8006206:	e7e7      	b.n	80061d8 <_printf_float+0x198>
 8006208:	2900      	cmp	r1, #0
 800620a:	bfcc      	ite	gt
 800620c:	2201      	movgt	r2, #1
 800620e:	f1c1 0202 	rsble	r2, r1, #2
 8006212:	4413      	add	r3, r2
 8006214:	e7e0      	b.n	80061d8 <_printf_float+0x198>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	055a      	lsls	r2, r3, #21
 800621a:	d407      	bmi.n	800622c <_printf_float+0x1ec>
 800621c:	6923      	ldr	r3, [r4, #16]
 800621e:	4642      	mov	r2, r8
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	d12b      	bne.n	8006282 <_printf_float+0x242>
 800622a:	e764      	b.n	80060f6 <_printf_float+0xb6>
 800622c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006230:	f240 80dd 	bls.w	80063ee <_printf_float+0x3ae>
 8006234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006238:	2200      	movs	r2, #0
 800623a:	2300      	movs	r3, #0
 800623c:	f7fa fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006240:	2800      	cmp	r0, #0
 8006242:	d033      	beq.n	80062ac <_printf_float+0x26c>
 8006244:	2301      	movs	r3, #1
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	4a35      	ldr	r2, [pc, #212]	; (8006320 <_printf_float+0x2e0>)
 800624c:	47b8      	blx	r7
 800624e:	3001      	adds	r0, #1
 8006250:	f43f af51 	beq.w	80060f6 <_printf_float+0xb6>
 8006254:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006258:	429a      	cmp	r2, r3
 800625a:	db02      	blt.n	8006262 <_printf_float+0x222>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	07d8      	lsls	r0, r3, #31
 8006260:	d50f      	bpl.n	8006282 <_printf_float+0x242>
 8006262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f af42 	beq.w	80060f6 <_printf_float+0xb6>
 8006272:	f04f 0800 	mov.w	r8, #0
 8006276:	f104 091a 	add.w	r9, r4, #26
 800627a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627c:	3b01      	subs	r3, #1
 800627e:	4543      	cmp	r3, r8
 8006280:	dc09      	bgt.n	8006296 <_printf_float+0x256>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	079b      	lsls	r3, r3, #30
 8006286:	f100 8102 	bmi.w	800648e <_printf_float+0x44e>
 800628a:	68e0      	ldr	r0, [r4, #12]
 800628c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800628e:	4298      	cmp	r0, r3
 8006290:	bfb8      	it	lt
 8006292:	4618      	movlt	r0, r3
 8006294:	e731      	b.n	80060fa <_printf_float+0xba>
 8006296:	2301      	movs	r3, #1
 8006298:	464a      	mov	r2, r9
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f af28 	beq.w	80060f6 <_printf_float+0xb6>
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	e7e6      	b.n	800627a <_printf_float+0x23a>
 80062ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dc38      	bgt.n	8006324 <_printf_float+0x2e4>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	4a19      	ldr	r2, [pc, #100]	; (8006320 <_printf_float+0x2e0>)
 80062ba:	47b8      	blx	r7
 80062bc:	3001      	adds	r0, #1
 80062be:	f43f af1a 	beq.w	80060f6 <_printf_float+0xb6>
 80062c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062c6:	4313      	orrs	r3, r2
 80062c8:	d102      	bne.n	80062d0 <_printf_float+0x290>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	07d9      	lsls	r1, r3, #31
 80062ce:	d5d8      	bpl.n	8006282 <_printf_float+0x242>
 80062d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af0b 	beq.w	80060f6 <_printf_float+0xb6>
 80062e0:	f04f 0900 	mov.w	r9, #0
 80062e4:	f104 0a1a 	add.w	sl, r4, #26
 80062e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ea:	425b      	negs	r3, r3
 80062ec:	454b      	cmp	r3, r9
 80062ee:	dc01      	bgt.n	80062f4 <_printf_float+0x2b4>
 80062f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f2:	e794      	b.n	800621e <_printf_float+0x1de>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4652      	mov	r2, sl
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f aef9 	beq.w	80060f6 <_printf_float+0xb6>
 8006304:	f109 0901 	add.w	r9, r9, #1
 8006308:	e7ee      	b.n	80062e8 <_printf_float+0x2a8>
 800630a:	bf00      	nop
 800630c:	7fefffff 	.word	0x7fefffff
 8006310:	0800a914 	.word	0x0800a914
 8006314:	0800a918 	.word	0x0800a918
 8006318:	0800a920 	.word	0x0800a920
 800631c:	0800a91c 	.word	0x0800a91c
 8006320:	0800aba9 	.word	0x0800aba9
 8006324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006328:	429a      	cmp	r2, r3
 800632a:	bfa8      	it	ge
 800632c:	461a      	movge	r2, r3
 800632e:	2a00      	cmp	r2, #0
 8006330:	4691      	mov	r9, r2
 8006332:	dc37      	bgt.n	80063a4 <_printf_float+0x364>
 8006334:	f04f 0b00 	mov.w	fp, #0
 8006338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800633c:	f104 021a 	add.w	r2, r4, #26
 8006340:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006344:	ebaa 0309 	sub.w	r3, sl, r9
 8006348:	455b      	cmp	r3, fp
 800634a:	dc33      	bgt.n	80063b4 <_printf_float+0x374>
 800634c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006350:	429a      	cmp	r2, r3
 8006352:	db3b      	blt.n	80063cc <_printf_float+0x38c>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	07da      	lsls	r2, r3, #31
 8006358:	d438      	bmi.n	80063cc <_printf_float+0x38c>
 800635a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800635c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800635e:	eba3 020a 	sub.w	r2, r3, sl
 8006362:	eba3 0901 	sub.w	r9, r3, r1
 8006366:	4591      	cmp	r9, r2
 8006368:	bfa8      	it	ge
 800636a:	4691      	movge	r9, r2
 800636c:	f1b9 0f00 	cmp.w	r9, #0
 8006370:	dc34      	bgt.n	80063dc <_printf_float+0x39c>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637a:	f104 0a1a 	add.w	sl, r4, #26
 800637e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	eba3 0309 	sub.w	r3, r3, r9
 8006388:	4543      	cmp	r3, r8
 800638a:	f77f af7a 	ble.w	8006282 <_printf_float+0x242>
 800638e:	2301      	movs	r3, #1
 8006390:	4652      	mov	r2, sl
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	f43f aeac 	beq.w	80060f6 <_printf_float+0xb6>
 800639e:	f108 0801 	add.w	r8, r8, #1
 80063a2:	e7ec      	b.n	800637e <_printf_float+0x33e>
 80063a4:	4613      	mov	r3, r2
 80063a6:	4631      	mov	r1, r6
 80063a8:	4642      	mov	r2, r8
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	d1c0      	bne.n	8006334 <_printf_float+0x2f4>
 80063b2:	e6a0      	b.n	80060f6 <_printf_float+0xb6>
 80063b4:	2301      	movs	r3, #1
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	f43f ae99 	beq.w	80060f6 <_printf_float+0xb6>
 80063c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063c6:	f10b 0b01 	add.w	fp, fp, #1
 80063ca:	e7b9      	b.n	8006340 <_printf_float+0x300>
 80063cc:	4631      	mov	r1, r6
 80063ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	d1bf      	bne.n	800635a <_printf_float+0x31a>
 80063da:	e68c      	b.n	80060f6 <_printf_float+0xb6>
 80063dc:	464b      	mov	r3, r9
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	eb08 020a 	add.w	r2, r8, sl
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	d1c2      	bne.n	8006372 <_printf_float+0x332>
 80063ec:	e683      	b.n	80060f6 <_printf_float+0xb6>
 80063ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063f0:	2a01      	cmp	r2, #1
 80063f2:	dc01      	bgt.n	80063f8 <_printf_float+0x3b8>
 80063f4:	07db      	lsls	r3, r3, #31
 80063f6:	d537      	bpl.n	8006468 <_printf_float+0x428>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4642      	mov	r2, r8
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f ae77 	beq.w	80060f6 <_printf_float+0xb6>
 8006408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800640c:	4631      	mov	r1, r6
 800640e:	4628      	mov	r0, r5
 8006410:	47b8      	blx	r7
 8006412:	3001      	adds	r0, #1
 8006414:	f43f ae6f 	beq.w	80060f6 <_printf_float+0xb6>
 8006418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800641c:	2200      	movs	r2, #0
 800641e:	2300      	movs	r3, #0
 8006420:	f7fa fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8006424:	b9d8      	cbnz	r0, 800645e <_printf_float+0x41e>
 8006426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006428:	f108 0201 	add.w	r2, r8, #1
 800642c:	3b01      	subs	r3, #1
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	d10e      	bne.n	8006456 <_printf_float+0x416>
 8006438:	e65d      	b.n	80060f6 <_printf_float+0xb6>
 800643a:	2301      	movs	r3, #1
 800643c:	464a      	mov	r2, r9
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	f43f ae56 	beq.w	80060f6 <_printf_float+0xb6>
 800644a:	f108 0801 	add.w	r8, r8, #1
 800644e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006450:	3b01      	subs	r3, #1
 8006452:	4543      	cmp	r3, r8
 8006454:	dcf1      	bgt.n	800643a <_printf_float+0x3fa>
 8006456:	4653      	mov	r3, sl
 8006458:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800645c:	e6e0      	b.n	8006220 <_printf_float+0x1e0>
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	f104 091a 	add.w	r9, r4, #26
 8006466:	e7f2      	b.n	800644e <_printf_float+0x40e>
 8006468:	2301      	movs	r3, #1
 800646a:	4642      	mov	r2, r8
 800646c:	e7df      	b.n	800642e <_printf_float+0x3ee>
 800646e:	2301      	movs	r3, #1
 8006470:	464a      	mov	r2, r9
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	f43f ae3c 	beq.w	80060f6 <_printf_float+0xb6>
 800647e:	f108 0801 	add.w	r8, r8, #1
 8006482:	68e3      	ldr	r3, [r4, #12]
 8006484:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006486:	1a5b      	subs	r3, r3, r1
 8006488:	4543      	cmp	r3, r8
 800648a:	dcf0      	bgt.n	800646e <_printf_float+0x42e>
 800648c:	e6fd      	b.n	800628a <_printf_float+0x24a>
 800648e:	f04f 0800 	mov.w	r8, #0
 8006492:	f104 0919 	add.w	r9, r4, #25
 8006496:	e7f4      	b.n	8006482 <_printf_float+0x442>

08006498 <_printf_common>:
 8006498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	4616      	mov	r6, r2
 800649e:	4699      	mov	r9, r3
 80064a0:	688a      	ldr	r2, [r1, #8]
 80064a2:	690b      	ldr	r3, [r1, #16]
 80064a4:	4607      	mov	r7, r0
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bfb8      	it	lt
 80064aa:	4613      	movlt	r3, r2
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b2:	460c      	mov	r4, r1
 80064b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064b8:	b10a      	cbz	r2, 80064be <_printf_common+0x26>
 80064ba:	3301      	adds	r3, #1
 80064bc:	6033      	str	r3, [r6, #0]
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	0699      	lsls	r1, r3, #26
 80064c2:	bf42      	ittt	mi
 80064c4:	6833      	ldrmi	r3, [r6, #0]
 80064c6:	3302      	addmi	r3, #2
 80064c8:	6033      	strmi	r3, [r6, #0]
 80064ca:	6825      	ldr	r5, [r4, #0]
 80064cc:	f015 0506 	ands.w	r5, r5, #6
 80064d0:	d106      	bne.n	80064e0 <_printf_common+0x48>
 80064d2:	f104 0a19 	add.w	sl, r4, #25
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	6832      	ldr	r2, [r6, #0]
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	42ab      	cmp	r3, r5
 80064de:	dc28      	bgt.n	8006532 <_printf_common+0x9a>
 80064e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e4:	1e13      	subs	r3, r2, #0
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	bf18      	it	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	0692      	lsls	r2, r2, #26
 80064ee:	d42d      	bmi.n	800654c <_printf_common+0xb4>
 80064f0:	4649      	mov	r1, r9
 80064f2:	4638      	mov	r0, r7
 80064f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f8:	47c0      	blx	r8
 80064fa:	3001      	adds	r0, #1
 80064fc:	d020      	beq.n	8006540 <_printf_common+0xa8>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	68e5      	ldr	r5, [r4, #12]
 8006502:	f003 0306 	and.w	r3, r3, #6
 8006506:	2b04      	cmp	r3, #4
 8006508:	bf18      	it	ne
 800650a:	2500      	movne	r5, #0
 800650c:	6832      	ldr	r2, [r6, #0]
 800650e:	f04f 0600 	mov.w	r6, #0
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	bf08      	it	eq
 8006516:	1aad      	subeq	r5, r5, r2
 8006518:	6922      	ldr	r2, [r4, #16]
 800651a:	bf08      	it	eq
 800651c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006520:	4293      	cmp	r3, r2
 8006522:	bfc4      	itt	gt
 8006524:	1a9b      	subgt	r3, r3, r2
 8006526:	18ed      	addgt	r5, r5, r3
 8006528:	341a      	adds	r4, #26
 800652a:	42b5      	cmp	r5, r6
 800652c:	d11a      	bne.n	8006564 <_printf_common+0xcc>
 800652e:	2000      	movs	r0, #0
 8006530:	e008      	b.n	8006544 <_printf_common+0xac>
 8006532:	2301      	movs	r3, #1
 8006534:	4652      	mov	r2, sl
 8006536:	4649      	mov	r1, r9
 8006538:	4638      	mov	r0, r7
 800653a:	47c0      	blx	r8
 800653c:	3001      	adds	r0, #1
 800653e:	d103      	bne.n	8006548 <_printf_common+0xb0>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006548:	3501      	adds	r5, #1
 800654a:	e7c4      	b.n	80064d6 <_printf_common+0x3e>
 800654c:	2030      	movs	r0, #48	; 0x30
 800654e:	18e1      	adds	r1, r4, r3
 8006550:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800655a:	4422      	add	r2, r4
 800655c:	3302      	adds	r3, #2
 800655e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006562:	e7c5      	b.n	80064f0 <_printf_common+0x58>
 8006564:	2301      	movs	r3, #1
 8006566:	4622      	mov	r2, r4
 8006568:	4649      	mov	r1, r9
 800656a:	4638      	mov	r0, r7
 800656c:	47c0      	blx	r8
 800656e:	3001      	adds	r0, #1
 8006570:	d0e6      	beq.n	8006540 <_printf_common+0xa8>
 8006572:	3601      	adds	r6, #1
 8006574:	e7d9      	b.n	800652a <_printf_common+0x92>
	...

08006578 <_printf_i>:
 8006578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	7e0f      	ldrb	r7, [r1, #24]
 800657e:	4691      	mov	r9, r2
 8006580:	2f78      	cmp	r7, #120	; 0x78
 8006582:	4680      	mov	r8, r0
 8006584:	460c      	mov	r4, r1
 8006586:	469a      	mov	sl, r3
 8006588:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800658a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800658e:	d807      	bhi.n	80065a0 <_printf_i+0x28>
 8006590:	2f62      	cmp	r7, #98	; 0x62
 8006592:	d80a      	bhi.n	80065aa <_printf_i+0x32>
 8006594:	2f00      	cmp	r7, #0
 8006596:	f000 80d9 	beq.w	800674c <_printf_i+0x1d4>
 800659a:	2f58      	cmp	r7, #88	; 0x58
 800659c:	f000 80a4 	beq.w	80066e8 <_printf_i+0x170>
 80065a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a8:	e03a      	b.n	8006620 <_printf_i+0xa8>
 80065aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ae:	2b15      	cmp	r3, #21
 80065b0:	d8f6      	bhi.n	80065a0 <_printf_i+0x28>
 80065b2:	a101      	add	r1, pc, #4	; (adr r1, 80065b8 <_printf_i+0x40>)
 80065b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006625 	.word	0x08006625
 80065c0:	080065a1 	.word	0x080065a1
 80065c4:	080065a1 	.word	0x080065a1
 80065c8:	080065a1 	.word	0x080065a1
 80065cc:	080065a1 	.word	0x080065a1
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080065a1 	.word	0x080065a1
 80065d8:	080065a1 	.word	0x080065a1
 80065dc:	080065a1 	.word	0x080065a1
 80065e0:	080065a1 	.word	0x080065a1
 80065e4:	08006733 	.word	0x08006733
 80065e8:	08006655 	.word	0x08006655
 80065ec:	08006715 	.word	0x08006715
 80065f0:	080065a1 	.word	0x080065a1
 80065f4:	080065a1 	.word	0x080065a1
 80065f8:	08006755 	.word	0x08006755
 80065fc:	080065a1 	.word	0x080065a1
 8006600:	08006655 	.word	0x08006655
 8006604:	080065a1 	.word	0x080065a1
 8006608:	080065a1 	.word	0x080065a1
 800660c:	0800671d 	.word	0x0800671d
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800661c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006620:	2301      	movs	r3, #1
 8006622:	e0a4      	b.n	800676e <_printf_i+0x1f6>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	6829      	ldr	r1, [r5, #0]
 8006628:	0606      	lsls	r6, r0, #24
 800662a:	f101 0304 	add.w	r3, r1, #4
 800662e:	d50a      	bpl.n	8006646 <_printf_i+0xce>
 8006630:	680e      	ldr	r6, [r1, #0]
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	2e00      	cmp	r6, #0
 8006636:	da03      	bge.n	8006640 <_printf_i+0xc8>
 8006638:	232d      	movs	r3, #45	; 0x2d
 800663a:	4276      	negs	r6, r6
 800663c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006640:	230a      	movs	r3, #10
 8006642:	485e      	ldr	r0, [pc, #376]	; (80067bc <_printf_i+0x244>)
 8006644:	e019      	b.n	800667a <_printf_i+0x102>
 8006646:	680e      	ldr	r6, [r1, #0]
 8006648:	f010 0f40 	tst.w	r0, #64	; 0x40
 800664c:	602b      	str	r3, [r5, #0]
 800664e:	bf18      	it	ne
 8006650:	b236      	sxthne	r6, r6
 8006652:	e7ef      	b.n	8006634 <_printf_i+0xbc>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1d19      	adds	r1, r3, #4
 800665a:	6029      	str	r1, [r5, #0]
 800665c:	0601      	lsls	r1, r0, #24
 800665e:	d501      	bpl.n	8006664 <_printf_i+0xec>
 8006660:	681e      	ldr	r6, [r3, #0]
 8006662:	e002      	b.n	800666a <_printf_i+0xf2>
 8006664:	0646      	lsls	r6, r0, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0xe8>
 8006668:	881e      	ldrh	r6, [r3, #0]
 800666a:	2f6f      	cmp	r7, #111	; 0x6f
 800666c:	bf0c      	ite	eq
 800666e:	2308      	moveq	r3, #8
 8006670:	230a      	movne	r3, #10
 8006672:	4852      	ldr	r0, [pc, #328]	; (80067bc <_printf_i+0x244>)
 8006674:	2100      	movs	r1, #0
 8006676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800667a:	6865      	ldr	r5, [r4, #4]
 800667c:	2d00      	cmp	r5, #0
 800667e:	bfa8      	it	ge
 8006680:	6821      	ldrge	r1, [r4, #0]
 8006682:	60a5      	str	r5, [r4, #8]
 8006684:	bfa4      	itt	ge
 8006686:	f021 0104 	bicge.w	r1, r1, #4
 800668a:	6021      	strge	r1, [r4, #0]
 800668c:	b90e      	cbnz	r6, 8006692 <_printf_i+0x11a>
 800668e:	2d00      	cmp	r5, #0
 8006690:	d04d      	beq.n	800672e <_printf_i+0x1b6>
 8006692:	4615      	mov	r5, r2
 8006694:	fbb6 f1f3 	udiv	r1, r6, r3
 8006698:	fb03 6711 	mls	r7, r3, r1, r6
 800669c:	5dc7      	ldrb	r7, [r0, r7]
 800669e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066a2:	4637      	mov	r7, r6
 80066a4:	42bb      	cmp	r3, r7
 80066a6:	460e      	mov	r6, r1
 80066a8:	d9f4      	bls.n	8006694 <_printf_i+0x11c>
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d10b      	bne.n	80066c6 <_printf_i+0x14e>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	07de      	lsls	r6, r3, #31
 80066b2:	d508      	bpl.n	80066c6 <_printf_i+0x14e>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	6861      	ldr	r1, [r4, #4]
 80066b8:	4299      	cmp	r1, r3
 80066ba:	bfde      	ittt	le
 80066bc:	2330      	movle	r3, #48	; 0x30
 80066be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066c6:	1b52      	subs	r2, r2, r5
 80066c8:	6122      	str	r2, [r4, #16]
 80066ca:	464b      	mov	r3, r9
 80066cc:	4621      	mov	r1, r4
 80066ce:	4640      	mov	r0, r8
 80066d0:	f8cd a000 	str.w	sl, [sp]
 80066d4:	aa03      	add	r2, sp, #12
 80066d6:	f7ff fedf 	bl	8006498 <_printf_common>
 80066da:	3001      	adds	r0, #1
 80066dc:	d14c      	bne.n	8006778 <_printf_i+0x200>
 80066de:	f04f 30ff 	mov.w	r0, #4294967295
 80066e2:	b004      	add	sp, #16
 80066e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e8:	4834      	ldr	r0, [pc, #208]	; (80067bc <_printf_i+0x244>)
 80066ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066ee:	6829      	ldr	r1, [r5, #0]
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80066f6:	6029      	str	r1, [r5, #0]
 80066f8:	061d      	lsls	r5, r3, #24
 80066fa:	d514      	bpl.n	8006726 <_printf_i+0x1ae>
 80066fc:	07df      	lsls	r7, r3, #31
 80066fe:	bf44      	itt	mi
 8006700:	f043 0320 	orrmi.w	r3, r3, #32
 8006704:	6023      	strmi	r3, [r4, #0]
 8006706:	b91e      	cbnz	r6, 8006710 <_printf_i+0x198>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	f023 0320 	bic.w	r3, r3, #32
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	2310      	movs	r3, #16
 8006712:	e7af      	b.n	8006674 <_printf_i+0xfc>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	f043 0320 	orr.w	r3, r3, #32
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	2378      	movs	r3, #120	; 0x78
 800671e:	4828      	ldr	r0, [pc, #160]	; (80067c0 <_printf_i+0x248>)
 8006720:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006724:	e7e3      	b.n	80066ee <_printf_i+0x176>
 8006726:	0659      	lsls	r1, r3, #25
 8006728:	bf48      	it	mi
 800672a:	b2b6      	uxthmi	r6, r6
 800672c:	e7e6      	b.n	80066fc <_printf_i+0x184>
 800672e:	4615      	mov	r5, r2
 8006730:	e7bb      	b.n	80066aa <_printf_i+0x132>
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	6826      	ldr	r6, [r4, #0]
 8006736:	1d18      	adds	r0, r3, #4
 8006738:	6961      	ldr	r1, [r4, #20]
 800673a:	6028      	str	r0, [r5, #0]
 800673c:	0635      	lsls	r5, r6, #24
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	d501      	bpl.n	8006746 <_printf_i+0x1ce>
 8006742:	6019      	str	r1, [r3, #0]
 8006744:	e002      	b.n	800674c <_printf_i+0x1d4>
 8006746:	0670      	lsls	r0, r6, #25
 8006748:	d5fb      	bpl.n	8006742 <_printf_i+0x1ca>
 800674a:	8019      	strh	r1, [r3, #0]
 800674c:	2300      	movs	r3, #0
 800674e:	4615      	mov	r5, r2
 8006750:	6123      	str	r3, [r4, #16]
 8006752:	e7ba      	b.n	80066ca <_printf_i+0x152>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	2100      	movs	r1, #0
 8006758:	1d1a      	adds	r2, r3, #4
 800675a:	602a      	str	r2, [r5, #0]
 800675c:	681d      	ldr	r5, [r3, #0]
 800675e:	6862      	ldr	r2, [r4, #4]
 8006760:	4628      	mov	r0, r5
 8006762:	f001 f8b3 	bl	80078cc <memchr>
 8006766:	b108      	cbz	r0, 800676c <_printf_i+0x1f4>
 8006768:	1b40      	subs	r0, r0, r5
 800676a:	6060      	str	r0, [r4, #4]
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	2300      	movs	r3, #0
 8006772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006776:	e7a8      	b.n	80066ca <_printf_i+0x152>
 8006778:	462a      	mov	r2, r5
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	6923      	ldr	r3, [r4, #16]
 8006780:	47d0      	blx	sl
 8006782:	3001      	adds	r0, #1
 8006784:	d0ab      	beq.n	80066de <_printf_i+0x166>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	079b      	lsls	r3, r3, #30
 800678a:	d413      	bmi.n	80067b4 <_printf_i+0x23c>
 800678c:	68e0      	ldr	r0, [r4, #12]
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	4298      	cmp	r0, r3
 8006792:	bfb8      	it	lt
 8006794:	4618      	movlt	r0, r3
 8006796:	e7a4      	b.n	80066e2 <_printf_i+0x16a>
 8006798:	2301      	movs	r3, #1
 800679a:	4632      	mov	r2, r6
 800679c:	4649      	mov	r1, r9
 800679e:	4640      	mov	r0, r8
 80067a0:	47d0      	blx	sl
 80067a2:	3001      	adds	r0, #1
 80067a4:	d09b      	beq.n	80066de <_printf_i+0x166>
 80067a6:	3501      	adds	r5, #1
 80067a8:	68e3      	ldr	r3, [r4, #12]
 80067aa:	9903      	ldr	r1, [sp, #12]
 80067ac:	1a5b      	subs	r3, r3, r1
 80067ae:	42ab      	cmp	r3, r5
 80067b0:	dcf2      	bgt.n	8006798 <_printf_i+0x220>
 80067b2:	e7eb      	b.n	800678c <_printf_i+0x214>
 80067b4:	2500      	movs	r5, #0
 80067b6:	f104 0619 	add.w	r6, r4, #25
 80067ba:	e7f5      	b.n	80067a8 <_printf_i+0x230>
 80067bc:	0800a924 	.word	0x0800a924
 80067c0:	0800a935 	.word	0x0800a935

080067c4 <iprintf>:
 80067c4:	b40f      	push	{r0, r1, r2, r3}
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <iprintf+0x2c>)
 80067c8:	b513      	push	{r0, r1, r4, lr}
 80067ca:	681c      	ldr	r4, [r3, #0]
 80067cc:	b124      	cbz	r4, 80067d8 <iprintf+0x14>
 80067ce:	69a3      	ldr	r3, [r4, #24]
 80067d0:	b913      	cbnz	r3, 80067d8 <iprintf+0x14>
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 ffc2 	bl	800775c <__sinit>
 80067d8:	ab05      	add	r3, sp, #20
 80067da:	4620      	mov	r0, r4
 80067dc:	9a04      	ldr	r2, [sp, #16]
 80067de:	68a1      	ldr	r1, [r4, #8]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	f001 ff75 	bl	80086d0 <_vfiprintf_r>
 80067e6:	b002      	add	sp, #8
 80067e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ec:	b004      	add	sp, #16
 80067ee:	4770      	bx	lr
 80067f0:	2000002c 	.word	0x2000002c

080067f4 <_sbrk_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	2300      	movs	r3, #0
 80067f8:	4d05      	ldr	r5, [pc, #20]	; (8006810 <_sbrk_r+0x1c>)
 80067fa:	4604      	mov	r4, r0
 80067fc:	4608      	mov	r0, r1
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	f7fc f8c2 	bl	8002988 <_sbrk>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_sbrk_r+0x1a>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_sbrk_r+0x1a>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	20000798 	.word	0x20000798

08006814 <siprintf>:
 8006814:	b40e      	push	{r1, r2, r3}
 8006816:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800681a:	b500      	push	{lr}
 800681c:	b09c      	sub	sp, #112	; 0x70
 800681e:	ab1d      	add	r3, sp, #116	; 0x74
 8006820:	9002      	str	r0, [sp, #8]
 8006822:	9006      	str	r0, [sp, #24]
 8006824:	9107      	str	r1, [sp, #28]
 8006826:	9104      	str	r1, [sp, #16]
 8006828:	4808      	ldr	r0, [pc, #32]	; (800684c <siprintf+0x38>)
 800682a:	4909      	ldr	r1, [pc, #36]	; (8006850 <siprintf+0x3c>)
 800682c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006830:	9105      	str	r1, [sp, #20]
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	a902      	add	r1, sp, #8
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	f001 fc4e 	bl	80080d8 <_svfiprintf_r>
 800683c:	2200      	movs	r2, #0
 800683e:	9b02      	ldr	r3, [sp, #8]
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	b01c      	add	sp, #112	; 0x70
 8006844:	f85d eb04 	ldr.w	lr, [sp], #4
 8006848:	b003      	add	sp, #12
 800684a:	4770      	bx	lr
 800684c:	2000002c 	.word	0x2000002c
 8006850:	ffff0208 	.word	0xffff0208

08006854 <siscanf>:
 8006854:	b40e      	push	{r1, r2, r3}
 8006856:	f44f 7201 	mov.w	r2, #516	; 0x204
 800685a:	b530      	push	{r4, r5, lr}
 800685c:	b09c      	sub	sp, #112	; 0x70
 800685e:	ac1f      	add	r4, sp, #124	; 0x7c
 8006860:	f854 5b04 	ldr.w	r5, [r4], #4
 8006864:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006868:	9002      	str	r0, [sp, #8]
 800686a:	9006      	str	r0, [sp, #24]
 800686c:	f7f9 fc70 	bl	8000150 <strlen>
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <siscanf+0x4c>)
 8006872:	9003      	str	r0, [sp, #12]
 8006874:	930b      	str	r3, [sp, #44]	; 0x2c
 8006876:	2300      	movs	r3, #0
 8006878:	930f      	str	r3, [sp, #60]	; 0x3c
 800687a:	9314      	str	r3, [sp, #80]	; 0x50
 800687c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006880:	9007      	str	r0, [sp, #28]
 8006882:	4808      	ldr	r0, [pc, #32]	; (80068a4 <siscanf+0x50>)
 8006884:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006888:	462a      	mov	r2, r5
 800688a:	4623      	mov	r3, r4
 800688c:	a902      	add	r1, sp, #8
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	9401      	str	r4, [sp, #4]
 8006892:	f001 fd7b 	bl	800838c <__ssvfiscanf_r>
 8006896:	b01c      	add	sp, #112	; 0x70
 8006898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800689c:	b003      	add	sp, #12
 800689e:	4770      	bx	lr
 80068a0:	080068cb 	.word	0x080068cb
 80068a4:	2000002c 	.word	0x2000002c

080068a8 <__sread>:
 80068a8:	b510      	push	{r4, lr}
 80068aa:	460c      	mov	r4, r1
 80068ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b0:	f002 f990 	bl	8008bd4 <_read_r>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	bfab      	itete	ge
 80068b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068ba:	89a3      	ldrhlt	r3, [r4, #12]
 80068bc:	181b      	addge	r3, r3, r0
 80068be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068c2:	bfac      	ite	ge
 80068c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068c6:	81a3      	strhlt	r3, [r4, #12]
 80068c8:	bd10      	pop	{r4, pc}

080068ca <__seofread>:
 80068ca:	2000      	movs	r0, #0
 80068cc:	4770      	bx	lr

080068ce <__swrite>:
 80068ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	461f      	mov	r7, r3
 80068d4:	898b      	ldrh	r3, [r1, #12]
 80068d6:	4605      	mov	r5, r0
 80068d8:	05db      	lsls	r3, r3, #23
 80068da:	460c      	mov	r4, r1
 80068dc:	4616      	mov	r6, r2
 80068de:	d505      	bpl.n	80068ec <__swrite+0x1e>
 80068e0:	2302      	movs	r3, #2
 80068e2:	2200      	movs	r2, #0
 80068e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e8:	f000 ffde 	bl	80078a8 <_lseek_r>
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	4632      	mov	r2, r6
 80068f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	4628      	mov	r0, r5
 80068f8:	463b      	mov	r3, r7
 80068fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006902:	f000 b835 	b.w	8006970 <_write_r>

08006906 <__sseek>:
 8006906:	b510      	push	{r4, lr}
 8006908:	460c      	mov	r4, r1
 800690a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690e:	f000 ffcb 	bl	80078a8 <_lseek_r>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	bf15      	itete	ne
 8006918:	6560      	strne	r0, [r4, #84]	; 0x54
 800691a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800691e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006922:	81a3      	strheq	r3, [r4, #12]
 8006924:	bf18      	it	ne
 8006926:	81a3      	strhne	r3, [r4, #12]
 8006928:	bd10      	pop	{r4, pc}

0800692a <__sclose>:
 800692a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692e:	f000 b831 	b.w	8006994 <_close_r>

08006932 <strcpy>:
 8006932:	4603      	mov	r3, r0
 8006934:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006938:	f803 2b01 	strb.w	r2, [r3], #1
 800693c:	2a00      	cmp	r2, #0
 800693e:	d1f9      	bne.n	8006934 <strcpy+0x2>
 8006940:	4770      	bx	lr

08006942 <strstr>:
 8006942:	780a      	ldrb	r2, [r1, #0]
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	b96a      	cbnz	r2, 8006964 <strstr+0x22>
 8006948:	bd70      	pop	{r4, r5, r6, pc}
 800694a:	429a      	cmp	r2, r3
 800694c:	d109      	bne.n	8006962 <strstr+0x20>
 800694e:	460c      	mov	r4, r1
 8006950:	4605      	mov	r5, r0
 8006952:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0f6      	beq.n	8006948 <strstr+0x6>
 800695a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800695e:	429e      	cmp	r6, r3
 8006960:	d0f7      	beq.n	8006952 <strstr+0x10>
 8006962:	3001      	adds	r0, #1
 8006964:	7803      	ldrb	r3, [r0, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1ef      	bne.n	800694a <strstr+0x8>
 800696a:	4618      	mov	r0, r3
 800696c:	e7ec      	b.n	8006948 <strstr+0x6>
	...

08006970 <_write_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4604      	mov	r4, r0
 8006974:	4608      	mov	r0, r1
 8006976:	4611      	mov	r1, r2
 8006978:	2200      	movs	r2, #0
 800697a:	4d05      	ldr	r5, [pc, #20]	; (8006990 <_write_r+0x20>)
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fb ffb6 	bl	80028f0 <_write>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_write_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_write_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20000798 	.word	0x20000798

08006994 <_close_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	2300      	movs	r3, #0
 8006998:	4d05      	ldr	r5, [pc, #20]	; (80069b0 <_close_r+0x1c>)
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	f7fb ffc2 	bl	8002928 <_close>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_close_r+0x1a>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_close_r+0x1a>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	20000798 	.word	0x20000798

080069b4 <quorem>:
 80069b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	6903      	ldr	r3, [r0, #16]
 80069ba:	690c      	ldr	r4, [r1, #16]
 80069bc:	4607      	mov	r7, r0
 80069be:	42a3      	cmp	r3, r4
 80069c0:	f2c0 8082 	blt.w	8006ac8 <quorem+0x114>
 80069c4:	3c01      	subs	r4, #1
 80069c6:	f100 0514 	add.w	r5, r0, #20
 80069ca:	f101 0814 	add.w	r8, r1, #20
 80069ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069dc:	3301      	adds	r3, #1
 80069de:	429a      	cmp	r2, r3
 80069e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80069e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069ec:	d331      	bcc.n	8006a52 <quorem+0x9e>
 80069ee:	f04f 0e00 	mov.w	lr, #0
 80069f2:	4640      	mov	r0, r8
 80069f4:	46ac      	mov	ip, r5
 80069f6:	46f2      	mov	sl, lr
 80069f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80069fc:	b293      	uxth	r3, r2
 80069fe:	fb06 e303 	mla	r3, r6, r3, lr
 8006a02:	0c12      	lsrs	r2, r2, #16
 8006a04:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	fb06 e202 	mla	r2, r6, r2, lr
 8006a0e:	ebaa 0303 	sub.w	r3, sl, r3
 8006a12:	f8dc a000 	ldr.w	sl, [ip]
 8006a16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a1a:	fa1f fa8a 	uxth.w	sl, sl
 8006a1e:	4453      	add	r3, sl
 8006a20:	f8dc a000 	ldr.w	sl, [ip]
 8006a24:	b292      	uxth	r2, r2
 8006a26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a34:	4581      	cmp	r9, r0
 8006a36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a3a:	f84c 3b04 	str.w	r3, [ip], #4
 8006a3e:	d2db      	bcs.n	80069f8 <quorem+0x44>
 8006a40:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a44:	b92b      	cbnz	r3, 8006a52 <quorem+0x9e>
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	429d      	cmp	r5, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	d32f      	bcc.n	8006ab0 <quorem+0xfc>
 8006a50:	613c      	str	r4, [r7, #16]
 8006a52:	4638      	mov	r0, r7
 8006a54:	f001 f9e0 	bl	8007e18 <__mcmp>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	db25      	blt.n	8006aa8 <quorem+0xf4>
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f04f 0c00 	mov.w	ip, #0
 8006a62:	3601      	adds	r6, #1
 8006a64:	f858 1b04 	ldr.w	r1, [r8], #4
 8006a68:	f8d0 e000 	ldr.w	lr, [r0]
 8006a6c:	b28b      	uxth	r3, r1
 8006a6e:	ebac 0303 	sub.w	r3, ip, r3
 8006a72:	fa1f f28e 	uxth.w	r2, lr
 8006a76:	4413      	add	r3, r2
 8006a78:	0c0a      	lsrs	r2, r1, #16
 8006a7a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a88:	45c1      	cmp	r9, r8
 8006a8a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a8e:	f840 3b04 	str.w	r3, [r0], #4
 8006a92:	d2e7      	bcs.n	8006a64 <quorem+0xb0>
 8006a94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a9c:	b922      	cbnz	r2, 8006aa8 <quorem+0xf4>
 8006a9e:	3b04      	subs	r3, #4
 8006aa0:	429d      	cmp	r5, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	d30a      	bcc.n	8006abc <quorem+0x108>
 8006aa6:	613c      	str	r4, [r7, #16]
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	3b04      	subs	r3, #4
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	d1cb      	bne.n	8006a50 <quorem+0x9c>
 8006ab8:	3c01      	subs	r4, #1
 8006aba:	e7c6      	b.n	8006a4a <quorem+0x96>
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	3b04      	subs	r3, #4
 8006ac0:	2a00      	cmp	r2, #0
 8006ac2:	d1f0      	bne.n	8006aa6 <quorem+0xf2>
 8006ac4:	3c01      	subs	r4, #1
 8006ac6:	e7eb      	b.n	8006aa0 <quorem+0xec>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7ee      	b.n	8006aaa <quorem+0xf6>
 8006acc:	0000      	movs	r0, r0
	...

08006ad0 <_dtoa_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	461f      	mov	r7, r3
 8006ad8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ada:	b099      	sub	sp, #100	; 0x64
 8006adc:	4605      	mov	r5, r0
 8006ade:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006ae2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006ae6:	b974      	cbnz	r4, 8006b06 <_dtoa_r+0x36>
 8006ae8:	2010      	movs	r0, #16
 8006aea:	f7ff f90b 	bl	8005d04 <malloc>
 8006aee:	4602      	mov	r2, r0
 8006af0:	6268      	str	r0, [r5, #36]	; 0x24
 8006af2:	b920      	cbnz	r0, 8006afe <_dtoa_r+0x2e>
 8006af4:	21ea      	movs	r1, #234	; 0xea
 8006af6:	4ba8      	ldr	r3, [pc, #672]	; (8006d98 <_dtoa_r+0x2c8>)
 8006af8:	48a8      	ldr	r0, [pc, #672]	; (8006d9c <_dtoa_r+0x2cc>)
 8006afa:	f002 fa9f 	bl	800903c <__assert_func>
 8006afe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b02:	6004      	str	r4, [r0, #0]
 8006b04:	60c4      	str	r4, [r0, #12]
 8006b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	b151      	cbz	r1, 8006b22 <_dtoa_r+0x52>
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4093      	lsls	r3, r2
 8006b12:	604a      	str	r2, [r1, #4]
 8006b14:	608b      	str	r3, [r1, #8]
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 ff40 	bl	800799c <_Bfree>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	1e3b      	subs	r3, r7, #0
 8006b24:	bfaf      	iteee	ge
 8006b26:	2300      	movge	r3, #0
 8006b28:	2201      	movlt	r2, #1
 8006b2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b2e:	9305      	strlt	r3, [sp, #20]
 8006b30:	bfa8      	it	ge
 8006b32:	f8c8 3000 	strge.w	r3, [r8]
 8006b36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006b3a:	4b99      	ldr	r3, [pc, #612]	; (8006da0 <_dtoa_r+0x2d0>)
 8006b3c:	bfb8      	it	lt
 8006b3e:	f8c8 2000 	strlt.w	r2, [r8]
 8006b42:	ea33 0309 	bics.w	r3, r3, r9
 8006b46:	d119      	bne.n	8006b7c <_dtoa_r+0xac>
 8006b48:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006b54:	4333      	orrs	r3, r6
 8006b56:	f000 857f 	beq.w	8007658 <_dtoa_r+0xb88>
 8006b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b5c:	b953      	cbnz	r3, 8006b74 <_dtoa_r+0xa4>
 8006b5e:	4b91      	ldr	r3, [pc, #580]	; (8006da4 <_dtoa_r+0x2d4>)
 8006b60:	e022      	b.n	8006ba8 <_dtoa_r+0xd8>
 8006b62:	4b91      	ldr	r3, [pc, #580]	; (8006da8 <_dtoa_r+0x2d8>)
 8006b64:	9303      	str	r3, [sp, #12]
 8006b66:	3308      	adds	r3, #8
 8006b68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	9803      	ldr	r0, [sp, #12]
 8006b6e:	b019      	add	sp, #100	; 0x64
 8006b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b74:	4b8b      	ldr	r3, [pc, #556]	; (8006da4 <_dtoa_r+0x2d4>)
 8006b76:	9303      	str	r3, [sp, #12]
 8006b78:	3303      	adds	r3, #3
 8006b7a:	e7f5      	b.n	8006b68 <_dtoa_r+0x98>
 8006b7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f7f9 ff0c 	bl	80009a8 <__aeabi_dcmpeq>
 8006b90:	4680      	mov	r8, r0
 8006b92:	b158      	cbz	r0, 8006bac <_dtoa_r+0xdc>
 8006b94:	2301      	movs	r3, #1
 8006b96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8558 	beq.w	8007652 <_dtoa_r+0xb82>
 8006ba2:	4882      	ldr	r0, [pc, #520]	; (8006dac <_dtoa_r+0x2dc>)
 8006ba4:	6018      	str	r0, [r3, #0]
 8006ba6:	1e43      	subs	r3, r0, #1
 8006ba8:	9303      	str	r3, [sp, #12]
 8006baa:	e7df      	b.n	8006b6c <_dtoa_r+0x9c>
 8006bac:	ab16      	add	r3, sp, #88	; 0x58
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	ab17      	add	r3, sp, #92	; 0x5c
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006bba:	f001 f9d5 	bl	8007f68 <__d2b>
 8006bbe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006bc2:	4683      	mov	fp, r0
 8006bc4:	2c00      	cmp	r4, #0
 8006bc6:	d07f      	beq.n	8006cc8 <_dtoa_r+0x1f8>
 8006bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006bd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bd6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006bda:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006bde:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006be2:	2200      	movs	r2, #0
 8006be4:	4b72      	ldr	r3, [pc, #456]	; (8006db0 <_dtoa_r+0x2e0>)
 8006be6:	f7f9 fabf 	bl	8000168 <__aeabi_dsub>
 8006bea:	a365      	add	r3, pc, #404	; (adr r3, 8006d80 <_dtoa_r+0x2b0>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fc72 	bl	80004d8 <__aeabi_dmul>
 8006bf4:	a364      	add	r3, pc, #400	; (adr r3, 8006d88 <_dtoa_r+0x2b8>)
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f7f9 fab7 	bl	800016c <__adddf3>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	4620      	mov	r0, r4
 8006c02:	460f      	mov	r7, r1
 8006c04:	f7f9 fbfe 	bl	8000404 <__aeabi_i2d>
 8006c08:	a361      	add	r3, pc, #388	; (adr r3, 8006d90 <_dtoa_r+0x2c0>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 fc63 	bl	80004d8 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4630      	mov	r0, r6
 8006c18:	4639      	mov	r1, r7
 8006c1a:	f7f9 faa7 	bl	800016c <__adddf3>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	f7f9 ff09 	bl	8000a38 <__aeabi_d2iz>
 8006c26:	2200      	movs	r2, #0
 8006c28:	4682      	mov	sl, r0
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f7f9 fec4 	bl	80009bc <__aeabi_dcmplt>
 8006c34:	b148      	cbz	r0, 8006c4a <_dtoa_r+0x17a>
 8006c36:	4650      	mov	r0, sl
 8006c38:	f7f9 fbe4 	bl	8000404 <__aeabi_i2d>
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	463b      	mov	r3, r7
 8006c40:	f7f9 feb2 	bl	80009a8 <__aeabi_dcmpeq>
 8006c44:	b908      	cbnz	r0, 8006c4a <_dtoa_r+0x17a>
 8006c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c4a:	f1ba 0f16 	cmp.w	sl, #22
 8006c4e:	d858      	bhi.n	8006d02 <_dtoa_r+0x232>
 8006c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c54:	4b57      	ldr	r3, [pc, #348]	; (8006db4 <_dtoa_r+0x2e4>)
 8006c56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fead 	bl	80009bc <__aeabi_dcmplt>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d04f      	beq.n	8006d06 <_dtoa_r+0x236>
 8006c66:	2300      	movs	r3, #0
 8006c68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c70:	1b1c      	subs	r4, r3, r4
 8006c72:	1e63      	subs	r3, r4, #1
 8006c74:	9309      	str	r3, [sp, #36]	; 0x24
 8006c76:	bf49      	itett	mi
 8006c78:	f1c4 0301 	rsbmi	r3, r4, #1
 8006c7c:	2300      	movpl	r3, #0
 8006c7e:	9306      	strmi	r3, [sp, #24]
 8006c80:	2300      	movmi	r3, #0
 8006c82:	bf54      	ite	pl
 8006c84:	9306      	strpl	r3, [sp, #24]
 8006c86:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006c88:	f1ba 0f00 	cmp.w	sl, #0
 8006c8c:	db3d      	blt.n	8006d0a <_dtoa_r+0x23a>
 8006c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c90:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006c94:	4453      	add	r3, sl
 8006c96:	9309      	str	r3, [sp, #36]	; 0x24
 8006c98:	2300      	movs	r3, #0
 8006c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c9e:	2b09      	cmp	r3, #9
 8006ca0:	f200 808c 	bhi.w	8006dbc <_dtoa_r+0x2ec>
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	bfc4      	itt	gt
 8006ca8:	3b04      	subgt	r3, #4
 8006caa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cae:	bfc8      	it	gt
 8006cb0:	2400      	movgt	r4, #0
 8006cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8006cb6:	bfd8      	it	le
 8006cb8:	2401      	movle	r4, #1
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	f200 808a 	bhi.w	8006dd4 <_dtoa_r+0x304>
 8006cc0:	e8df f003 	tbb	[pc, r3]
 8006cc4:	5b4d4f2d 	.word	0x5b4d4f2d
 8006cc8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006ccc:	441c      	add	r4, r3
 8006cce:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	bfc3      	ittte	gt
 8006cd6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cda:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006cde:	fa09 f303 	lslgt.w	r3, r9, r3
 8006ce2:	f1c3 0320 	rsble	r3, r3, #32
 8006ce6:	bfc6      	itte	gt
 8006ce8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cec:	4318      	orrgt	r0, r3
 8006cee:	fa06 f003 	lslle.w	r0, r6, r3
 8006cf2:	f7f9 fb77 	bl	80003e4 <__aeabi_ui2d>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006cfc:	3c01      	subs	r4, #1
 8006cfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d00:	e76f      	b.n	8006be2 <_dtoa_r+0x112>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e7b2      	b.n	8006c6c <_dtoa_r+0x19c>
 8006d06:	900f      	str	r0, [sp, #60]	; 0x3c
 8006d08:	e7b1      	b.n	8006c6e <_dtoa_r+0x19e>
 8006d0a:	9b06      	ldr	r3, [sp, #24]
 8006d0c:	eba3 030a 	sub.w	r3, r3, sl
 8006d10:	9306      	str	r3, [sp, #24]
 8006d12:	f1ca 0300 	rsb	r3, sl, #0
 8006d16:	930a      	str	r3, [sp, #40]	; 0x28
 8006d18:	2300      	movs	r3, #0
 8006d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8006d1c:	e7be      	b.n	8006c9c <_dtoa_r+0x1cc>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dc58      	bgt.n	8006dda <_dtoa_r+0x30a>
 8006d28:	f04f 0901 	mov.w	r9, #1
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006d32:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006d36:	2200      	movs	r2, #0
 8006d38:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006d3a:	6042      	str	r2, [r0, #4]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	f102 0614 	add.w	r6, r2, #20
 8006d42:	429e      	cmp	r6, r3
 8006d44:	6841      	ldr	r1, [r0, #4]
 8006d46:	d94e      	bls.n	8006de6 <_dtoa_r+0x316>
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 fde7 	bl	800791c <_Balloc>
 8006d4e:	9003      	str	r0, [sp, #12]
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d14c      	bne.n	8006dee <_dtoa_r+0x31e>
 8006d54:	4602      	mov	r2, r0
 8006d56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d5a:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <_dtoa_r+0x2e8>)
 8006d5c:	e6cc      	b.n	8006af8 <_dtoa_r+0x28>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e7de      	b.n	8006d20 <_dtoa_r+0x250>
 8006d62:	2300      	movs	r3, #0
 8006d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d68:	eb0a 0903 	add.w	r9, sl, r3
 8006d6c:	f109 0301 	add.w	r3, r9, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	9308      	str	r3, [sp, #32]
 8006d74:	bfb8      	it	lt
 8006d76:	2301      	movlt	r3, #1
 8006d78:	e7dd      	b.n	8006d36 <_dtoa_r+0x266>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e7f2      	b.n	8006d64 <_dtoa_r+0x294>
 8006d7e:	bf00      	nop
 8006d80:	636f4361 	.word	0x636f4361
 8006d84:	3fd287a7 	.word	0x3fd287a7
 8006d88:	8b60c8b3 	.word	0x8b60c8b3
 8006d8c:	3fc68a28 	.word	0x3fc68a28
 8006d90:	509f79fb 	.word	0x509f79fb
 8006d94:	3fd34413 	.word	0x3fd34413
 8006d98:	0800a953 	.word	0x0800a953
 8006d9c:	0800a96a 	.word	0x0800a96a
 8006da0:	7ff00000 	.word	0x7ff00000
 8006da4:	0800a94f 	.word	0x0800a94f
 8006da8:	0800a946 	.word	0x0800a946
 8006dac:	0800abaa 	.word	0x0800abaa
 8006db0:	3ff80000 	.word	0x3ff80000
 8006db4:	0800aac0 	.word	0x0800aac0
 8006db8:	0800a9c5 	.word	0x0800a9c5
 8006dbc:	2401      	movs	r4, #1
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006dc2:	9322      	str	r3, [sp, #136]	; 0x88
 8006dc4:	f04f 39ff 	mov.w	r9, #4294967295
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2312      	movs	r3, #18
 8006dcc:	f8cd 9020 	str.w	r9, [sp, #32]
 8006dd0:	9223      	str	r2, [sp, #140]	; 0x8c
 8006dd2:	e7b0      	b.n	8006d36 <_dtoa_r+0x266>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dd8:	e7f4      	b.n	8006dc4 <_dtoa_r+0x2f4>
 8006dda:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006dde:	464b      	mov	r3, r9
 8006de0:	f8cd 9020 	str.w	r9, [sp, #32]
 8006de4:	e7a7      	b.n	8006d36 <_dtoa_r+0x266>
 8006de6:	3101      	adds	r1, #1
 8006de8:	6041      	str	r1, [r0, #4]
 8006dea:	0052      	lsls	r2, r2, #1
 8006dec:	e7a7      	b.n	8006d3e <_dtoa_r+0x26e>
 8006dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006df0:	9a03      	ldr	r2, [sp, #12]
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	9b08      	ldr	r3, [sp, #32]
 8006df6:	2b0e      	cmp	r3, #14
 8006df8:	f200 80a8 	bhi.w	8006f4c <_dtoa_r+0x47c>
 8006dfc:	2c00      	cmp	r4, #0
 8006dfe:	f000 80a5 	beq.w	8006f4c <_dtoa_r+0x47c>
 8006e02:	f1ba 0f00 	cmp.w	sl, #0
 8006e06:	dd34      	ble.n	8006e72 <_dtoa_r+0x3a2>
 8006e08:	4a9a      	ldr	r2, [pc, #616]	; (8007074 <_dtoa_r+0x5a4>)
 8006e0a:	f00a 030f 	and.w	r3, sl, #15
 8006e0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e12:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006e16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006e1e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006e22:	d016      	beq.n	8006e52 <_dtoa_r+0x382>
 8006e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e28:	4b93      	ldr	r3, [pc, #588]	; (8007078 <_dtoa_r+0x5a8>)
 8006e2a:	2703      	movs	r7, #3
 8006e2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e30:	f7f9 fc7c 	bl	800072c <__aeabi_ddiv>
 8006e34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e38:	f004 040f 	and.w	r4, r4, #15
 8006e3c:	4e8e      	ldr	r6, [pc, #568]	; (8007078 <_dtoa_r+0x5a8>)
 8006e3e:	b954      	cbnz	r4, 8006e56 <_dtoa_r+0x386>
 8006e40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e48:	f7f9 fc70 	bl	800072c <__aeabi_ddiv>
 8006e4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e50:	e029      	b.n	8006ea6 <_dtoa_r+0x3d6>
 8006e52:	2702      	movs	r7, #2
 8006e54:	e7f2      	b.n	8006e3c <_dtoa_r+0x36c>
 8006e56:	07e1      	lsls	r1, r4, #31
 8006e58:	d508      	bpl.n	8006e6c <_dtoa_r+0x39c>
 8006e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e62:	f7f9 fb39 	bl	80004d8 <__aeabi_dmul>
 8006e66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e6a:	3701      	adds	r7, #1
 8006e6c:	1064      	asrs	r4, r4, #1
 8006e6e:	3608      	adds	r6, #8
 8006e70:	e7e5      	b.n	8006e3e <_dtoa_r+0x36e>
 8006e72:	f000 80a5 	beq.w	8006fc0 <_dtoa_r+0x4f0>
 8006e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e7a:	f1ca 0400 	rsb	r4, sl, #0
 8006e7e:	4b7d      	ldr	r3, [pc, #500]	; (8007074 <_dtoa_r+0x5a4>)
 8006e80:	f004 020f 	and.w	r2, r4, #15
 8006e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7f9 fb24 	bl	80004d8 <__aeabi_dmul>
 8006e90:	2702      	movs	r7, #2
 8006e92:	2300      	movs	r3, #0
 8006e94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e98:	4e77      	ldr	r6, [pc, #476]	; (8007078 <_dtoa_r+0x5a8>)
 8006e9a:	1124      	asrs	r4, r4, #4
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	f040 8084 	bne.w	8006faa <_dtoa_r+0x4da>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1d2      	bne.n	8006e4c <_dtoa_r+0x37c>
 8006ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 808b 	beq.w	8006fc4 <_dtoa_r+0x4f4>
 8006eae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006eb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006eb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4b6f      	ldr	r3, [pc, #444]	; (800707c <_dtoa_r+0x5ac>)
 8006ebe:	f7f9 fd7d 	bl	80009bc <__aeabi_dcmplt>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d07e      	beq.n	8006fc4 <_dtoa_r+0x4f4>
 8006ec6:	9b08      	ldr	r3, [sp, #32]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d07b      	beq.n	8006fc4 <_dtoa_r+0x4f4>
 8006ecc:	f1b9 0f00 	cmp.w	r9, #0
 8006ed0:	dd38      	ble.n	8006f44 <_dtoa_r+0x474>
 8006ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	4b69      	ldr	r3, [pc, #420]	; (8007080 <_dtoa_r+0x5b0>)
 8006eda:	f7f9 fafd 	bl	80004d8 <__aeabi_dmul>
 8006ede:	464c      	mov	r4, r9
 8006ee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ee4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006ee8:	3701      	adds	r7, #1
 8006eea:	4638      	mov	r0, r7
 8006eec:	f7f9 fa8a 	bl	8000404 <__aeabi_i2d>
 8006ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ef4:	f7f9 faf0 	bl	80004d8 <__aeabi_dmul>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b62      	ldr	r3, [pc, #392]	; (8007084 <_dtoa_r+0x5b4>)
 8006efc:	f7f9 f936 	bl	800016c <__adddf3>
 8006f00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006f04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f08:	9611      	str	r6, [sp, #68]	; 0x44
 8006f0a:	2c00      	cmp	r4, #0
 8006f0c:	d15d      	bne.n	8006fca <_dtoa_r+0x4fa>
 8006f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f12:	2200      	movs	r2, #0
 8006f14:	4b5c      	ldr	r3, [pc, #368]	; (8007088 <_dtoa_r+0x5b8>)
 8006f16:	f7f9 f927 	bl	8000168 <__aeabi_dsub>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f22:	4633      	mov	r3, r6
 8006f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f26:	f7f9 fd67 	bl	80009f8 <__aeabi_dcmpgt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f040 829c 	bne.w	8007468 <_dtoa_r+0x998>
 8006f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006f3a:	f7f9 fd3f 	bl	80009bc <__aeabi_dcmplt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	f040 8290 	bne.w	8007464 <_dtoa_r+0x994>
 8006f44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006f48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f2c0 8152 	blt.w	80071f8 <_dtoa_r+0x728>
 8006f54:	f1ba 0f0e 	cmp.w	sl, #14
 8006f58:	f300 814e 	bgt.w	80071f8 <_dtoa_r+0x728>
 8006f5c:	4b45      	ldr	r3, [pc, #276]	; (8007074 <_dtoa_r+0x5a4>)
 8006f5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006f6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f280 80db 	bge.w	8007128 <_dtoa_r+0x658>
 8006f72:	9b08      	ldr	r3, [sp, #32]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f300 80d7 	bgt.w	8007128 <_dtoa_r+0x658>
 8006f7a:	f040 8272 	bne.w	8007462 <_dtoa_r+0x992>
 8006f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f82:	2200      	movs	r2, #0
 8006f84:	4b40      	ldr	r3, [pc, #256]	; (8007088 <_dtoa_r+0x5b8>)
 8006f86:	f7f9 faa7 	bl	80004d8 <__aeabi_dmul>
 8006f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f8e:	f7f9 fd29 	bl	80009e4 <__aeabi_dcmpge>
 8006f92:	9c08      	ldr	r4, [sp, #32]
 8006f94:	4626      	mov	r6, r4
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f040 8248 	bne.w	800742c <_dtoa_r+0x95c>
 8006f9c:	2331      	movs	r3, #49	; 0x31
 8006f9e:	9f03      	ldr	r7, [sp, #12]
 8006fa0:	f10a 0a01 	add.w	sl, sl, #1
 8006fa4:	f807 3b01 	strb.w	r3, [r7], #1
 8006fa8:	e244      	b.n	8007434 <_dtoa_r+0x964>
 8006faa:	07e2      	lsls	r2, r4, #31
 8006fac:	d505      	bpl.n	8006fba <_dtoa_r+0x4ea>
 8006fae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fb2:	f7f9 fa91 	bl	80004d8 <__aeabi_dmul>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	3701      	adds	r7, #1
 8006fba:	1064      	asrs	r4, r4, #1
 8006fbc:	3608      	adds	r6, #8
 8006fbe:	e76d      	b.n	8006e9c <_dtoa_r+0x3cc>
 8006fc0:	2702      	movs	r7, #2
 8006fc2:	e770      	b.n	8006ea6 <_dtoa_r+0x3d6>
 8006fc4:	46d0      	mov	r8, sl
 8006fc6:	9c08      	ldr	r4, [sp, #32]
 8006fc8:	e78f      	b.n	8006eea <_dtoa_r+0x41a>
 8006fca:	9903      	ldr	r1, [sp, #12]
 8006fcc:	4b29      	ldr	r3, [pc, #164]	; (8007074 <_dtoa_r+0x5a4>)
 8006fce:	4421      	add	r1, r4
 8006fd0:	9112      	str	r1, [sp, #72]	; 0x48
 8006fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fd8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006fdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	d055      	beq.n	8007090 <_dtoa_r+0x5c0>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	4929      	ldr	r1, [pc, #164]	; (800708c <_dtoa_r+0x5bc>)
 8006fe8:	f7f9 fba0 	bl	800072c <__aeabi_ddiv>
 8006fec:	463b      	mov	r3, r7
 8006fee:	4632      	mov	r2, r6
 8006ff0:	f7f9 f8ba 	bl	8000168 <__aeabi_dsub>
 8006ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ff8:	9f03      	ldr	r7, [sp, #12]
 8006ffa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ffe:	f7f9 fd1b 	bl	8000a38 <__aeabi_d2iz>
 8007002:	4604      	mov	r4, r0
 8007004:	f7f9 f9fe 	bl	8000404 <__aeabi_i2d>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007010:	f7f9 f8aa 	bl	8000168 <__aeabi_dsub>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	3430      	adds	r4, #48	; 0x30
 800701a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800701e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007022:	f807 4b01 	strb.w	r4, [r7], #1
 8007026:	f7f9 fcc9 	bl	80009bc <__aeabi_dcmplt>
 800702a:	2800      	cmp	r0, #0
 800702c:	d174      	bne.n	8007118 <_dtoa_r+0x648>
 800702e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007032:	2000      	movs	r0, #0
 8007034:	4911      	ldr	r1, [pc, #68]	; (800707c <_dtoa_r+0x5ac>)
 8007036:	f7f9 f897 	bl	8000168 <__aeabi_dsub>
 800703a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800703e:	f7f9 fcbd 	bl	80009bc <__aeabi_dcmplt>
 8007042:	2800      	cmp	r0, #0
 8007044:	f040 80b7 	bne.w	80071b6 <_dtoa_r+0x6e6>
 8007048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800704a:	429f      	cmp	r7, r3
 800704c:	f43f af7a 	beq.w	8006f44 <_dtoa_r+0x474>
 8007050:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007054:	2200      	movs	r2, #0
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <_dtoa_r+0x5b0>)
 8007058:	f7f9 fa3e 	bl	80004d8 <__aeabi_dmul>
 800705c:	2200      	movs	r2, #0
 800705e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <_dtoa_r+0x5b0>)
 8007068:	f7f9 fa36 	bl	80004d8 <__aeabi_dmul>
 800706c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007070:	e7c3      	b.n	8006ffa <_dtoa_r+0x52a>
 8007072:	bf00      	nop
 8007074:	0800aac0 	.word	0x0800aac0
 8007078:	0800aa98 	.word	0x0800aa98
 800707c:	3ff00000 	.word	0x3ff00000
 8007080:	40240000 	.word	0x40240000
 8007084:	401c0000 	.word	0x401c0000
 8007088:	40140000 	.word	0x40140000
 800708c:	3fe00000 	.word	0x3fe00000
 8007090:	4630      	mov	r0, r6
 8007092:	4639      	mov	r1, r7
 8007094:	f7f9 fa20 	bl	80004d8 <__aeabi_dmul>
 8007098:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800709a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800709e:	9c03      	ldr	r4, [sp, #12]
 80070a0:	9314      	str	r3, [sp, #80]	; 0x50
 80070a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a6:	f7f9 fcc7 	bl	8000a38 <__aeabi_d2iz>
 80070aa:	9015      	str	r0, [sp, #84]	; 0x54
 80070ac:	f7f9 f9aa 	bl	8000404 <__aeabi_i2d>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070b8:	f7f9 f856 	bl	8000168 <__aeabi_dsub>
 80070bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070be:	4606      	mov	r6, r0
 80070c0:	3330      	adds	r3, #48	; 0x30
 80070c2:	f804 3b01 	strb.w	r3, [r4], #1
 80070c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070c8:	460f      	mov	r7, r1
 80070ca:	429c      	cmp	r4, r3
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	d124      	bne.n	800711c <_dtoa_r+0x64c>
 80070d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070d6:	4bb0      	ldr	r3, [pc, #704]	; (8007398 <_dtoa_r+0x8c8>)
 80070d8:	f7f9 f848 	bl	800016c <__adddf3>
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 fc88 	bl	80009f8 <__aeabi_dcmpgt>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d163      	bne.n	80071b4 <_dtoa_r+0x6e4>
 80070ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070f0:	2000      	movs	r0, #0
 80070f2:	49a9      	ldr	r1, [pc, #676]	; (8007398 <_dtoa_r+0x8c8>)
 80070f4:	f7f9 f838 	bl	8000168 <__aeabi_dsub>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4630      	mov	r0, r6
 80070fe:	4639      	mov	r1, r7
 8007100:	f7f9 fc5c 	bl	80009bc <__aeabi_dcmplt>
 8007104:	2800      	cmp	r0, #0
 8007106:	f43f af1d 	beq.w	8006f44 <_dtoa_r+0x474>
 800710a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800710c:	1e7b      	subs	r3, r7, #1
 800710e:	9314      	str	r3, [sp, #80]	; 0x50
 8007110:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007114:	2b30      	cmp	r3, #48	; 0x30
 8007116:	d0f8      	beq.n	800710a <_dtoa_r+0x63a>
 8007118:	46c2      	mov	sl, r8
 800711a:	e03b      	b.n	8007194 <_dtoa_r+0x6c4>
 800711c:	4b9f      	ldr	r3, [pc, #636]	; (800739c <_dtoa_r+0x8cc>)
 800711e:	f7f9 f9db 	bl	80004d8 <__aeabi_dmul>
 8007122:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007126:	e7bc      	b.n	80070a2 <_dtoa_r+0x5d2>
 8007128:	9f03      	ldr	r7, [sp, #12]
 800712a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800712e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007132:	4640      	mov	r0, r8
 8007134:	4649      	mov	r1, r9
 8007136:	f7f9 faf9 	bl	800072c <__aeabi_ddiv>
 800713a:	f7f9 fc7d 	bl	8000a38 <__aeabi_d2iz>
 800713e:	4604      	mov	r4, r0
 8007140:	f7f9 f960 	bl	8000404 <__aeabi_i2d>
 8007144:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007148:	f7f9 f9c6 	bl	80004d8 <__aeabi_dmul>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	f7f9 f808 	bl	8000168 <__aeabi_dsub>
 8007158:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800715c:	f807 6b01 	strb.w	r6, [r7], #1
 8007160:	9e03      	ldr	r6, [sp, #12]
 8007162:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007166:	1bbe      	subs	r6, r7, r6
 8007168:	45b4      	cmp	ip, r6
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	d136      	bne.n	80071de <_dtoa_r+0x70e>
 8007170:	f7f8 fffc 	bl	800016c <__adddf3>
 8007174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007178:	4680      	mov	r8, r0
 800717a:	4689      	mov	r9, r1
 800717c:	f7f9 fc3c 	bl	80009f8 <__aeabi_dcmpgt>
 8007180:	bb58      	cbnz	r0, 80071da <_dtoa_r+0x70a>
 8007182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007186:	4640      	mov	r0, r8
 8007188:	4649      	mov	r1, r9
 800718a:	f7f9 fc0d 	bl	80009a8 <__aeabi_dcmpeq>
 800718e:	b108      	cbz	r0, 8007194 <_dtoa_r+0x6c4>
 8007190:	07e1      	lsls	r1, r4, #31
 8007192:	d422      	bmi.n	80071da <_dtoa_r+0x70a>
 8007194:	4628      	mov	r0, r5
 8007196:	4659      	mov	r1, fp
 8007198:	f000 fc00 	bl	800799c <_Bfree>
 800719c:	2300      	movs	r3, #0
 800719e:	703b      	strb	r3, [r7, #0]
 80071a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80071a2:	f10a 0001 	add.w	r0, sl, #1
 80071a6:	6018      	str	r0, [r3, #0]
 80071a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f43f acde 	beq.w	8006b6c <_dtoa_r+0x9c>
 80071b0:	601f      	str	r7, [r3, #0]
 80071b2:	e4db      	b.n	8006b6c <_dtoa_r+0x9c>
 80071b4:	4627      	mov	r7, r4
 80071b6:	463b      	mov	r3, r7
 80071b8:	461f      	mov	r7, r3
 80071ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071be:	2a39      	cmp	r2, #57	; 0x39
 80071c0:	d107      	bne.n	80071d2 <_dtoa_r+0x702>
 80071c2:	9a03      	ldr	r2, [sp, #12]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d1f7      	bne.n	80071b8 <_dtoa_r+0x6e8>
 80071c8:	2230      	movs	r2, #48	; 0x30
 80071ca:	9903      	ldr	r1, [sp, #12]
 80071cc:	f108 0801 	add.w	r8, r8, #1
 80071d0:	700a      	strb	r2, [r1, #0]
 80071d2:	781a      	ldrb	r2, [r3, #0]
 80071d4:	3201      	adds	r2, #1
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	e79e      	b.n	8007118 <_dtoa_r+0x648>
 80071da:	46d0      	mov	r8, sl
 80071dc:	e7eb      	b.n	80071b6 <_dtoa_r+0x6e6>
 80071de:	2200      	movs	r2, #0
 80071e0:	4b6e      	ldr	r3, [pc, #440]	; (800739c <_dtoa_r+0x8cc>)
 80071e2:	f7f9 f979 	bl	80004d8 <__aeabi_dmul>
 80071e6:	2200      	movs	r2, #0
 80071e8:	2300      	movs	r3, #0
 80071ea:	4680      	mov	r8, r0
 80071ec:	4689      	mov	r9, r1
 80071ee:	f7f9 fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d09b      	beq.n	800712e <_dtoa_r+0x65e>
 80071f6:	e7cd      	b.n	8007194 <_dtoa_r+0x6c4>
 80071f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	f000 80d0 	beq.w	80073a0 <_dtoa_r+0x8d0>
 8007200:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007202:	2a01      	cmp	r2, #1
 8007204:	f300 80ae 	bgt.w	8007364 <_dtoa_r+0x894>
 8007208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800720a:	2a00      	cmp	r2, #0
 800720c:	f000 80a6 	beq.w	800735c <_dtoa_r+0x88c>
 8007210:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007214:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007216:	9f06      	ldr	r7, [sp, #24]
 8007218:	9a06      	ldr	r2, [sp, #24]
 800721a:	2101      	movs	r1, #1
 800721c:	441a      	add	r2, r3
 800721e:	9206      	str	r2, [sp, #24]
 8007220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007222:	4628      	mov	r0, r5
 8007224:	441a      	add	r2, r3
 8007226:	9209      	str	r2, [sp, #36]	; 0x24
 8007228:	f000 fc6e 	bl	8007b08 <__i2b>
 800722c:	4606      	mov	r6, r0
 800722e:	2f00      	cmp	r7, #0
 8007230:	dd0c      	ble.n	800724c <_dtoa_r+0x77c>
 8007232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	dd09      	ble.n	800724c <_dtoa_r+0x77c>
 8007238:	42bb      	cmp	r3, r7
 800723a:	bfa8      	it	ge
 800723c:	463b      	movge	r3, r7
 800723e:	9a06      	ldr	r2, [sp, #24]
 8007240:	1aff      	subs	r7, r7, r3
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	9206      	str	r2, [sp, #24]
 8007246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	9309      	str	r3, [sp, #36]	; 0x24
 800724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724e:	b1f3      	cbz	r3, 800728e <_dtoa_r+0x7be>
 8007250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80a8 	beq.w	80073a8 <_dtoa_r+0x8d8>
 8007258:	2c00      	cmp	r4, #0
 800725a:	dd10      	ble.n	800727e <_dtoa_r+0x7ae>
 800725c:	4631      	mov	r1, r6
 800725e:	4622      	mov	r2, r4
 8007260:	4628      	mov	r0, r5
 8007262:	f000 fd0f 	bl	8007c84 <__pow5mult>
 8007266:	465a      	mov	r2, fp
 8007268:	4601      	mov	r1, r0
 800726a:	4606      	mov	r6, r0
 800726c:	4628      	mov	r0, r5
 800726e:	f000 fc61 	bl	8007b34 <__multiply>
 8007272:	4680      	mov	r8, r0
 8007274:	4659      	mov	r1, fp
 8007276:	4628      	mov	r0, r5
 8007278:	f000 fb90 	bl	800799c <_Bfree>
 800727c:	46c3      	mov	fp, r8
 800727e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007280:	1b1a      	subs	r2, r3, r4
 8007282:	d004      	beq.n	800728e <_dtoa_r+0x7be>
 8007284:	4659      	mov	r1, fp
 8007286:	4628      	mov	r0, r5
 8007288:	f000 fcfc 	bl	8007c84 <__pow5mult>
 800728c:	4683      	mov	fp, r0
 800728e:	2101      	movs	r1, #1
 8007290:	4628      	mov	r0, r5
 8007292:	f000 fc39 	bl	8007b08 <__i2b>
 8007296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007298:	4604      	mov	r4, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	f340 8086 	ble.w	80073ac <_dtoa_r+0x8dc>
 80072a0:	461a      	mov	r2, r3
 80072a2:	4601      	mov	r1, r0
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 fced 	bl	8007c84 <__pow5mult>
 80072aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ac:	4604      	mov	r4, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	dd7f      	ble.n	80073b2 <_dtoa_r+0x8e2>
 80072b2:	f04f 0800 	mov.w	r8, #0
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072bc:	6918      	ldr	r0, [r3, #16]
 80072be:	f000 fbd5 	bl	8007a6c <__hi0bits>
 80072c2:	f1c0 0020 	rsb	r0, r0, #32
 80072c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c8:	4418      	add	r0, r3
 80072ca:	f010 001f 	ands.w	r0, r0, #31
 80072ce:	f000 8092 	beq.w	80073f6 <_dtoa_r+0x926>
 80072d2:	f1c0 0320 	rsb	r3, r0, #32
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	f340 808a 	ble.w	80073f0 <_dtoa_r+0x920>
 80072dc:	f1c0 001c 	rsb	r0, r0, #28
 80072e0:	9b06      	ldr	r3, [sp, #24]
 80072e2:	4407      	add	r7, r0
 80072e4:	4403      	add	r3, r0
 80072e6:	9306      	str	r3, [sp, #24]
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	4403      	add	r3, r0
 80072ec:	9309      	str	r3, [sp, #36]	; 0x24
 80072ee:	9b06      	ldr	r3, [sp, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dd05      	ble.n	8007300 <_dtoa_r+0x830>
 80072f4:	4659      	mov	r1, fp
 80072f6:	461a      	mov	r2, r3
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 fd1d 	bl	8007d38 <__lshift>
 80072fe:	4683      	mov	fp, r0
 8007300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007302:	2b00      	cmp	r3, #0
 8007304:	dd05      	ble.n	8007312 <_dtoa_r+0x842>
 8007306:	4621      	mov	r1, r4
 8007308:	461a      	mov	r2, r3
 800730a:	4628      	mov	r0, r5
 800730c:	f000 fd14 	bl	8007d38 <__lshift>
 8007310:	4604      	mov	r4, r0
 8007312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d070      	beq.n	80073fa <_dtoa_r+0x92a>
 8007318:	4621      	mov	r1, r4
 800731a:	4658      	mov	r0, fp
 800731c:	f000 fd7c 	bl	8007e18 <__mcmp>
 8007320:	2800      	cmp	r0, #0
 8007322:	da6a      	bge.n	80073fa <_dtoa_r+0x92a>
 8007324:	2300      	movs	r3, #0
 8007326:	4659      	mov	r1, fp
 8007328:	220a      	movs	r2, #10
 800732a:	4628      	mov	r0, r5
 800732c:	f000 fb58 	bl	80079e0 <__multadd>
 8007330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007332:	4683      	mov	fp, r0
 8007334:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8194 	beq.w	8007666 <_dtoa_r+0xb96>
 800733e:	4631      	mov	r1, r6
 8007340:	2300      	movs	r3, #0
 8007342:	220a      	movs	r2, #10
 8007344:	4628      	mov	r0, r5
 8007346:	f000 fb4b 	bl	80079e0 <__multadd>
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	4606      	mov	r6, r0
 8007350:	f300 8093 	bgt.w	800747a <_dtoa_r+0x9aa>
 8007354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007356:	2b02      	cmp	r3, #2
 8007358:	dc57      	bgt.n	800740a <_dtoa_r+0x93a>
 800735a:	e08e      	b.n	800747a <_dtoa_r+0x9aa>
 800735c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800735e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007362:	e757      	b.n	8007214 <_dtoa_r+0x744>
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	1e5c      	subs	r4, r3, #1
 8007368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800736a:	42a3      	cmp	r3, r4
 800736c:	bfb7      	itett	lt
 800736e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007370:	1b1c      	subge	r4, r3, r4
 8007372:	1ae2      	sublt	r2, r4, r3
 8007374:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007376:	bfbe      	ittt	lt
 8007378:	940a      	strlt	r4, [sp, #40]	; 0x28
 800737a:	189b      	addlt	r3, r3, r2
 800737c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800737e:	9b08      	ldr	r3, [sp, #32]
 8007380:	bfb8      	it	lt
 8007382:	2400      	movlt	r4, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfbb      	ittet	lt
 8007388:	9b06      	ldrlt	r3, [sp, #24]
 800738a:	9a08      	ldrlt	r2, [sp, #32]
 800738c:	9f06      	ldrge	r7, [sp, #24]
 800738e:	1a9f      	sublt	r7, r3, r2
 8007390:	bfac      	ite	ge
 8007392:	9b08      	ldrge	r3, [sp, #32]
 8007394:	2300      	movlt	r3, #0
 8007396:	e73f      	b.n	8007218 <_dtoa_r+0x748>
 8007398:	3fe00000 	.word	0x3fe00000
 800739c:	40240000 	.word	0x40240000
 80073a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80073a2:	9f06      	ldr	r7, [sp, #24]
 80073a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80073a6:	e742      	b.n	800722e <_dtoa_r+0x75e>
 80073a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073aa:	e76b      	b.n	8007284 <_dtoa_r+0x7b4>
 80073ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	dc19      	bgt.n	80073e6 <_dtoa_r+0x916>
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	b9bb      	cbnz	r3, 80073e6 <_dtoa_r+0x916>
 80073b6:	9b05      	ldr	r3, [sp, #20]
 80073b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073bc:	b99b      	cbnz	r3, 80073e6 <_dtoa_r+0x916>
 80073be:	9b05      	ldr	r3, [sp, #20]
 80073c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	0d1b      	lsrs	r3, r3, #20
 80073c6:	051b      	lsls	r3, r3, #20
 80073c8:	b183      	cbz	r3, 80073ec <_dtoa_r+0x91c>
 80073ca:	f04f 0801 	mov.w	r8, #1
 80073ce:	9b06      	ldr	r3, [sp, #24]
 80073d0:	3301      	adds	r3, #1
 80073d2:	9306      	str	r3, [sp, #24]
 80073d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d6:	3301      	adds	r3, #1
 80073d8:	9309      	str	r3, [sp, #36]	; 0x24
 80073da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f47f af6a 	bne.w	80072b6 <_dtoa_r+0x7e6>
 80073e2:	2001      	movs	r0, #1
 80073e4:	e76f      	b.n	80072c6 <_dtoa_r+0x7f6>
 80073e6:	f04f 0800 	mov.w	r8, #0
 80073ea:	e7f6      	b.n	80073da <_dtoa_r+0x90a>
 80073ec:	4698      	mov	r8, r3
 80073ee:	e7f4      	b.n	80073da <_dtoa_r+0x90a>
 80073f0:	f43f af7d 	beq.w	80072ee <_dtoa_r+0x81e>
 80073f4:	4618      	mov	r0, r3
 80073f6:	301c      	adds	r0, #28
 80073f8:	e772      	b.n	80072e0 <_dtoa_r+0x810>
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc36      	bgt.n	800746e <_dtoa_r+0x99e>
 8007400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007402:	2b02      	cmp	r3, #2
 8007404:	dd33      	ble.n	800746e <_dtoa_r+0x99e>
 8007406:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800740a:	f1b9 0f00 	cmp.w	r9, #0
 800740e:	d10d      	bne.n	800742c <_dtoa_r+0x95c>
 8007410:	4621      	mov	r1, r4
 8007412:	464b      	mov	r3, r9
 8007414:	2205      	movs	r2, #5
 8007416:	4628      	mov	r0, r5
 8007418:	f000 fae2 	bl	80079e0 <__multadd>
 800741c:	4601      	mov	r1, r0
 800741e:	4604      	mov	r4, r0
 8007420:	4658      	mov	r0, fp
 8007422:	f000 fcf9 	bl	8007e18 <__mcmp>
 8007426:	2800      	cmp	r0, #0
 8007428:	f73f adb8 	bgt.w	8006f9c <_dtoa_r+0x4cc>
 800742c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800742e:	9f03      	ldr	r7, [sp, #12]
 8007430:	ea6f 0a03 	mvn.w	sl, r3
 8007434:	f04f 0800 	mov.w	r8, #0
 8007438:	4621      	mov	r1, r4
 800743a:	4628      	mov	r0, r5
 800743c:	f000 faae 	bl	800799c <_Bfree>
 8007440:	2e00      	cmp	r6, #0
 8007442:	f43f aea7 	beq.w	8007194 <_dtoa_r+0x6c4>
 8007446:	f1b8 0f00 	cmp.w	r8, #0
 800744a:	d005      	beq.n	8007458 <_dtoa_r+0x988>
 800744c:	45b0      	cmp	r8, r6
 800744e:	d003      	beq.n	8007458 <_dtoa_r+0x988>
 8007450:	4641      	mov	r1, r8
 8007452:	4628      	mov	r0, r5
 8007454:	f000 faa2 	bl	800799c <_Bfree>
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	f000 fa9e 	bl	800799c <_Bfree>
 8007460:	e698      	b.n	8007194 <_dtoa_r+0x6c4>
 8007462:	2400      	movs	r4, #0
 8007464:	4626      	mov	r6, r4
 8007466:	e7e1      	b.n	800742c <_dtoa_r+0x95c>
 8007468:	46c2      	mov	sl, r8
 800746a:	4626      	mov	r6, r4
 800746c:	e596      	b.n	8006f9c <_dtoa_r+0x4cc>
 800746e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007470:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80fd 	beq.w	8007674 <_dtoa_r+0xba4>
 800747a:	2f00      	cmp	r7, #0
 800747c:	dd05      	ble.n	800748a <_dtoa_r+0x9ba>
 800747e:	4631      	mov	r1, r6
 8007480:	463a      	mov	r2, r7
 8007482:	4628      	mov	r0, r5
 8007484:	f000 fc58 	bl	8007d38 <__lshift>
 8007488:	4606      	mov	r6, r0
 800748a:	f1b8 0f00 	cmp.w	r8, #0
 800748e:	d05c      	beq.n	800754a <_dtoa_r+0xa7a>
 8007490:	4628      	mov	r0, r5
 8007492:	6871      	ldr	r1, [r6, #4]
 8007494:	f000 fa42 	bl	800791c <_Balloc>
 8007498:	4607      	mov	r7, r0
 800749a:	b928      	cbnz	r0, 80074a8 <_dtoa_r+0x9d8>
 800749c:	4602      	mov	r2, r0
 800749e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074a2:	4b7f      	ldr	r3, [pc, #508]	; (80076a0 <_dtoa_r+0xbd0>)
 80074a4:	f7ff bb28 	b.w	8006af8 <_dtoa_r+0x28>
 80074a8:	6932      	ldr	r2, [r6, #16]
 80074aa:	f106 010c 	add.w	r1, r6, #12
 80074ae:	3202      	adds	r2, #2
 80074b0:	0092      	lsls	r2, r2, #2
 80074b2:	300c      	adds	r0, #12
 80074b4:	f000 fa18 	bl	80078e8 <memcpy>
 80074b8:	2201      	movs	r2, #1
 80074ba:	4639      	mov	r1, r7
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 fc3b 	bl	8007d38 <__lshift>
 80074c2:	46b0      	mov	r8, r6
 80074c4:	4606      	mov	r6, r0
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	9308      	str	r3, [sp, #32]
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	444b      	add	r3, r9
 80074d0:	930a      	str	r3, [sp, #40]	; 0x28
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	9309      	str	r3, [sp, #36]	; 0x24
 80074da:	9b08      	ldr	r3, [sp, #32]
 80074dc:	4621      	mov	r1, r4
 80074de:	3b01      	subs	r3, #1
 80074e0:	4658      	mov	r0, fp
 80074e2:	9304      	str	r3, [sp, #16]
 80074e4:	f7ff fa66 	bl	80069b4 <quorem>
 80074e8:	4603      	mov	r3, r0
 80074ea:	4641      	mov	r1, r8
 80074ec:	3330      	adds	r3, #48	; 0x30
 80074ee:	9006      	str	r0, [sp, #24]
 80074f0:	4658      	mov	r0, fp
 80074f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f4:	f000 fc90 	bl	8007e18 <__mcmp>
 80074f8:	4632      	mov	r2, r6
 80074fa:	4681      	mov	r9, r0
 80074fc:	4621      	mov	r1, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 fca6 	bl	8007e50 <__mdiff>
 8007504:	68c2      	ldr	r2, [r0, #12]
 8007506:	4607      	mov	r7, r0
 8007508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800750a:	bb02      	cbnz	r2, 800754e <_dtoa_r+0xa7e>
 800750c:	4601      	mov	r1, r0
 800750e:	4658      	mov	r0, fp
 8007510:	f000 fc82 	bl	8007e18 <__mcmp>
 8007514:	4602      	mov	r2, r0
 8007516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007518:	4639      	mov	r1, r7
 800751a:	4628      	mov	r0, r5
 800751c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007520:	f000 fa3c 	bl	800799c <_Bfree>
 8007524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007528:	9f08      	ldr	r7, [sp, #32]
 800752a:	ea43 0102 	orr.w	r1, r3, r2
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	430b      	orrs	r3, r1
 8007532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007534:	d10d      	bne.n	8007552 <_dtoa_r+0xa82>
 8007536:	2b39      	cmp	r3, #57	; 0x39
 8007538:	d029      	beq.n	800758e <_dtoa_r+0xabe>
 800753a:	f1b9 0f00 	cmp.w	r9, #0
 800753e:	dd01      	ble.n	8007544 <_dtoa_r+0xa74>
 8007540:	9b06      	ldr	r3, [sp, #24]
 8007542:	3331      	adds	r3, #49	; 0x31
 8007544:	9a04      	ldr	r2, [sp, #16]
 8007546:	7013      	strb	r3, [r2, #0]
 8007548:	e776      	b.n	8007438 <_dtoa_r+0x968>
 800754a:	4630      	mov	r0, r6
 800754c:	e7b9      	b.n	80074c2 <_dtoa_r+0x9f2>
 800754e:	2201      	movs	r2, #1
 8007550:	e7e2      	b.n	8007518 <_dtoa_r+0xa48>
 8007552:	f1b9 0f00 	cmp.w	r9, #0
 8007556:	db06      	blt.n	8007566 <_dtoa_r+0xa96>
 8007558:	9922      	ldr	r1, [sp, #136]	; 0x88
 800755a:	ea41 0909 	orr.w	r9, r1, r9
 800755e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007560:	ea59 0101 	orrs.w	r1, r9, r1
 8007564:	d120      	bne.n	80075a8 <_dtoa_r+0xad8>
 8007566:	2a00      	cmp	r2, #0
 8007568:	ddec      	ble.n	8007544 <_dtoa_r+0xa74>
 800756a:	4659      	mov	r1, fp
 800756c:	2201      	movs	r2, #1
 800756e:	4628      	mov	r0, r5
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	f000 fbe1 	bl	8007d38 <__lshift>
 8007576:	4621      	mov	r1, r4
 8007578:	4683      	mov	fp, r0
 800757a:	f000 fc4d 	bl	8007e18 <__mcmp>
 800757e:	2800      	cmp	r0, #0
 8007580:	9b08      	ldr	r3, [sp, #32]
 8007582:	dc02      	bgt.n	800758a <_dtoa_r+0xaba>
 8007584:	d1de      	bne.n	8007544 <_dtoa_r+0xa74>
 8007586:	07da      	lsls	r2, r3, #31
 8007588:	d5dc      	bpl.n	8007544 <_dtoa_r+0xa74>
 800758a:	2b39      	cmp	r3, #57	; 0x39
 800758c:	d1d8      	bne.n	8007540 <_dtoa_r+0xa70>
 800758e:	2339      	movs	r3, #57	; 0x39
 8007590:	9a04      	ldr	r2, [sp, #16]
 8007592:	7013      	strb	r3, [r2, #0]
 8007594:	463b      	mov	r3, r7
 8007596:	461f      	mov	r7, r3
 8007598:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800759c:	3b01      	subs	r3, #1
 800759e:	2a39      	cmp	r2, #57	; 0x39
 80075a0:	d050      	beq.n	8007644 <_dtoa_r+0xb74>
 80075a2:	3201      	adds	r2, #1
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	e747      	b.n	8007438 <_dtoa_r+0x968>
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	dd03      	ble.n	80075b4 <_dtoa_r+0xae4>
 80075ac:	2b39      	cmp	r3, #57	; 0x39
 80075ae:	d0ee      	beq.n	800758e <_dtoa_r+0xabe>
 80075b0:	3301      	adds	r3, #1
 80075b2:	e7c7      	b.n	8007544 <_dtoa_r+0xa74>
 80075b4:	9a08      	ldr	r2, [sp, #32]
 80075b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80075bc:	428a      	cmp	r2, r1
 80075be:	d02a      	beq.n	8007616 <_dtoa_r+0xb46>
 80075c0:	4659      	mov	r1, fp
 80075c2:	2300      	movs	r3, #0
 80075c4:	220a      	movs	r2, #10
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 fa0a 	bl	80079e0 <__multadd>
 80075cc:	45b0      	cmp	r8, r6
 80075ce:	4683      	mov	fp, r0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	f04f 020a 	mov.w	r2, #10
 80075d8:	4641      	mov	r1, r8
 80075da:	4628      	mov	r0, r5
 80075dc:	d107      	bne.n	80075ee <_dtoa_r+0xb1e>
 80075de:	f000 f9ff 	bl	80079e0 <__multadd>
 80075e2:	4680      	mov	r8, r0
 80075e4:	4606      	mov	r6, r0
 80075e6:	9b08      	ldr	r3, [sp, #32]
 80075e8:	3301      	adds	r3, #1
 80075ea:	9308      	str	r3, [sp, #32]
 80075ec:	e775      	b.n	80074da <_dtoa_r+0xa0a>
 80075ee:	f000 f9f7 	bl	80079e0 <__multadd>
 80075f2:	4631      	mov	r1, r6
 80075f4:	4680      	mov	r8, r0
 80075f6:	2300      	movs	r3, #0
 80075f8:	220a      	movs	r2, #10
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f9f0 	bl	80079e0 <__multadd>
 8007600:	4606      	mov	r6, r0
 8007602:	e7f0      	b.n	80075e6 <_dtoa_r+0xb16>
 8007604:	f1b9 0f00 	cmp.w	r9, #0
 8007608:	bfcc      	ite	gt
 800760a:	464f      	movgt	r7, r9
 800760c:	2701      	movle	r7, #1
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	9a03      	ldr	r2, [sp, #12]
 8007614:	4417      	add	r7, r2
 8007616:	4659      	mov	r1, fp
 8007618:	2201      	movs	r2, #1
 800761a:	4628      	mov	r0, r5
 800761c:	9308      	str	r3, [sp, #32]
 800761e:	f000 fb8b 	bl	8007d38 <__lshift>
 8007622:	4621      	mov	r1, r4
 8007624:	4683      	mov	fp, r0
 8007626:	f000 fbf7 	bl	8007e18 <__mcmp>
 800762a:	2800      	cmp	r0, #0
 800762c:	dcb2      	bgt.n	8007594 <_dtoa_r+0xac4>
 800762e:	d102      	bne.n	8007636 <_dtoa_r+0xb66>
 8007630:	9b08      	ldr	r3, [sp, #32]
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d4ae      	bmi.n	8007594 <_dtoa_r+0xac4>
 8007636:	463b      	mov	r3, r7
 8007638:	461f      	mov	r7, r3
 800763a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800763e:	2a30      	cmp	r2, #48	; 0x30
 8007640:	d0fa      	beq.n	8007638 <_dtoa_r+0xb68>
 8007642:	e6f9      	b.n	8007438 <_dtoa_r+0x968>
 8007644:	9a03      	ldr	r2, [sp, #12]
 8007646:	429a      	cmp	r2, r3
 8007648:	d1a5      	bne.n	8007596 <_dtoa_r+0xac6>
 800764a:	2331      	movs	r3, #49	; 0x31
 800764c:	f10a 0a01 	add.w	sl, sl, #1
 8007650:	e779      	b.n	8007546 <_dtoa_r+0xa76>
 8007652:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <_dtoa_r+0xbd4>)
 8007654:	f7ff baa8 	b.w	8006ba8 <_dtoa_r+0xd8>
 8007658:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800765a:	2b00      	cmp	r3, #0
 800765c:	f47f aa81 	bne.w	8006b62 <_dtoa_r+0x92>
 8007660:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <_dtoa_r+0xbd8>)
 8007662:	f7ff baa1 	b.w	8006ba8 <_dtoa_r+0xd8>
 8007666:	f1b9 0f00 	cmp.w	r9, #0
 800766a:	dc03      	bgt.n	8007674 <_dtoa_r+0xba4>
 800766c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800766e:	2b02      	cmp	r3, #2
 8007670:	f73f aecb 	bgt.w	800740a <_dtoa_r+0x93a>
 8007674:	9f03      	ldr	r7, [sp, #12]
 8007676:	4621      	mov	r1, r4
 8007678:	4658      	mov	r0, fp
 800767a:	f7ff f99b 	bl	80069b4 <quorem>
 800767e:	9a03      	ldr	r2, [sp, #12]
 8007680:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007684:	f807 3b01 	strb.w	r3, [r7], #1
 8007688:	1aba      	subs	r2, r7, r2
 800768a:	4591      	cmp	r9, r2
 800768c:	ddba      	ble.n	8007604 <_dtoa_r+0xb34>
 800768e:	4659      	mov	r1, fp
 8007690:	2300      	movs	r3, #0
 8007692:	220a      	movs	r2, #10
 8007694:	4628      	mov	r0, r5
 8007696:	f000 f9a3 	bl	80079e0 <__multadd>
 800769a:	4683      	mov	fp, r0
 800769c:	e7eb      	b.n	8007676 <_dtoa_r+0xba6>
 800769e:	bf00      	nop
 80076a0:	0800a9c5 	.word	0x0800a9c5
 80076a4:	0800aba9 	.word	0x0800aba9
 80076a8:	0800a946 	.word	0x0800a946

080076ac <std>:
 80076ac:	2300      	movs	r3, #0
 80076ae:	b510      	push	{r4, lr}
 80076b0:	4604      	mov	r4, r0
 80076b2:	e9c0 3300 	strd	r3, r3, [r0]
 80076b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ba:	6083      	str	r3, [r0, #8]
 80076bc:	8181      	strh	r1, [r0, #12]
 80076be:	6643      	str	r3, [r0, #100]	; 0x64
 80076c0:	81c2      	strh	r2, [r0, #14]
 80076c2:	6183      	str	r3, [r0, #24]
 80076c4:	4619      	mov	r1, r3
 80076c6:	2208      	movs	r2, #8
 80076c8:	305c      	adds	r0, #92	; 0x5c
 80076ca:	f7fe fb23 	bl	8005d14 <memset>
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <std+0x38>)
 80076d0:	6224      	str	r4, [r4, #32]
 80076d2:	6263      	str	r3, [r4, #36]	; 0x24
 80076d4:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <std+0x3c>)
 80076d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80076d8:	4b04      	ldr	r3, [pc, #16]	; (80076ec <std+0x40>)
 80076da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <std+0x44>)
 80076de:	6323      	str	r3, [r4, #48]	; 0x30
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	bf00      	nop
 80076e4:	080068a9 	.word	0x080068a9
 80076e8:	080068cf 	.word	0x080068cf
 80076ec:	08006907 	.word	0x08006907
 80076f0:	0800692b 	.word	0x0800692b

080076f4 <_cleanup_r>:
 80076f4:	4901      	ldr	r1, [pc, #4]	; (80076fc <_cleanup_r+0x8>)
 80076f6:	f000 b8af 	b.w	8007858 <_fwalk_reent>
 80076fa:	bf00      	nop
 80076fc:	0800917d 	.word	0x0800917d

08007700 <__sfmoreglue>:
 8007700:	2268      	movs	r2, #104	; 0x68
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	1e4d      	subs	r5, r1, #1
 8007706:	4355      	muls	r5, r2
 8007708:	460e      	mov	r6, r1
 800770a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800770e:	f7fe fb85 	bl	8005e1c <_malloc_r>
 8007712:	4604      	mov	r4, r0
 8007714:	b140      	cbz	r0, 8007728 <__sfmoreglue+0x28>
 8007716:	2100      	movs	r1, #0
 8007718:	e9c0 1600 	strd	r1, r6, [r0]
 800771c:	300c      	adds	r0, #12
 800771e:	60a0      	str	r0, [r4, #8]
 8007720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007724:	f7fe faf6 	bl	8005d14 <memset>
 8007728:	4620      	mov	r0, r4
 800772a:	bd70      	pop	{r4, r5, r6, pc}

0800772c <__sfp_lock_acquire>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sfp_lock_acquire+0x8>)
 800772e:	f000 b8b8 	b.w	80078a2 <__retarget_lock_acquire_recursive>
 8007732:	bf00      	nop
 8007734:	20000795 	.word	0x20000795

08007738 <__sfp_lock_release>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__sfp_lock_release+0x8>)
 800773a:	f000 b8b3 	b.w	80078a4 <__retarget_lock_release_recursive>
 800773e:	bf00      	nop
 8007740:	20000795 	.word	0x20000795

08007744 <__sinit_lock_acquire>:
 8007744:	4801      	ldr	r0, [pc, #4]	; (800774c <__sinit_lock_acquire+0x8>)
 8007746:	f000 b8ac 	b.w	80078a2 <__retarget_lock_acquire_recursive>
 800774a:	bf00      	nop
 800774c:	20000796 	.word	0x20000796

08007750 <__sinit_lock_release>:
 8007750:	4801      	ldr	r0, [pc, #4]	; (8007758 <__sinit_lock_release+0x8>)
 8007752:	f000 b8a7 	b.w	80078a4 <__retarget_lock_release_recursive>
 8007756:	bf00      	nop
 8007758:	20000796 	.word	0x20000796

0800775c <__sinit>:
 800775c:	b510      	push	{r4, lr}
 800775e:	4604      	mov	r4, r0
 8007760:	f7ff fff0 	bl	8007744 <__sinit_lock_acquire>
 8007764:	69a3      	ldr	r3, [r4, #24]
 8007766:	b11b      	cbz	r3, 8007770 <__sinit+0x14>
 8007768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776c:	f7ff bff0 	b.w	8007750 <__sinit_lock_release>
 8007770:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007774:	6523      	str	r3, [r4, #80]	; 0x50
 8007776:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <__sinit+0x68>)
 8007778:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <__sinit+0x6c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	62a2      	str	r2, [r4, #40]	; 0x28
 800777e:	42a3      	cmp	r3, r4
 8007780:	bf08      	it	eq
 8007782:	2301      	moveq	r3, #1
 8007784:	4620      	mov	r0, r4
 8007786:	bf08      	it	eq
 8007788:	61a3      	streq	r3, [r4, #24]
 800778a:	f000 f81f 	bl	80077cc <__sfp>
 800778e:	6060      	str	r0, [r4, #4]
 8007790:	4620      	mov	r0, r4
 8007792:	f000 f81b 	bl	80077cc <__sfp>
 8007796:	60a0      	str	r0, [r4, #8]
 8007798:	4620      	mov	r0, r4
 800779a:	f000 f817 	bl	80077cc <__sfp>
 800779e:	2200      	movs	r2, #0
 80077a0:	2104      	movs	r1, #4
 80077a2:	60e0      	str	r0, [r4, #12]
 80077a4:	6860      	ldr	r0, [r4, #4]
 80077a6:	f7ff ff81 	bl	80076ac <std>
 80077aa:	2201      	movs	r2, #1
 80077ac:	2109      	movs	r1, #9
 80077ae:	68a0      	ldr	r0, [r4, #8]
 80077b0:	f7ff ff7c 	bl	80076ac <std>
 80077b4:	2202      	movs	r2, #2
 80077b6:	2112      	movs	r1, #18
 80077b8:	68e0      	ldr	r0, [r4, #12]
 80077ba:	f7ff ff77 	bl	80076ac <std>
 80077be:	2301      	movs	r3, #1
 80077c0:	61a3      	str	r3, [r4, #24]
 80077c2:	e7d1      	b.n	8007768 <__sinit+0xc>
 80077c4:	0800a910 	.word	0x0800a910
 80077c8:	080076f5 	.word	0x080076f5

080077cc <__sfp>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	4607      	mov	r7, r0
 80077d0:	f7ff ffac 	bl	800772c <__sfp_lock_acquire>
 80077d4:	4b1e      	ldr	r3, [pc, #120]	; (8007850 <__sfp+0x84>)
 80077d6:	681e      	ldr	r6, [r3, #0]
 80077d8:	69b3      	ldr	r3, [r6, #24]
 80077da:	b913      	cbnz	r3, 80077e2 <__sfp+0x16>
 80077dc:	4630      	mov	r0, r6
 80077de:	f7ff ffbd 	bl	800775c <__sinit>
 80077e2:	3648      	adds	r6, #72	; 0x48
 80077e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	d503      	bpl.n	80077f4 <__sfp+0x28>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	b30b      	cbz	r3, 8007834 <__sfp+0x68>
 80077f0:	6836      	ldr	r6, [r6, #0]
 80077f2:	e7f7      	b.n	80077e4 <__sfp+0x18>
 80077f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077f8:	b9d5      	cbnz	r5, 8007830 <__sfp+0x64>
 80077fa:	4b16      	ldr	r3, [pc, #88]	; (8007854 <__sfp+0x88>)
 80077fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007800:	60e3      	str	r3, [r4, #12]
 8007802:	6665      	str	r5, [r4, #100]	; 0x64
 8007804:	f000 f84c 	bl	80078a0 <__retarget_lock_init_recursive>
 8007808:	f7ff ff96 	bl	8007738 <__sfp_lock_release>
 800780c:	2208      	movs	r2, #8
 800780e:	4629      	mov	r1, r5
 8007810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007818:	6025      	str	r5, [r4, #0]
 800781a:	61a5      	str	r5, [r4, #24]
 800781c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007820:	f7fe fa78 	bl	8005d14 <memset>
 8007824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800782c:	4620      	mov	r0, r4
 800782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007830:	3468      	adds	r4, #104	; 0x68
 8007832:	e7d9      	b.n	80077e8 <__sfp+0x1c>
 8007834:	2104      	movs	r1, #4
 8007836:	4638      	mov	r0, r7
 8007838:	f7ff ff62 	bl	8007700 <__sfmoreglue>
 800783c:	4604      	mov	r4, r0
 800783e:	6030      	str	r0, [r6, #0]
 8007840:	2800      	cmp	r0, #0
 8007842:	d1d5      	bne.n	80077f0 <__sfp+0x24>
 8007844:	f7ff ff78 	bl	8007738 <__sfp_lock_release>
 8007848:	230c      	movs	r3, #12
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	e7ee      	b.n	800782c <__sfp+0x60>
 800784e:	bf00      	nop
 8007850:	0800a910 	.word	0x0800a910
 8007854:	ffff0001 	.word	0xffff0001

08007858 <_fwalk_reent>:
 8007858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800785c:	4606      	mov	r6, r0
 800785e:	4688      	mov	r8, r1
 8007860:	2700      	movs	r7, #0
 8007862:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007866:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800786a:	f1b9 0901 	subs.w	r9, r9, #1
 800786e:	d505      	bpl.n	800787c <_fwalk_reent+0x24>
 8007870:	6824      	ldr	r4, [r4, #0]
 8007872:	2c00      	cmp	r4, #0
 8007874:	d1f7      	bne.n	8007866 <_fwalk_reent+0xe>
 8007876:	4638      	mov	r0, r7
 8007878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787c:	89ab      	ldrh	r3, [r5, #12]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d907      	bls.n	8007892 <_fwalk_reent+0x3a>
 8007882:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007886:	3301      	adds	r3, #1
 8007888:	d003      	beq.n	8007892 <_fwalk_reent+0x3a>
 800788a:	4629      	mov	r1, r5
 800788c:	4630      	mov	r0, r6
 800788e:	47c0      	blx	r8
 8007890:	4307      	orrs	r7, r0
 8007892:	3568      	adds	r5, #104	; 0x68
 8007894:	e7e9      	b.n	800786a <_fwalk_reent+0x12>
	...

08007898 <_localeconv_r>:
 8007898:	4800      	ldr	r0, [pc, #0]	; (800789c <_localeconv_r+0x4>)
 800789a:	4770      	bx	lr
 800789c:	20000180 	.word	0x20000180

080078a0 <__retarget_lock_init_recursive>:
 80078a0:	4770      	bx	lr

080078a2 <__retarget_lock_acquire_recursive>:
 80078a2:	4770      	bx	lr

080078a4 <__retarget_lock_release_recursive>:
 80078a4:	4770      	bx	lr
	...

080078a8 <_lseek_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	2200      	movs	r2, #0
 80078b2:	4d05      	ldr	r5, [pc, #20]	; (80078c8 <_lseek_r+0x20>)
 80078b4:	602a      	str	r2, [r5, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7fb f85a 	bl	8002970 <_lseek>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_lseek_r+0x1e>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_lseek_r+0x1e>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20000798 	.word	0x20000798

080078cc <memchr>:
 80078cc:	4603      	mov	r3, r0
 80078ce:	b510      	push	{r4, lr}
 80078d0:	b2c9      	uxtb	r1, r1
 80078d2:	4402      	add	r2, r0
 80078d4:	4293      	cmp	r3, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	d101      	bne.n	80078de <memchr+0x12>
 80078da:	2000      	movs	r0, #0
 80078dc:	e003      	b.n	80078e6 <memchr+0x1a>
 80078de:	7804      	ldrb	r4, [r0, #0]
 80078e0:	3301      	adds	r3, #1
 80078e2:	428c      	cmp	r4, r1
 80078e4:	d1f6      	bne.n	80078d4 <memchr+0x8>
 80078e6:	bd10      	pop	{r4, pc}

080078e8 <memcpy>:
 80078e8:	440a      	add	r2, r1
 80078ea:	4291      	cmp	r1, r2
 80078ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80078f0:	d100      	bne.n	80078f4 <memcpy+0xc>
 80078f2:	4770      	bx	lr
 80078f4:	b510      	push	{r4, lr}
 80078f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078fa:	4291      	cmp	r1, r2
 80078fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007900:	d1f9      	bne.n	80078f6 <memcpy+0xe>
 8007902:	bd10      	pop	{r4, pc}

08007904 <__malloc_lock>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__malloc_lock+0x8>)
 8007906:	f7ff bfcc 	b.w	80078a2 <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	20000794 	.word	0x20000794

08007910 <__malloc_unlock>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__malloc_unlock+0x8>)
 8007912:	f7ff bfc7 	b.w	80078a4 <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	20000794 	.word	0x20000794

0800791c <_Balloc>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007920:	4604      	mov	r4, r0
 8007922:	460d      	mov	r5, r1
 8007924:	b976      	cbnz	r6, 8007944 <_Balloc+0x28>
 8007926:	2010      	movs	r0, #16
 8007928:	f7fe f9ec 	bl	8005d04 <malloc>
 800792c:	4602      	mov	r2, r0
 800792e:	6260      	str	r0, [r4, #36]	; 0x24
 8007930:	b920      	cbnz	r0, 800793c <_Balloc+0x20>
 8007932:	2166      	movs	r1, #102	; 0x66
 8007934:	4b17      	ldr	r3, [pc, #92]	; (8007994 <_Balloc+0x78>)
 8007936:	4818      	ldr	r0, [pc, #96]	; (8007998 <_Balloc+0x7c>)
 8007938:	f001 fb80 	bl	800903c <__assert_func>
 800793c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007940:	6006      	str	r6, [r0, #0]
 8007942:	60c6      	str	r6, [r0, #12]
 8007944:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007946:	68f3      	ldr	r3, [r6, #12]
 8007948:	b183      	cbz	r3, 800796c <_Balloc+0x50>
 800794a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007952:	b9b8      	cbnz	r0, 8007984 <_Balloc+0x68>
 8007954:	2101      	movs	r1, #1
 8007956:	fa01 f605 	lsl.w	r6, r1, r5
 800795a:	1d72      	adds	r2, r6, #5
 800795c:	4620      	mov	r0, r4
 800795e:	0092      	lsls	r2, r2, #2
 8007960:	f7fe f9e0 	bl	8005d24 <_calloc_r>
 8007964:	b160      	cbz	r0, 8007980 <_Balloc+0x64>
 8007966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800796a:	e00e      	b.n	800798a <_Balloc+0x6e>
 800796c:	2221      	movs	r2, #33	; 0x21
 800796e:	2104      	movs	r1, #4
 8007970:	4620      	mov	r0, r4
 8007972:	f7fe f9d7 	bl	8005d24 <_calloc_r>
 8007976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007978:	60f0      	str	r0, [r6, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e4      	bne.n	800794a <_Balloc+0x2e>
 8007980:	2000      	movs	r0, #0
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	6802      	ldr	r2, [r0, #0]
 8007986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800798a:	2300      	movs	r3, #0
 800798c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007990:	e7f7      	b.n	8007982 <_Balloc+0x66>
 8007992:	bf00      	nop
 8007994:	0800a953 	.word	0x0800a953
 8007998:	0800aa38 	.word	0x0800aa38

0800799c <_Bfree>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	b976      	cbnz	r6, 80079c4 <_Bfree+0x28>
 80079a6:	2010      	movs	r0, #16
 80079a8:	f7fe f9ac 	bl	8005d04 <malloc>
 80079ac:	4602      	mov	r2, r0
 80079ae:	6268      	str	r0, [r5, #36]	; 0x24
 80079b0:	b920      	cbnz	r0, 80079bc <_Bfree+0x20>
 80079b2:	218a      	movs	r1, #138	; 0x8a
 80079b4:	4b08      	ldr	r3, [pc, #32]	; (80079d8 <_Bfree+0x3c>)
 80079b6:	4809      	ldr	r0, [pc, #36]	; (80079dc <_Bfree+0x40>)
 80079b8:	f001 fb40 	bl	800903c <__assert_func>
 80079bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079c0:	6006      	str	r6, [r0, #0]
 80079c2:	60c6      	str	r6, [r0, #12]
 80079c4:	b13c      	cbz	r4, 80079d6 <_Bfree+0x3a>
 80079c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079c8:	6862      	ldr	r2, [r4, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079d0:	6021      	str	r1, [r4, #0]
 80079d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	0800a953 	.word	0x0800a953
 80079dc:	0800aa38 	.word	0x0800aa38

080079e0 <__multadd>:
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	4607      	mov	r7, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	461e      	mov	r6, r3
 80079ea:	2000      	movs	r0, #0
 80079ec:	690d      	ldr	r5, [r1, #16]
 80079ee:	f101 0c14 	add.w	ip, r1, #20
 80079f2:	f8dc 3000 	ldr.w	r3, [ip]
 80079f6:	3001      	adds	r0, #1
 80079f8:	b299      	uxth	r1, r3
 80079fa:	fb02 6101 	mla	r1, r2, r1, r6
 80079fe:	0c1e      	lsrs	r6, r3, #16
 8007a00:	0c0b      	lsrs	r3, r1, #16
 8007a02:	fb02 3306 	mla	r3, r2, r6, r3
 8007a06:	b289      	uxth	r1, r1
 8007a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a0c:	4285      	cmp	r5, r0
 8007a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a12:	f84c 1b04 	str.w	r1, [ip], #4
 8007a16:	dcec      	bgt.n	80079f2 <__multadd+0x12>
 8007a18:	b30e      	cbz	r6, 8007a5e <__multadd+0x7e>
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	42ab      	cmp	r3, r5
 8007a1e:	dc19      	bgt.n	8007a54 <__multadd+0x74>
 8007a20:	6861      	ldr	r1, [r4, #4]
 8007a22:	4638      	mov	r0, r7
 8007a24:	3101      	adds	r1, #1
 8007a26:	f7ff ff79 	bl	800791c <_Balloc>
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	b928      	cbnz	r0, 8007a3a <__multadd+0x5a>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	21b5      	movs	r1, #181	; 0xb5
 8007a32:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <__multadd+0x84>)
 8007a34:	480c      	ldr	r0, [pc, #48]	; (8007a68 <__multadd+0x88>)
 8007a36:	f001 fb01 	bl	800903c <__assert_func>
 8007a3a:	6922      	ldr	r2, [r4, #16]
 8007a3c:	f104 010c 	add.w	r1, r4, #12
 8007a40:	3202      	adds	r2, #2
 8007a42:	0092      	lsls	r2, r2, #2
 8007a44:	300c      	adds	r0, #12
 8007a46:	f7ff ff4f 	bl	80078e8 <memcpy>
 8007a4a:	4621      	mov	r1, r4
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff ffa5 	bl	800799c <_Bfree>
 8007a52:	4644      	mov	r4, r8
 8007a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a58:	3501      	adds	r5, #1
 8007a5a:	615e      	str	r6, [r3, #20]
 8007a5c:	6125      	str	r5, [r4, #16]
 8007a5e:	4620      	mov	r0, r4
 8007a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a64:	0800a9c5 	.word	0x0800a9c5
 8007a68:	0800aa38 	.word	0x0800aa38

08007a6c <__hi0bits>:
 8007a6c:	0c02      	lsrs	r2, r0, #16
 8007a6e:	0412      	lsls	r2, r2, #16
 8007a70:	4603      	mov	r3, r0
 8007a72:	b9ca      	cbnz	r2, 8007aa8 <__hi0bits+0x3c>
 8007a74:	0403      	lsls	r3, r0, #16
 8007a76:	2010      	movs	r0, #16
 8007a78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007a7c:	bf04      	itt	eq
 8007a7e:	021b      	lsleq	r3, r3, #8
 8007a80:	3008      	addeq	r0, #8
 8007a82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007a86:	bf04      	itt	eq
 8007a88:	011b      	lsleq	r3, r3, #4
 8007a8a:	3004      	addeq	r0, #4
 8007a8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007a90:	bf04      	itt	eq
 8007a92:	009b      	lsleq	r3, r3, #2
 8007a94:	3002      	addeq	r0, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	db05      	blt.n	8007aa6 <__hi0bits+0x3a>
 8007a9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a9e:	f100 0001 	add.w	r0, r0, #1
 8007aa2:	bf08      	it	eq
 8007aa4:	2020      	moveq	r0, #32
 8007aa6:	4770      	bx	lr
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e7e5      	b.n	8007a78 <__hi0bits+0xc>

08007aac <__lo0bits>:
 8007aac:	6803      	ldr	r3, [r0, #0]
 8007aae:	4602      	mov	r2, r0
 8007ab0:	f013 0007 	ands.w	r0, r3, #7
 8007ab4:	d00b      	beq.n	8007ace <__lo0bits+0x22>
 8007ab6:	07d9      	lsls	r1, r3, #31
 8007ab8:	d421      	bmi.n	8007afe <__lo0bits+0x52>
 8007aba:	0798      	lsls	r0, r3, #30
 8007abc:	bf49      	itett	mi
 8007abe:	085b      	lsrmi	r3, r3, #1
 8007ac0:	089b      	lsrpl	r3, r3, #2
 8007ac2:	2001      	movmi	r0, #1
 8007ac4:	6013      	strmi	r3, [r2, #0]
 8007ac6:	bf5c      	itt	pl
 8007ac8:	2002      	movpl	r0, #2
 8007aca:	6013      	strpl	r3, [r2, #0]
 8007acc:	4770      	bx	lr
 8007ace:	b299      	uxth	r1, r3
 8007ad0:	b909      	cbnz	r1, 8007ad6 <__lo0bits+0x2a>
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	b2d9      	uxtb	r1, r3
 8007ad8:	b909      	cbnz	r1, 8007ade <__lo0bits+0x32>
 8007ada:	3008      	adds	r0, #8
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	0719      	lsls	r1, r3, #28
 8007ae0:	bf04      	itt	eq
 8007ae2:	091b      	lsreq	r3, r3, #4
 8007ae4:	3004      	addeq	r0, #4
 8007ae6:	0799      	lsls	r1, r3, #30
 8007ae8:	bf04      	itt	eq
 8007aea:	089b      	lsreq	r3, r3, #2
 8007aec:	3002      	addeq	r0, #2
 8007aee:	07d9      	lsls	r1, r3, #31
 8007af0:	d403      	bmi.n	8007afa <__lo0bits+0x4e>
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	f100 0001 	add.w	r0, r0, #1
 8007af8:	d003      	beq.n	8007b02 <__lo0bits+0x56>
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4770      	bx	lr
 8007afe:	2000      	movs	r0, #0
 8007b00:	4770      	bx	lr
 8007b02:	2020      	movs	r0, #32
 8007b04:	4770      	bx	lr
	...

08007b08 <__i2b>:
 8007b08:	b510      	push	{r4, lr}
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	f7ff ff05 	bl	800791c <_Balloc>
 8007b12:	4602      	mov	r2, r0
 8007b14:	b928      	cbnz	r0, 8007b22 <__i2b+0x1a>
 8007b16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b1a:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <__i2b+0x24>)
 8007b1c:	4804      	ldr	r0, [pc, #16]	; (8007b30 <__i2b+0x28>)
 8007b1e:	f001 fa8d 	bl	800903c <__assert_func>
 8007b22:	2301      	movs	r3, #1
 8007b24:	6144      	str	r4, [r0, #20]
 8007b26:	6103      	str	r3, [r0, #16]
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	bf00      	nop
 8007b2c:	0800a9c5 	.word	0x0800a9c5
 8007b30:	0800aa38 	.word	0x0800aa38

08007b34 <__multiply>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	4691      	mov	r9, r2
 8007b3a:	690a      	ldr	r2, [r1, #16]
 8007b3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b40:	460c      	mov	r4, r1
 8007b42:	429a      	cmp	r2, r3
 8007b44:	bfbe      	ittt	lt
 8007b46:	460b      	movlt	r3, r1
 8007b48:	464c      	movlt	r4, r9
 8007b4a:	4699      	movlt	r9, r3
 8007b4c:	6927      	ldr	r7, [r4, #16]
 8007b4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b52:	68a3      	ldr	r3, [r4, #8]
 8007b54:	6861      	ldr	r1, [r4, #4]
 8007b56:	eb07 060a 	add.w	r6, r7, sl
 8007b5a:	42b3      	cmp	r3, r6
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	bfb8      	it	lt
 8007b60:	3101      	addlt	r1, #1
 8007b62:	f7ff fedb 	bl	800791c <_Balloc>
 8007b66:	b930      	cbnz	r0, 8007b76 <__multiply+0x42>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	f240 115d 	movw	r1, #349	; 0x15d
 8007b6e:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <__multiply+0x148>)
 8007b70:	4843      	ldr	r0, [pc, #268]	; (8007c80 <__multiply+0x14c>)
 8007b72:	f001 fa63 	bl	800903c <__assert_func>
 8007b76:	f100 0514 	add.w	r5, r0, #20
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b82:	4543      	cmp	r3, r8
 8007b84:	d321      	bcc.n	8007bca <__multiply+0x96>
 8007b86:	f104 0314 	add.w	r3, r4, #20
 8007b8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b8e:	f109 0314 	add.w	r3, r9, #20
 8007b92:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b96:	9202      	str	r2, [sp, #8]
 8007b98:	1b3a      	subs	r2, r7, r4
 8007b9a:	3a15      	subs	r2, #21
 8007b9c:	f022 0203 	bic.w	r2, r2, #3
 8007ba0:	3204      	adds	r2, #4
 8007ba2:	f104 0115 	add.w	r1, r4, #21
 8007ba6:	428f      	cmp	r7, r1
 8007ba8:	bf38      	it	cc
 8007baa:	2204      	movcc	r2, #4
 8007bac:	9201      	str	r2, [sp, #4]
 8007bae:	9a02      	ldr	r2, [sp, #8]
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d80c      	bhi.n	8007bd0 <__multiply+0x9c>
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	dd03      	ble.n	8007bc2 <__multiply+0x8e>
 8007bba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d059      	beq.n	8007c76 <__multiply+0x142>
 8007bc2:	6106      	str	r6, [r0, #16]
 8007bc4:	b005      	add	sp, #20
 8007bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bca:	f843 2b04 	str.w	r2, [r3], #4
 8007bce:	e7d8      	b.n	8007b82 <__multiply+0x4e>
 8007bd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bd4:	f1ba 0f00 	cmp.w	sl, #0
 8007bd8:	d023      	beq.n	8007c22 <__multiply+0xee>
 8007bda:	46a9      	mov	r9, r5
 8007bdc:	f04f 0c00 	mov.w	ip, #0
 8007be0:	f104 0e14 	add.w	lr, r4, #20
 8007be4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007be8:	f8d9 1000 	ldr.w	r1, [r9]
 8007bec:	fa1f fb82 	uxth.w	fp, r2
 8007bf0:	b289      	uxth	r1, r1
 8007bf2:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bf6:	4461      	add	r1, ip
 8007bf8:	f8d9 c000 	ldr.w	ip, [r9]
 8007bfc:	0c12      	lsrs	r2, r2, #16
 8007bfe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007c02:	fb0a c202 	mla	r2, sl, r2, ip
 8007c06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c0a:	b289      	uxth	r1, r1
 8007c0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c10:	4577      	cmp	r7, lr
 8007c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c16:	f849 1b04 	str.w	r1, [r9], #4
 8007c1a:	d8e3      	bhi.n	8007be4 <__multiply+0xb0>
 8007c1c:	9a01      	ldr	r2, [sp, #4]
 8007c1e:	f845 c002 	str.w	ip, [r5, r2]
 8007c22:	9a03      	ldr	r2, [sp, #12]
 8007c24:	3304      	adds	r3, #4
 8007c26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c2a:	f1b9 0f00 	cmp.w	r9, #0
 8007c2e:	d020      	beq.n	8007c72 <__multiply+0x13e>
 8007c30:	46ae      	mov	lr, r5
 8007c32:	f04f 0a00 	mov.w	sl, #0
 8007c36:	6829      	ldr	r1, [r5, #0]
 8007c38:	f104 0c14 	add.w	ip, r4, #20
 8007c3c:	f8bc b000 	ldrh.w	fp, [ip]
 8007c40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c44:	b289      	uxth	r1, r1
 8007c46:	fb09 220b 	mla	r2, r9, fp, r2
 8007c4a:	4492      	add	sl, r2
 8007c4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c50:	f84e 1b04 	str.w	r1, [lr], #4
 8007c54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c58:	f8be 1000 	ldrh.w	r1, [lr]
 8007c5c:	0c12      	lsrs	r2, r2, #16
 8007c5e:	fb09 1102 	mla	r1, r9, r2, r1
 8007c62:	4567      	cmp	r7, ip
 8007c64:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c6c:	d8e6      	bhi.n	8007c3c <__multiply+0x108>
 8007c6e:	9a01      	ldr	r2, [sp, #4]
 8007c70:	50a9      	str	r1, [r5, r2]
 8007c72:	3504      	adds	r5, #4
 8007c74:	e79b      	b.n	8007bae <__multiply+0x7a>
 8007c76:	3e01      	subs	r6, #1
 8007c78:	e79d      	b.n	8007bb6 <__multiply+0x82>
 8007c7a:	bf00      	nop
 8007c7c:	0800a9c5 	.word	0x0800a9c5
 8007c80:	0800aa38 	.word	0x0800aa38

08007c84 <__pow5mult>:
 8007c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c88:	4615      	mov	r5, r2
 8007c8a:	f012 0203 	ands.w	r2, r2, #3
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	d007      	beq.n	8007ca4 <__pow5mult+0x20>
 8007c94:	4c25      	ldr	r4, [pc, #148]	; (8007d2c <__pow5mult+0xa8>)
 8007c96:	3a01      	subs	r2, #1
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c9e:	f7ff fe9f 	bl	80079e0 <__multadd>
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	10ad      	asrs	r5, r5, #2
 8007ca6:	d03d      	beq.n	8007d24 <__pow5mult+0xa0>
 8007ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007caa:	b97c      	cbnz	r4, 8007ccc <__pow5mult+0x48>
 8007cac:	2010      	movs	r0, #16
 8007cae:	f7fe f829 	bl	8005d04 <malloc>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	6270      	str	r0, [r6, #36]	; 0x24
 8007cb6:	b928      	cbnz	r0, 8007cc4 <__pow5mult+0x40>
 8007cb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007cbc:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <__pow5mult+0xac>)
 8007cbe:	481d      	ldr	r0, [pc, #116]	; (8007d34 <__pow5mult+0xb0>)
 8007cc0:	f001 f9bc 	bl	800903c <__assert_func>
 8007cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cc8:	6004      	str	r4, [r0, #0]
 8007cca:	60c4      	str	r4, [r0, #12]
 8007ccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cd4:	b94c      	cbnz	r4, 8007cea <__pow5mult+0x66>
 8007cd6:	f240 2171 	movw	r1, #625	; 0x271
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7ff ff14 	bl	8007b08 <__i2b>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ce8:	6003      	str	r3, [r0, #0]
 8007cea:	f04f 0900 	mov.w	r9, #0
 8007cee:	07eb      	lsls	r3, r5, #31
 8007cf0:	d50a      	bpl.n	8007d08 <__pow5mult+0x84>
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7ff ff1c 	bl	8007b34 <__multiply>
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4630      	mov	r0, r6
 8007d02:	f7ff fe4b 	bl	800799c <_Bfree>
 8007d06:	4647      	mov	r7, r8
 8007d08:	106d      	asrs	r5, r5, #1
 8007d0a:	d00b      	beq.n	8007d24 <__pow5mult+0xa0>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	b938      	cbnz	r0, 8007d20 <__pow5mult+0x9c>
 8007d10:	4622      	mov	r2, r4
 8007d12:	4621      	mov	r1, r4
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7ff ff0d 	bl	8007b34 <__multiply>
 8007d1a:	6020      	str	r0, [r4, #0]
 8007d1c:	f8c0 9000 	str.w	r9, [r0]
 8007d20:	4604      	mov	r4, r0
 8007d22:	e7e4      	b.n	8007cee <__pow5mult+0x6a>
 8007d24:	4638      	mov	r0, r7
 8007d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2a:	bf00      	nop
 8007d2c:	0800ab88 	.word	0x0800ab88
 8007d30:	0800a953 	.word	0x0800a953
 8007d34:	0800aa38 	.word	0x0800aa38

08007d38 <__lshift>:
 8007d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	4607      	mov	r7, r0
 8007d40:	4691      	mov	r9, r2
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	6849      	ldr	r1, [r1, #4]
 8007d46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d50:	f108 0601 	add.w	r6, r8, #1
 8007d54:	42b3      	cmp	r3, r6
 8007d56:	db0b      	blt.n	8007d70 <__lshift+0x38>
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff fddf 	bl	800791c <_Balloc>
 8007d5e:	4605      	mov	r5, r0
 8007d60:	b948      	cbnz	r0, 8007d76 <__lshift+0x3e>
 8007d62:	4602      	mov	r2, r0
 8007d64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d68:	4b29      	ldr	r3, [pc, #164]	; (8007e10 <__lshift+0xd8>)
 8007d6a:	482a      	ldr	r0, [pc, #168]	; (8007e14 <__lshift+0xdc>)
 8007d6c:	f001 f966 	bl	800903c <__assert_func>
 8007d70:	3101      	adds	r1, #1
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	e7ee      	b.n	8007d54 <__lshift+0x1c>
 8007d76:	2300      	movs	r3, #0
 8007d78:	f100 0114 	add.w	r1, r0, #20
 8007d7c:	f100 0210 	add.w	r2, r0, #16
 8007d80:	4618      	mov	r0, r3
 8007d82:	4553      	cmp	r3, sl
 8007d84:	db37      	blt.n	8007df6 <__lshift+0xbe>
 8007d86:	6920      	ldr	r0, [r4, #16]
 8007d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d8c:	f104 0314 	add.w	r3, r4, #20
 8007d90:	f019 091f 	ands.w	r9, r9, #31
 8007d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d9c:	d02f      	beq.n	8007dfe <__lshift+0xc6>
 8007d9e:	468a      	mov	sl, r1
 8007da0:	f04f 0c00 	mov.w	ip, #0
 8007da4:	f1c9 0e20 	rsb	lr, r9, #32
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	fa02 f209 	lsl.w	r2, r2, r9
 8007dae:	ea42 020c 	orr.w	r2, r2, ip
 8007db2:	f84a 2b04 	str.w	r2, [sl], #4
 8007db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dba:	4298      	cmp	r0, r3
 8007dbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007dc0:	d8f2      	bhi.n	8007da8 <__lshift+0x70>
 8007dc2:	1b03      	subs	r3, r0, r4
 8007dc4:	3b15      	subs	r3, #21
 8007dc6:	f023 0303 	bic.w	r3, r3, #3
 8007dca:	3304      	adds	r3, #4
 8007dcc:	f104 0215 	add.w	r2, r4, #21
 8007dd0:	4290      	cmp	r0, r2
 8007dd2:	bf38      	it	cc
 8007dd4:	2304      	movcc	r3, #4
 8007dd6:	f841 c003 	str.w	ip, [r1, r3]
 8007dda:	f1bc 0f00 	cmp.w	ip, #0
 8007dde:	d001      	beq.n	8007de4 <__lshift+0xac>
 8007de0:	f108 0602 	add.w	r6, r8, #2
 8007de4:	3e01      	subs	r6, #1
 8007de6:	4638      	mov	r0, r7
 8007de8:	4621      	mov	r1, r4
 8007dea:	612e      	str	r6, [r5, #16]
 8007dec:	f7ff fdd6 	bl	800799c <_Bfree>
 8007df0:	4628      	mov	r0, r5
 8007df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	e7c1      	b.n	8007d82 <__lshift+0x4a>
 8007dfe:	3904      	subs	r1, #4
 8007e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e04:	4298      	cmp	r0, r3
 8007e06:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e0a:	d8f9      	bhi.n	8007e00 <__lshift+0xc8>
 8007e0c:	e7ea      	b.n	8007de4 <__lshift+0xac>
 8007e0e:	bf00      	nop
 8007e10:	0800a9c5 	.word	0x0800a9c5
 8007e14:	0800aa38 	.word	0x0800aa38

08007e18 <__mcmp>:
 8007e18:	4603      	mov	r3, r0
 8007e1a:	690a      	ldr	r2, [r1, #16]
 8007e1c:	6900      	ldr	r0, [r0, #16]
 8007e1e:	b530      	push	{r4, r5, lr}
 8007e20:	1a80      	subs	r0, r0, r2
 8007e22:	d10d      	bne.n	8007e40 <__mcmp+0x28>
 8007e24:	3314      	adds	r3, #20
 8007e26:	3114      	adds	r1, #20
 8007e28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e38:	4295      	cmp	r5, r2
 8007e3a:	d002      	beq.n	8007e42 <__mcmp+0x2a>
 8007e3c:	d304      	bcc.n	8007e48 <__mcmp+0x30>
 8007e3e:	2001      	movs	r0, #1
 8007e40:	bd30      	pop	{r4, r5, pc}
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	d3f4      	bcc.n	8007e30 <__mcmp+0x18>
 8007e46:	e7fb      	b.n	8007e40 <__mcmp+0x28>
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	e7f8      	b.n	8007e40 <__mcmp+0x28>
	...

08007e50 <__mdiff>:
 8007e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	460d      	mov	r5, r1
 8007e56:	4607      	mov	r7, r0
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	4614      	mov	r4, r2
 8007e5e:	f7ff ffdb 	bl	8007e18 <__mcmp>
 8007e62:	1e06      	subs	r6, r0, #0
 8007e64:	d111      	bne.n	8007e8a <__mdiff+0x3a>
 8007e66:	4631      	mov	r1, r6
 8007e68:	4638      	mov	r0, r7
 8007e6a:	f7ff fd57 	bl	800791c <_Balloc>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <__mdiff+0x2e>
 8007e72:	f240 2132 	movw	r1, #562	; 0x232
 8007e76:	4b3a      	ldr	r3, [pc, #232]	; (8007f60 <__mdiff+0x110>)
 8007e78:	483a      	ldr	r0, [pc, #232]	; (8007f64 <__mdiff+0x114>)
 8007e7a:	f001 f8df 	bl	800903c <__assert_func>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e84:	4610      	mov	r0, r2
 8007e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8a:	bfa4      	itt	ge
 8007e8c:	4623      	movge	r3, r4
 8007e8e:	462c      	movge	r4, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	6861      	ldr	r1, [r4, #4]
 8007e94:	bfa6      	itte	ge
 8007e96:	461d      	movge	r5, r3
 8007e98:	2600      	movge	r6, #0
 8007e9a:	2601      	movlt	r6, #1
 8007e9c:	f7ff fd3e 	bl	800791c <_Balloc>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	b918      	cbnz	r0, 8007eac <__mdiff+0x5c>
 8007ea4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ea8:	4b2d      	ldr	r3, [pc, #180]	; (8007f60 <__mdiff+0x110>)
 8007eaa:	e7e5      	b.n	8007e78 <__mdiff+0x28>
 8007eac:	f102 0814 	add.w	r8, r2, #20
 8007eb0:	46c2      	mov	sl, r8
 8007eb2:	f04f 0c00 	mov.w	ip, #0
 8007eb6:	6927      	ldr	r7, [r4, #16]
 8007eb8:	60c6      	str	r6, [r0, #12]
 8007eba:	692e      	ldr	r6, [r5, #16]
 8007ebc:	f104 0014 	add.w	r0, r4, #20
 8007ec0:	f105 0914 	add.w	r9, r5, #20
 8007ec4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007ec8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ecc:	3410      	adds	r4, #16
 8007ece:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007ed2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ed6:	fa1f f18b 	uxth.w	r1, fp
 8007eda:	448c      	add	ip, r1
 8007edc:	b299      	uxth	r1, r3
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	ebac 0101 	sub.w	r1, ip, r1
 8007ee4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ee8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007eec:	b289      	uxth	r1, r1
 8007eee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007ef2:	454e      	cmp	r6, r9
 8007ef4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007ef8:	f84a 3b04 	str.w	r3, [sl], #4
 8007efc:	d8e7      	bhi.n	8007ece <__mdiff+0x7e>
 8007efe:	1b73      	subs	r3, r6, r5
 8007f00:	3b15      	subs	r3, #21
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	3515      	adds	r5, #21
 8007f08:	3304      	adds	r3, #4
 8007f0a:	42ae      	cmp	r6, r5
 8007f0c:	bf38      	it	cc
 8007f0e:	2304      	movcc	r3, #4
 8007f10:	4418      	add	r0, r3
 8007f12:	4443      	add	r3, r8
 8007f14:	461e      	mov	r6, r3
 8007f16:	4605      	mov	r5, r0
 8007f18:	4575      	cmp	r5, lr
 8007f1a:	d30e      	bcc.n	8007f3a <__mdiff+0xea>
 8007f1c:	f10e 0103 	add.w	r1, lr, #3
 8007f20:	1a09      	subs	r1, r1, r0
 8007f22:	f021 0103 	bic.w	r1, r1, #3
 8007f26:	3803      	subs	r0, #3
 8007f28:	4586      	cmp	lr, r0
 8007f2a:	bf38      	it	cc
 8007f2c:	2100      	movcc	r1, #0
 8007f2e:	4419      	add	r1, r3
 8007f30:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007f34:	b18b      	cbz	r3, 8007f5a <__mdiff+0x10a>
 8007f36:	6117      	str	r7, [r2, #16]
 8007f38:	e7a4      	b.n	8007e84 <__mdiff+0x34>
 8007f3a:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f3e:	fa1f f188 	uxth.w	r1, r8
 8007f42:	4461      	add	r1, ip
 8007f44:	140c      	asrs	r4, r1, #16
 8007f46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f4a:	b289      	uxth	r1, r1
 8007f4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f50:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007f54:	f846 1b04 	str.w	r1, [r6], #4
 8007f58:	e7de      	b.n	8007f18 <__mdiff+0xc8>
 8007f5a:	3f01      	subs	r7, #1
 8007f5c:	e7e8      	b.n	8007f30 <__mdiff+0xe0>
 8007f5e:	bf00      	nop
 8007f60:	0800a9c5 	.word	0x0800a9c5
 8007f64:	0800aa38 	.word	0x0800aa38

08007f68 <__d2b>:
 8007f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f72:	4690      	mov	r8, r2
 8007f74:	461d      	mov	r5, r3
 8007f76:	f7ff fcd1 	bl	800791c <_Balloc>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	b930      	cbnz	r0, 8007f8c <__d2b+0x24>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	f240 310a 	movw	r1, #778	; 0x30a
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <__d2b+0xb0>)
 8007f86:	4825      	ldr	r0, [pc, #148]	; (800801c <__d2b+0xb4>)
 8007f88:	f001 f858 	bl	800903c <__assert_func>
 8007f8c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007f90:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007f94:	bb2d      	cbnz	r5, 8007fe2 <__d2b+0x7a>
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	f1b8 0300 	subs.w	r3, r8, #0
 8007f9c:	d026      	beq.n	8007fec <__d2b+0x84>
 8007f9e:	4668      	mov	r0, sp
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	f7ff fd83 	bl	8007aac <__lo0bits>
 8007fa6:	9900      	ldr	r1, [sp, #0]
 8007fa8:	b1f0      	cbz	r0, 8007fe8 <__d2b+0x80>
 8007faa:	9a01      	ldr	r2, [sp, #4]
 8007fac:	f1c0 0320 	rsb	r3, r0, #32
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	40c2      	lsrs	r2, r0
 8007fb8:	6163      	str	r3, [r4, #20]
 8007fba:	9201      	str	r2, [sp, #4]
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	bf14      	ite	ne
 8007fc2:	2102      	movne	r1, #2
 8007fc4:	2101      	moveq	r1, #1
 8007fc6:	61a3      	str	r3, [r4, #24]
 8007fc8:	6121      	str	r1, [r4, #16]
 8007fca:	b1c5      	cbz	r5, 8007ffe <__d2b+0x96>
 8007fcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fd0:	4405      	add	r5, r0
 8007fd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fd6:	603d      	str	r5, [r7, #0]
 8007fd8:	6030      	str	r0, [r6, #0]
 8007fda:	4620      	mov	r0, r4
 8007fdc:	b002      	add	sp, #8
 8007fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fe6:	e7d6      	b.n	8007f96 <__d2b+0x2e>
 8007fe8:	6161      	str	r1, [r4, #20]
 8007fea:	e7e7      	b.n	8007fbc <__d2b+0x54>
 8007fec:	a801      	add	r0, sp, #4
 8007fee:	f7ff fd5d 	bl	8007aac <__lo0bits>
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	9b01      	ldr	r3, [sp, #4]
 8007ff6:	6121      	str	r1, [r4, #16]
 8007ff8:	6163      	str	r3, [r4, #20]
 8007ffa:	3020      	adds	r0, #32
 8007ffc:	e7e5      	b.n	8007fca <__d2b+0x62>
 8007ffe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008002:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008006:	6038      	str	r0, [r7, #0]
 8008008:	6918      	ldr	r0, [r3, #16]
 800800a:	f7ff fd2f 	bl	8007a6c <__hi0bits>
 800800e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008012:	6031      	str	r1, [r6, #0]
 8008014:	e7e1      	b.n	8007fda <__d2b+0x72>
 8008016:	bf00      	nop
 8008018:	0800a9c5 	.word	0x0800a9c5
 800801c:	0800aa38 	.word	0x0800aa38

08008020 <__ssputs_r>:
 8008020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008024:	688e      	ldr	r6, [r1, #8]
 8008026:	4682      	mov	sl, r0
 8008028:	429e      	cmp	r6, r3
 800802a:	460c      	mov	r4, r1
 800802c:	4690      	mov	r8, r2
 800802e:	461f      	mov	r7, r3
 8008030:	d838      	bhi.n	80080a4 <__ssputs_r+0x84>
 8008032:	898a      	ldrh	r2, [r1, #12]
 8008034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008038:	d032      	beq.n	80080a0 <__ssputs_r+0x80>
 800803a:	6825      	ldr	r5, [r4, #0]
 800803c:	6909      	ldr	r1, [r1, #16]
 800803e:	3301      	adds	r3, #1
 8008040:	eba5 0901 	sub.w	r9, r5, r1
 8008044:	6965      	ldr	r5, [r4, #20]
 8008046:	444b      	add	r3, r9
 8008048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800804c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008050:	106d      	asrs	r5, r5, #1
 8008052:	429d      	cmp	r5, r3
 8008054:	bf38      	it	cc
 8008056:	461d      	movcc	r5, r3
 8008058:	0553      	lsls	r3, r2, #21
 800805a:	d531      	bpl.n	80080c0 <__ssputs_r+0xa0>
 800805c:	4629      	mov	r1, r5
 800805e:	f7fd fedd 	bl	8005e1c <_malloc_r>
 8008062:	4606      	mov	r6, r0
 8008064:	b950      	cbnz	r0, 800807c <__ssputs_r+0x5c>
 8008066:	230c      	movs	r3, #12
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	f8ca 3000 	str.w	r3, [sl]
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800807c:	464a      	mov	r2, r9
 800807e:	6921      	ldr	r1, [r4, #16]
 8008080:	f7ff fc32 	bl	80078e8 <memcpy>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800808a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	6126      	str	r6, [r4, #16]
 8008092:	444e      	add	r6, r9
 8008094:	6026      	str	r6, [r4, #0]
 8008096:	463e      	mov	r6, r7
 8008098:	6165      	str	r5, [r4, #20]
 800809a:	eba5 0509 	sub.w	r5, r5, r9
 800809e:	60a5      	str	r5, [r4, #8]
 80080a0:	42be      	cmp	r6, r7
 80080a2:	d900      	bls.n	80080a6 <__ssputs_r+0x86>
 80080a4:	463e      	mov	r6, r7
 80080a6:	4632      	mov	r2, r6
 80080a8:	4641      	mov	r1, r8
 80080aa:	6820      	ldr	r0, [r4, #0]
 80080ac:	f001 f92c 	bl	8009308 <memmove>
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	2000      	movs	r0, #0
 80080b4:	1b9b      	subs	r3, r3, r6
 80080b6:	60a3      	str	r3, [r4, #8]
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	4433      	add	r3, r6
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	e7db      	b.n	8008078 <__ssputs_r+0x58>
 80080c0:	462a      	mov	r2, r5
 80080c2:	f001 f93b 	bl	800933c <_realloc_r>
 80080c6:	4606      	mov	r6, r0
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d1e1      	bne.n	8008090 <__ssputs_r+0x70>
 80080cc:	4650      	mov	r0, sl
 80080ce:	6921      	ldr	r1, [r4, #16]
 80080d0:	f7fd fe3c 	bl	8005d4c <_free_r>
 80080d4:	e7c7      	b.n	8008066 <__ssputs_r+0x46>
	...

080080d8 <_svfiprintf_r>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	4698      	mov	r8, r3
 80080de:	898b      	ldrh	r3, [r1, #12]
 80080e0:	4607      	mov	r7, r0
 80080e2:	061b      	lsls	r3, r3, #24
 80080e4:	460d      	mov	r5, r1
 80080e6:	4614      	mov	r4, r2
 80080e8:	b09d      	sub	sp, #116	; 0x74
 80080ea:	d50e      	bpl.n	800810a <_svfiprintf_r+0x32>
 80080ec:	690b      	ldr	r3, [r1, #16]
 80080ee:	b963      	cbnz	r3, 800810a <_svfiprintf_r+0x32>
 80080f0:	2140      	movs	r1, #64	; 0x40
 80080f2:	f7fd fe93 	bl	8005e1c <_malloc_r>
 80080f6:	6028      	str	r0, [r5, #0]
 80080f8:	6128      	str	r0, [r5, #16]
 80080fa:	b920      	cbnz	r0, 8008106 <_svfiprintf_r+0x2e>
 80080fc:	230c      	movs	r3, #12
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	e0d1      	b.n	80082aa <_svfiprintf_r+0x1d2>
 8008106:	2340      	movs	r3, #64	; 0x40
 8008108:	616b      	str	r3, [r5, #20]
 800810a:	2300      	movs	r3, #0
 800810c:	9309      	str	r3, [sp, #36]	; 0x24
 800810e:	2320      	movs	r3, #32
 8008110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008114:	2330      	movs	r3, #48	; 0x30
 8008116:	f04f 0901 	mov.w	r9, #1
 800811a:	f8cd 800c 	str.w	r8, [sp, #12]
 800811e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082c4 <_svfiprintf_r+0x1ec>
 8008122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008126:	4623      	mov	r3, r4
 8008128:	469a      	mov	sl, r3
 800812a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812e:	b10a      	cbz	r2, 8008134 <_svfiprintf_r+0x5c>
 8008130:	2a25      	cmp	r2, #37	; 0x25
 8008132:	d1f9      	bne.n	8008128 <_svfiprintf_r+0x50>
 8008134:	ebba 0b04 	subs.w	fp, sl, r4
 8008138:	d00b      	beq.n	8008152 <_svfiprintf_r+0x7a>
 800813a:	465b      	mov	r3, fp
 800813c:	4622      	mov	r2, r4
 800813e:	4629      	mov	r1, r5
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ff6d 	bl	8008020 <__ssputs_r>
 8008146:	3001      	adds	r0, #1
 8008148:	f000 80aa 	beq.w	80082a0 <_svfiprintf_r+0x1c8>
 800814c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800814e:	445a      	add	r2, fp
 8008150:	9209      	str	r2, [sp, #36]	; 0x24
 8008152:	f89a 3000 	ldrb.w	r3, [sl]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 80a2 	beq.w	80082a0 <_svfiprintf_r+0x1c8>
 800815c:	2300      	movs	r3, #0
 800815e:	f04f 32ff 	mov.w	r2, #4294967295
 8008162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008166:	f10a 0a01 	add.w	sl, sl, #1
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	9307      	str	r3, [sp, #28]
 800816e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008172:	931a      	str	r3, [sp, #104]	; 0x68
 8008174:	4654      	mov	r4, sl
 8008176:	2205      	movs	r2, #5
 8008178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817c:	4851      	ldr	r0, [pc, #324]	; (80082c4 <_svfiprintf_r+0x1ec>)
 800817e:	f7ff fba5 	bl	80078cc <memchr>
 8008182:	9a04      	ldr	r2, [sp, #16]
 8008184:	b9d8      	cbnz	r0, 80081be <_svfiprintf_r+0xe6>
 8008186:	06d0      	lsls	r0, r2, #27
 8008188:	bf44      	itt	mi
 800818a:	2320      	movmi	r3, #32
 800818c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008190:	0711      	lsls	r1, r2, #28
 8008192:	bf44      	itt	mi
 8008194:	232b      	movmi	r3, #43	; 0x2b
 8008196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800819a:	f89a 3000 	ldrb.w	r3, [sl]
 800819e:	2b2a      	cmp	r3, #42	; 0x2a
 80081a0:	d015      	beq.n	80081ce <_svfiprintf_r+0xf6>
 80081a2:	4654      	mov	r4, sl
 80081a4:	2000      	movs	r0, #0
 80081a6:	f04f 0c0a 	mov.w	ip, #10
 80081aa:	9a07      	ldr	r2, [sp, #28]
 80081ac:	4621      	mov	r1, r4
 80081ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b2:	3b30      	subs	r3, #48	; 0x30
 80081b4:	2b09      	cmp	r3, #9
 80081b6:	d94e      	bls.n	8008256 <_svfiprintf_r+0x17e>
 80081b8:	b1b0      	cbz	r0, 80081e8 <_svfiprintf_r+0x110>
 80081ba:	9207      	str	r2, [sp, #28]
 80081bc:	e014      	b.n	80081e8 <_svfiprintf_r+0x110>
 80081be:	eba0 0308 	sub.w	r3, r0, r8
 80081c2:	fa09 f303 	lsl.w	r3, r9, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	46a2      	mov	sl, r4
 80081ca:	9304      	str	r3, [sp, #16]
 80081cc:	e7d2      	b.n	8008174 <_svfiprintf_r+0x9c>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	1d19      	adds	r1, r3, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	9103      	str	r1, [sp, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfbb      	ittet	lt
 80081da:	425b      	neglt	r3, r3
 80081dc:	f042 0202 	orrlt.w	r2, r2, #2
 80081e0:	9307      	strge	r3, [sp, #28]
 80081e2:	9307      	strlt	r3, [sp, #28]
 80081e4:	bfb8      	it	lt
 80081e6:	9204      	strlt	r2, [sp, #16]
 80081e8:	7823      	ldrb	r3, [r4, #0]
 80081ea:	2b2e      	cmp	r3, #46	; 0x2e
 80081ec:	d10c      	bne.n	8008208 <_svfiprintf_r+0x130>
 80081ee:	7863      	ldrb	r3, [r4, #1]
 80081f0:	2b2a      	cmp	r3, #42	; 0x2a
 80081f2:	d135      	bne.n	8008260 <_svfiprintf_r+0x188>
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	3402      	adds	r4, #2
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9203      	str	r2, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfb8      	it	lt
 8008202:	f04f 33ff 	movlt.w	r3, #4294967295
 8008206:	9305      	str	r3, [sp, #20]
 8008208:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80082c8 <_svfiprintf_r+0x1f0>
 800820c:	2203      	movs	r2, #3
 800820e:	4650      	mov	r0, sl
 8008210:	7821      	ldrb	r1, [r4, #0]
 8008212:	f7ff fb5b 	bl	80078cc <memchr>
 8008216:	b140      	cbz	r0, 800822a <_svfiprintf_r+0x152>
 8008218:	2340      	movs	r3, #64	; 0x40
 800821a:	eba0 000a 	sub.w	r0, r0, sl
 800821e:	fa03 f000 	lsl.w	r0, r3, r0
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	3401      	adds	r4, #1
 8008226:	4303      	orrs	r3, r0
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	2206      	movs	r2, #6
 8008230:	4826      	ldr	r0, [pc, #152]	; (80082cc <_svfiprintf_r+0x1f4>)
 8008232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008236:	f7ff fb49 	bl	80078cc <memchr>
 800823a:	2800      	cmp	r0, #0
 800823c:	d038      	beq.n	80082b0 <_svfiprintf_r+0x1d8>
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <_svfiprintf_r+0x1f8>)
 8008240:	bb1b      	cbnz	r3, 800828a <_svfiprintf_r+0x1b2>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	3307      	adds	r3, #7
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	3308      	adds	r3, #8
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008250:	4433      	add	r3, r6
 8008252:	9309      	str	r3, [sp, #36]	; 0x24
 8008254:	e767      	b.n	8008126 <_svfiprintf_r+0x4e>
 8008256:	460c      	mov	r4, r1
 8008258:	2001      	movs	r0, #1
 800825a:	fb0c 3202 	mla	r2, ip, r2, r3
 800825e:	e7a5      	b.n	80081ac <_svfiprintf_r+0xd4>
 8008260:	2300      	movs	r3, #0
 8008262:	f04f 0c0a 	mov.w	ip, #10
 8008266:	4619      	mov	r1, r3
 8008268:	3401      	adds	r4, #1
 800826a:	9305      	str	r3, [sp, #20]
 800826c:	4620      	mov	r0, r4
 800826e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008272:	3a30      	subs	r2, #48	; 0x30
 8008274:	2a09      	cmp	r2, #9
 8008276:	d903      	bls.n	8008280 <_svfiprintf_r+0x1a8>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0c5      	beq.n	8008208 <_svfiprintf_r+0x130>
 800827c:	9105      	str	r1, [sp, #20]
 800827e:	e7c3      	b.n	8008208 <_svfiprintf_r+0x130>
 8008280:	4604      	mov	r4, r0
 8008282:	2301      	movs	r3, #1
 8008284:	fb0c 2101 	mla	r1, ip, r1, r2
 8008288:	e7f0      	b.n	800826c <_svfiprintf_r+0x194>
 800828a:	ab03      	add	r3, sp, #12
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	462a      	mov	r2, r5
 8008290:	4638      	mov	r0, r7
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <_svfiprintf_r+0x1fc>)
 8008294:	a904      	add	r1, sp, #16
 8008296:	f7fd fed3 	bl	8006040 <_printf_float>
 800829a:	1c42      	adds	r2, r0, #1
 800829c:	4606      	mov	r6, r0
 800829e:	d1d6      	bne.n	800824e <_svfiprintf_r+0x176>
 80082a0:	89ab      	ldrh	r3, [r5, #12]
 80082a2:	065b      	lsls	r3, r3, #25
 80082a4:	f53f af2c 	bmi.w	8008100 <_svfiprintf_r+0x28>
 80082a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082aa:	b01d      	add	sp, #116	; 0x74
 80082ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	462a      	mov	r2, r5
 80082b6:	4638      	mov	r0, r7
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <_svfiprintf_r+0x1fc>)
 80082ba:	a904      	add	r1, sp, #16
 80082bc:	f7fe f95c 	bl	8006578 <_printf_i>
 80082c0:	e7eb      	b.n	800829a <_svfiprintf_r+0x1c2>
 80082c2:	bf00      	nop
 80082c4:	0800ab94 	.word	0x0800ab94
 80082c8:	0800ab9a 	.word	0x0800ab9a
 80082cc:	0800ab9e 	.word	0x0800ab9e
 80082d0:	08006041 	.word	0x08006041
 80082d4:	08008021 	.word	0x08008021

080082d8 <_sungetc_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	1c4b      	adds	r3, r1, #1
 80082dc:	4614      	mov	r4, r2
 80082de:	d103      	bne.n	80082e8 <_sungetc_r+0x10>
 80082e0:	f04f 35ff 	mov.w	r5, #4294967295
 80082e4:	4628      	mov	r0, r5
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	8993      	ldrh	r3, [r2, #12]
 80082ea:	b2cd      	uxtb	r5, r1
 80082ec:	f023 0320 	bic.w	r3, r3, #32
 80082f0:	8193      	strh	r3, [r2, #12]
 80082f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f4:	6852      	ldr	r2, [r2, #4]
 80082f6:	b18b      	cbz	r3, 800831c <_sungetc_r+0x44>
 80082f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082fa:	4293      	cmp	r3, r2
 80082fc:	dd08      	ble.n	8008310 <_sungetc_r+0x38>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	1e5a      	subs	r2, r3, #1
 8008302:	6022      	str	r2, [r4, #0]
 8008304:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	3301      	adds	r3, #1
 800830c:	6063      	str	r3, [r4, #4]
 800830e:	e7e9      	b.n	80082e4 <_sungetc_r+0xc>
 8008310:	4621      	mov	r1, r4
 8008312:	f000 fd9b 	bl	8008e4c <__submore>
 8008316:	2800      	cmp	r0, #0
 8008318:	d0f1      	beq.n	80082fe <_sungetc_r+0x26>
 800831a:	e7e1      	b.n	80082e0 <_sungetc_r+0x8>
 800831c:	6921      	ldr	r1, [r4, #16]
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	b151      	cbz	r1, 8008338 <_sungetc_r+0x60>
 8008322:	4299      	cmp	r1, r3
 8008324:	d208      	bcs.n	8008338 <_sungetc_r+0x60>
 8008326:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800832a:	42a9      	cmp	r1, r5
 800832c:	d104      	bne.n	8008338 <_sungetc_r+0x60>
 800832e:	3b01      	subs	r3, #1
 8008330:	3201      	adds	r2, #1
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	6062      	str	r2, [r4, #4]
 8008336:	e7d5      	b.n	80082e4 <_sungetc_r+0xc>
 8008338:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800833c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008340:	6363      	str	r3, [r4, #52]	; 0x34
 8008342:	2303      	movs	r3, #3
 8008344:	63a3      	str	r3, [r4, #56]	; 0x38
 8008346:	4623      	mov	r3, r4
 8008348:	f803 5f46 	strb.w	r5, [r3, #70]!
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	2301      	movs	r3, #1
 8008350:	e7dc      	b.n	800830c <_sungetc_r+0x34>

08008352 <__ssrefill_r>:
 8008352:	b510      	push	{r4, lr}
 8008354:	460c      	mov	r4, r1
 8008356:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008358:	b169      	cbz	r1, 8008376 <__ssrefill_r+0x24>
 800835a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800835e:	4299      	cmp	r1, r3
 8008360:	d001      	beq.n	8008366 <__ssrefill_r+0x14>
 8008362:	f7fd fcf3 	bl	8005d4c <_free_r>
 8008366:	2000      	movs	r0, #0
 8008368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800836a:	6360      	str	r0, [r4, #52]	; 0x34
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	b113      	cbz	r3, 8008376 <__ssrefill_r+0x24>
 8008370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	bd10      	pop	{r4, pc}
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	f04f 30ff 	mov.w	r0, #4294967295
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	2300      	movs	r3, #0
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f043 0320 	orr.w	r3, r3, #32
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	e7f3      	b.n	8008374 <__ssrefill_r+0x22>

0800838c <__ssvfiscanf_r>:
 800838c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	460c      	mov	r4, r1
 8008392:	2100      	movs	r1, #0
 8008394:	4606      	mov	r6, r0
 8008396:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800839a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800839e:	49a7      	ldr	r1, [pc, #668]	; (800863c <__ssvfiscanf_r+0x2b0>)
 80083a0:	f10d 0804 	add.w	r8, sp, #4
 80083a4:	91a0      	str	r1, [sp, #640]	; 0x280
 80083a6:	49a6      	ldr	r1, [pc, #664]	; (8008640 <__ssvfiscanf_r+0x2b4>)
 80083a8:	4fa6      	ldr	r7, [pc, #664]	; (8008644 <__ssvfiscanf_r+0x2b8>)
 80083aa:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8008648 <__ssvfiscanf_r+0x2bc>
 80083ae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80083b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	7813      	ldrb	r3, [r2, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 815c 	beq.w	8008676 <__ssvfiscanf_r+0x2ea>
 80083be:	5dd9      	ldrb	r1, [r3, r7]
 80083c0:	1c55      	adds	r5, r2, #1
 80083c2:	f011 0108 	ands.w	r1, r1, #8
 80083c6:	d019      	beq.n	80083fc <__ssvfiscanf_r+0x70>
 80083c8:	6863      	ldr	r3, [r4, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dd0f      	ble.n	80083ee <__ssvfiscanf_r+0x62>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	5cba      	ldrb	r2, [r7, r2]
 80083d4:	0712      	lsls	r2, r2, #28
 80083d6:	d401      	bmi.n	80083dc <__ssvfiscanf_r+0x50>
 80083d8:	462a      	mov	r2, r5
 80083da:	e7ec      	b.n	80083b6 <__ssvfiscanf_r+0x2a>
 80083dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083de:	3301      	adds	r3, #1
 80083e0:	3201      	adds	r2, #1
 80083e2:	9245      	str	r2, [sp, #276]	; 0x114
 80083e4:	6862      	ldr	r2, [r4, #4]
 80083e6:	6023      	str	r3, [r4, #0]
 80083e8:	3a01      	subs	r2, #1
 80083ea:	6062      	str	r2, [r4, #4]
 80083ec:	e7ec      	b.n	80083c8 <__ssvfiscanf_r+0x3c>
 80083ee:	4621      	mov	r1, r4
 80083f0:	4630      	mov	r0, r6
 80083f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083f4:	4798      	blx	r3
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0e9      	beq.n	80083ce <__ssvfiscanf_r+0x42>
 80083fa:	e7ed      	b.n	80083d8 <__ssvfiscanf_r+0x4c>
 80083fc:	2b25      	cmp	r3, #37	; 0x25
 80083fe:	d012      	beq.n	8008426 <__ssvfiscanf_r+0x9a>
 8008400:	469a      	mov	sl, r3
 8008402:	6863      	ldr	r3, [r4, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f340 8094 	ble.w	8008532 <__ssvfiscanf_r+0x1a6>
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	7813      	ldrb	r3, [r2, #0]
 800840e:	4553      	cmp	r3, sl
 8008410:	f040 8131 	bne.w	8008676 <__ssvfiscanf_r+0x2ea>
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	3201      	adds	r2, #1
 8008418:	3b01      	subs	r3, #1
 800841a:	6063      	str	r3, [r4, #4]
 800841c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800841e:	6022      	str	r2, [r4, #0]
 8008420:	3301      	adds	r3, #1
 8008422:	9345      	str	r3, [sp, #276]	; 0x114
 8008424:	e7d8      	b.n	80083d8 <__ssvfiscanf_r+0x4c>
 8008426:	9141      	str	r1, [sp, #260]	; 0x104
 8008428:	9143      	str	r1, [sp, #268]	; 0x10c
 800842a:	7853      	ldrb	r3, [r2, #1]
 800842c:	2b2a      	cmp	r3, #42	; 0x2a
 800842e:	bf04      	itt	eq
 8008430:	2310      	moveq	r3, #16
 8008432:	1c95      	addeq	r5, r2, #2
 8008434:	f04f 020a 	mov.w	r2, #10
 8008438:	bf08      	it	eq
 800843a:	9341      	streq	r3, [sp, #260]	; 0x104
 800843c:	46aa      	mov	sl, r5
 800843e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008442:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008446:	2b09      	cmp	r3, #9
 8008448:	d91d      	bls.n	8008486 <__ssvfiscanf_r+0xfa>
 800844a:	2203      	movs	r2, #3
 800844c:	487e      	ldr	r0, [pc, #504]	; (8008648 <__ssvfiscanf_r+0x2bc>)
 800844e:	f7ff fa3d 	bl	80078cc <memchr>
 8008452:	b140      	cbz	r0, 8008466 <__ssvfiscanf_r+0xda>
 8008454:	2301      	movs	r3, #1
 8008456:	4655      	mov	r5, sl
 8008458:	eba0 0009 	sub.w	r0, r0, r9
 800845c:	fa03 f000 	lsl.w	r0, r3, r0
 8008460:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008462:	4318      	orrs	r0, r3
 8008464:	9041      	str	r0, [sp, #260]	; 0x104
 8008466:	f815 3b01 	ldrb.w	r3, [r5], #1
 800846a:	2b78      	cmp	r3, #120	; 0x78
 800846c:	d806      	bhi.n	800847c <__ssvfiscanf_r+0xf0>
 800846e:	2b57      	cmp	r3, #87	; 0x57
 8008470:	d810      	bhi.n	8008494 <__ssvfiscanf_r+0x108>
 8008472:	2b25      	cmp	r3, #37	; 0x25
 8008474:	d0c4      	beq.n	8008400 <__ssvfiscanf_r+0x74>
 8008476:	d857      	bhi.n	8008528 <__ssvfiscanf_r+0x19c>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d065      	beq.n	8008548 <__ssvfiscanf_r+0x1bc>
 800847c:	2303      	movs	r3, #3
 800847e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008480:	230a      	movs	r3, #10
 8008482:	9342      	str	r3, [sp, #264]	; 0x108
 8008484:	e072      	b.n	800856c <__ssvfiscanf_r+0x1e0>
 8008486:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008488:	4655      	mov	r5, sl
 800848a:	fb02 1103 	mla	r1, r2, r3, r1
 800848e:	3930      	subs	r1, #48	; 0x30
 8008490:	9143      	str	r1, [sp, #268]	; 0x10c
 8008492:	e7d3      	b.n	800843c <__ssvfiscanf_r+0xb0>
 8008494:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008498:	2a20      	cmp	r2, #32
 800849a:	d8ef      	bhi.n	800847c <__ssvfiscanf_r+0xf0>
 800849c:	a101      	add	r1, pc, #4	; (adr r1, 80084a4 <__ssvfiscanf_r+0x118>)
 800849e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084a2:	bf00      	nop
 80084a4:	08008557 	.word	0x08008557
 80084a8:	0800847d 	.word	0x0800847d
 80084ac:	0800847d 	.word	0x0800847d
 80084b0:	080085b5 	.word	0x080085b5
 80084b4:	0800847d 	.word	0x0800847d
 80084b8:	0800847d 	.word	0x0800847d
 80084bc:	0800847d 	.word	0x0800847d
 80084c0:	0800847d 	.word	0x0800847d
 80084c4:	0800847d 	.word	0x0800847d
 80084c8:	0800847d 	.word	0x0800847d
 80084cc:	0800847d 	.word	0x0800847d
 80084d0:	080085cb 	.word	0x080085cb
 80084d4:	080085a1 	.word	0x080085a1
 80084d8:	0800852f 	.word	0x0800852f
 80084dc:	0800852f 	.word	0x0800852f
 80084e0:	0800852f 	.word	0x0800852f
 80084e4:	0800847d 	.word	0x0800847d
 80084e8:	080085a5 	.word	0x080085a5
 80084ec:	0800847d 	.word	0x0800847d
 80084f0:	0800847d 	.word	0x0800847d
 80084f4:	0800847d 	.word	0x0800847d
 80084f8:	0800847d 	.word	0x0800847d
 80084fc:	080085db 	.word	0x080085db
 8008500:	080085ad 	.word	0x080085ad
 8008504:	0800854f 	.word	0x0800854f
 8008508:	0800847d 	.word	0x0800847d
 800850c:	0800847d 	.word	0x0800847d
 8008510:	080085d7 	.word	0x080085d7
 8008514:	0800847d 	.word	0x0800847d
 8008518:	080085a1 	.word	0x080085a1
 800851c:	0800847d 	.word	0x0800847d
 8008520:	0800847d 	.word	0x0800847d
 8008524:	08008557 	.word	0x08008557
 8008528:	3b45      	subs	r3, #69	; 0x45
 800852a:	2b02      	cmp	r3, #2
 800852c:	d8a6      	bhi.n	800847c <__ssvfiscanf_r+0xf0>
 800852e:	2305      	movs	r3, #5
 8008530:	e01b      	b.n	800856a <__ssvfiscanf_r+0x1de>
 8008532:	4621      	mov	r1, r4
 8008534:	4630      	mov	r0, r6
 8008536:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008538:	4798      	blx	r3
 800853a:	2800      	cmp	r0, #0
 800853c:	f43f af65 	beq.w	800840a <__ssvfiscanf_r+0x7e>
 8008540:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008542:	2800      	cmp	r0, #0
 8008544:	f040 808d 	bne.w	8008662 <__ssvfiscanf_r+0x2d6>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	e08f      	b.n	800866e <__ssvfiscanf_r+0x2e2>
 800854e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008550:	f042 0220 	orr.w	r2, r2, #32
 8008554:	9241      	str	r2, [sp, #260]	; 0x104
 8008556:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800855c:	9241      	str	r2, [sp, #260]	; 0x104
 800855e:	2210      	movs	r2, #16
 8008560:	2b6f      	cmp	r3, #111	; 0x6f
 8008562:	bf34      	ite	cc
 8008564:	2303      	movcc	r3, #3
 8008566:	2304      	movcs	r3, #4
 8008568:	9242      	str	r2, [sp, #264]	; 0x108
 800856a:	9347      	str	r3, [sp, #284]	; 0x11c
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	dd42      	ble.n	80085f8 <__ssvfiscanf_r+0x26c>
 8008572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008574:	0659      	lsls	r1, r3, #25
 8008576:	d404      	bmi.n	8008582 <__ssvfiscanf_r+0x1f6>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	781a      	ldrb	r2, [r3, #0]
 800857c:	5cba      	ldrb	r2, [r7, r2]
 800857e:	0712      	lsls	r2, r2, #28
 8008580:	d441      	bmi.n	8008606 <__ssvfiscanf_r+0x27a>
 8008582:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008584:	2b02      	cmp	r3, #2
 8008586:	dc50      	bgt.n	800862a <__ssvfiscanf_r+0x29e>
 8008588:	466b      	mov	r3, sp
 800858a:	4622      	mov	r2, r4
 800858c:	4630      	mov	r0, r6
 800858e:	a941      	add	r1, sp, #260	; 0x104
 8008590:	f000 f9ce 	bl	8008930 <_scanf_chars>
 8008594:	2801      	cmp	r0, #1
 8008596:	d06e      	beq.n	8008676 <__ssvfiscanf_r+0x2ea>
 8008598:	2802      	cmp	r0, #2
 800859a:	f47f af1d 	bne.w	80083d8 <__ssvfiscanf_r+0x4c>
 800859e:	e7cf      	b.n	8008540 <__ssvfiscanf_r+0x1b4>
 80085a0:	220a      	movs	r2, #10
 80085a2:	e7dd      	b.n	8008560 <__ssvfiscanf_r+0x1d4>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9342      	str	r3, [sp, #264]	; 0x108
 80085a8:	2303      	movs	r3, #3
 80085aa:	e7de      	b.n	800856a <__ssvfiscanf_r+0x1de>
 80085ac:	2308      	movs	r3, #8
 80085ae:	9342      	str	r3, [sp, #264]	; 0x108
 80085b0:	2304      	movs	r3, #4
 80085b2:	e7da      	b.n	800856a <__ssvfiscanf_r+0x1de>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4640      	mov	r0, r8
 80085b8:	f000 fb1e 	bl	8008bf8 <__sccl>
 80085bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085be:	4605      	mov	r5, r0
 80085c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c4:	9341      	str	r3, [sp, #260]	; 0x104
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7cf      	b.n	800856a <__ssvfiscanf_r+0x1de>
 80085ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d0:	9341      	str	r3, [sp, #260]	; 0x104
 80085d2:	2300      	movs	r3, #0
 80085d4:	e7c9      	b.n	800856a <__ssvfiscanf_r+0x1de>
 80085d6:	2302      	movs	r3, #2
 80085d8:	e7c7      	b.n	800856a <__ssvfiscanf_r+0x1de>
 80085da:	9841      	ldr	r0, [sp, #260]	; 0x104
 80085dc:	06c3      	lsls	r3, r0, #27
 80085de:	f53f aefb 	bmi.w	80083d8 <__ssvfiscanf_r+0x4c>
 80085e2:	9b00      	ldr	r3, [sp, #0]
 80085e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80085e6:	1d19      	adds	r1, r3, #4
 80085e8:	9100      	str	r1, [sp, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f010 0f01 	tst.w	r0, #1
 80085f0:	bf14      	ite	ne
 80085f2:	801a      	strhne	r2, [r3, #0]
 80085f4:	601a      	streq	r2, [r3, #0]
 80085f6:	e6ef      	b.n	80083d8 <__ssvfiscanf_r+0x4c>
 80085f8:	4621      	mov	r1, r4
 80085fa:	4630      	mov	r0, r6
 80085fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80085fe:	4798      	blx	r3
 8008600:	2800      	cmp	r0, #0
 8008602:	d0b6      	beq.n	8008572 <__ssvfiscanf_r+0x1e6>
 8008604:	e79c      	b.n	8008540 <__ssvfiscanf_r+0x1b4>
 8008606:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008608:	3201      	adds	r2, #1
 800860a:	9245      	str	r2, [sp, #276]	; 0x114
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	3a01      	subs	r2, #1
 8008610:	2a00      	cmp	r2, #0
 8008612:	6062      	str	r2, [r4, #4]
 8008614:	dd02      	ble.n	800861c <__ssvfiscanf_r+0x290>
 8008616:	3301      	adds	r3, #1
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	e7ad      	b.n	8008578 <__ssvfiscanf_r+0x1ec>
 800861c:	4621      	mov	r1, r4
 800861e:	4630      	mov	r0, r6
 8008620:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008622:	4798      	blx	r3
 8008624:	2800      	cmp	r0, #0
 8008626:	d0a7      	beq.n	8008578 <__ssvfiscanf_r+0x1ec>
 8008628:	e78a      	b.n	8008540 <__ssvfiscanf_r+0x1b4>
 800862a:	2b04      	cmp	r3, #4
 800862c:	dc0e      	bgt.n	800864c <__ssvfiscanf_r+0x2c0>
 800862e:	466b      	mov	r3, sp
 8008630:	4622      	mov	r2, r4
 8008632:	4630      	mov	r0, r6
 8008634:	a941      	add	r1, sp, #260	; 0x104
 8008636:	f000 f9d5 	bl	80089e4 <_scanf_i>
 800863a:	e7ab      	b.n	8008594 <__ssvfiscanf_r+0x208>
 800863c:	080082d9 	.word	0x080082d9
 8008640:	08008353 	.word	0x08008353
 8008644:	0800abfd 	.word	0x0800abfd
 8008648:	0800ab9a 	.word	0x0800ab9a
 800864c:	4b0b      	ldr	r3, [pc, #44]	; (800867c <__ssvfiscanf_r+0x2f0>)
 800864e:	2b00      	cmp	r3, #0
 8008650:	f43f aec2 	beq.w	80083d8 <__ssvfiscanf_r+0x4c>
 8008654:	466b      	mov	r3, sp
 8008656:	4622      	mov	r2, r4
 8008658:	4630      	mov	r0, r6
 800865a:	a941      	add	r1, sp, #260	; 0x104
 800865c:	f3af 8000 	nop.w
 8008660:	e798      	b.n	8008594 <__ssvfiscanf_r+0x208>
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008668:	bf18      	it	ne
 800866a:	f04f 30ff 	movne.w	r0, #4294967295
 800866e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008676:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008678:	e7f9      	b.n	800866e <__ssvfiscanf_r+0x2e2>
 800867a:	bf00      	nop
 800867c:	00000000 	.word	0x00000000

08008680 <__sfputc_r>:
 8008680:	6893      	ldr	r3, [r2, #8]
 8008682:	b410      	push	{r4}
 8008684:	3b01      	subs	r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	6093      	str	r3, [r2, #8]
 800868a:	da07      	bge.n	800869c <__sfputc_r+0x1c>
 800868c:	6994      	ldr	r4, [r2, #24]
 800868e:	42a3      	cmp	r3, r4
 8008690:	db01      	blt.n	8008696 <__sfputc_r+0x16>
 8008692:	290a      	cmp	r1, #10
 8008694:	d102      	bne.n	800869c <__sfputc_r+0x1c>
 8008696:	bc10      	pop	{r4}
 8008698:	f000 bc10 	b.w	8008ebc <__swbuf_r>
 800869c:	6813      	ldr	r3, [r2, #0]
 800869e:	1c58      	adds	r0, r3, #1
 80086a0:	6010      	str	r0, [r2, #0]
 80086a2:	7019      	strb	r1, [r3, #0]
 80086a4:	4608      	mov	r0, r1
 80086a6:	bc10      	pop	{r4}
 80086a8:	4770      	bx	lr

080086aa <__sfputs_r>:
 80086aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ac:	4606      	mov	r6, r0
 80086ae:	460f      	mov	r7, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	18d5      	adds	r5, r2, r3
 80086b4:	42ac      	cmp	r4, r5
 80086b6:	d101      	bne.n	80086bc <__sfputs_r+0x12>
 80086b8:	2000      	movs	r0, #0
 80086ba:	e007      	b.n	80086cc <__sfputs_r+0x22>
 80086bc:	463a      	mov	r2, r7
 80086be:	4630      	mov	r0, r6
 80086c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c4:	f7ff ffdc 	bl	8008680 <__sfputc_r>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d1f3      	bne.n	80086b4 <__sfputs_r+0xa>
 80086cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086d0 <_vfiprintf_r>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	460d      	mov	r5, r1
 80086d6:	4614      	mov	r4, r2
 80086d8:	4698      	mov	r8, r3
 80086da:	4606      	mov	r6, r0
 80086dc:	b09d      	sub	sp, #116	; 0x74
 80086de:	b118      	cbz	r0, 80086e8 <_vfiprintf_r+0x18>
 80086e0:	6983      	ldr	r3, [r0, #24]
 80086e2:	b90b      	cbnz	r3, 80086e8 <_vfiprintf_r+0x18>
 80086e4:	f7ff f83a 	bl	800775c <__sinit>
 80086e8:	4b89      	ldr	r3, [pc, #548]	; (8008910 <_vfiprintf_r+0x240>)
 80086ea:	429d      	cmp	r5, r3
 80086ec:	d11b      	bne.n	8008726 <_vfiprintf_r+0x56>
 80086ee:	6875      	ldr	r5, [r6, #4]
 80086f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086f2:	07d9      	lsls	r1, r3, #31
 80086f4:	d405      	bmi.n	8008702 <_vfiprintf_r+0x32>
 80086f6:	89ab      	ldrh	r3, [r5, #12]
 80086f8:	059a      	lsls	r2, r3, #22
 80086fa:	d402      	bmi.n	8008702 <_vfiprintf_r+0x32>
 80086fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086fe:	f7ff f8d0 	bl	80078a2 <__retarget_lock_acquire_recursive>
 8008702:	89ab      	ldrh	r3, [r5, #12]
 8008704:	071b      	lsls	r3, r3, #28
 8008706:	d501      	bpl.n	800870c <_vfiprintf_r+0x3c>
 8008708:	692b      	ldr	r3, [r5, #16]
 800870a:	b9eb      	cbnz	r3, 8008748 <_vfiprintf_r+0x78>
 800870c:	4629      	mov	r1, r5
 800870e:	4630      	mov	r0, r6
 8008710:	f000 fc26 	bl	8008f60 <__swsetup_r>
 8008714:	b1c0      	cbz	r0, 8008748 <_vfiprintf_r+0x78>
 8008716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008718:	07dc      	lsls	r4, r3, #31
 800871a:	d50e      	bpl.n	800873a <_vfiprintf_r+0x6a>
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	b01d      	add	sp, #116	; 0x74
 8008722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008726:	4b7b      	ldr	r3, [pc, #492]	; (8008914 <_vfiprintf_r+0x244>)
 8008728:	429d      	cmp	r5, r3
 800872a:	d101      	bne.n	8008730 <_vfiprintf_r+0x60>
 800872c:	68b5      	ldr	r5, [r6, #8]
 800872e:	e7df      	b.n	80086f0 <_vfiprintf_r+0x20>
 8008730:	4b79      	ldr	r3, [pc, #484]	; (8008918 <_vfiprintf_r+0x248>)
 8008732:	429d      	cmp	r5, r3
 8008734:	bf08      	it	eq
 8008736:	68f5      	ldreq	r5, [r6, #12]
 8008738:	e7da      	b.n	80086f0 <_vfiprintf_r+0x20>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	0598      	lsls	r0, r3, #22
 800873e:	d4ed      	bmi.n	800871c <_vfiprintf_r+0x4c>
 8008740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008742:	f7ff f8af 	bl	80078a4 <__retarget_lock_release_recursive>
 8008746:	e7e9      	b.n	800871c <_vfiprintf_r+0x4c>
 8008748:	2300      	movs	r3, #0
 800874a:	9309      	str	r3, [sp, #36]	; 0x24
 800874c:	2320      	movs	r3, #32
 800874e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008752:	2330      	movs	r3, #48	; 0x30
 8008754:	f04f 0901 	mov.w	r9, #1
 8008758:	f8cd 800c 	str.w	r8, [sp, #12]
 800875c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800891c <_vfiprintf_r+0x24c>
 8008760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008764:	4623      	mov	r3, r4
 8008766:	469a      	mov	sl, r3
 8008768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800876c:	b10a      	cbz	r2, 8008772 <_vfiprintf_r+0xa2>
 800876e:	2a25      	cmp	r2, #37	; 0x25
 8008770:	d1f9      	bne.n	8008766 <_vfiprintf_r+0x96>
 8008772:	ebba 0b04 	subs.w	fp, sl, r4
 8008776:	d00b      	beq.n	8008790 <_vfiprintf_r+0xc0>
 8008778:	465b      	mov	r3, fp
 800877a:	4622      	mov	r2, r4
 800877c:	4629      	mov	r1, r5
 800877e:	4630      	mov	r0, r6
 8008780:	f7ff ff93 	bl	80086aa <__sfputs_r>
 8008784:	3001      	adds	r0, #1
 8008786:	f000 80aa 	beq.w	80088de <_vfiprintf_r+0x20e>
 800878a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800878c:	445a      	add	r2, fp
 800878e:	9209      	str	r2, [sp, #36]	; 0x24
 8008790:	f89a 3000 	ldrb.w	r3, [sl]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 80a2 	beq.w	80088de <_vfiprintf_r+0x20e>
 800879a:	2300      	movs	r3, #0
 800879c:	f04f 32ff 	mov.w	r2, #4294967295
 80087a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087a4:	f10a 0a01 	add.w	sl, sl, #1
 80087a8:	9304      	str	r3, [sp, #16]
 80087aa:	9307      	str	r3, [sp, #28]
 80087ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087b0:	931a      	str	r3, [sp, #104]	; 0x68
 80087b2:	4654      	mov	r4, sl
 80087b4:	2205      	movs	r2, #5
 80087b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ba:	4858      	ldr	r0, [pc, #352]	; (800891c <_vfiprintf_r+0x24c>)
 80087bc:	f7ff f886 	bl	80078cc <memchr>
 80087c0:	9a04      	ldr	r2, [sp, #16]
 80087c2:	b9d8      	cbnz	r0, 80087fc <_vfiprintf_r+0x12c>
 80087c4:	06d1      	lsls	r1, r2, #27
 80087c6:	bf44      	itt	mi
 80087c8:	2320      	movmi	r3, #32
 80087ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ce:	0713      	lsls	r3, r2, #28
 80087d0:	bf44      	itt	mi
 80087d2:	232b      	movmi	r3, #43	; 0x2b
 80087d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087d8:	f89a 3000 	ldrb.w	r3, [sl]
 80087dc:	2b2a      	cmp	r3, #42	; 0x2a
 80087de:	d015      	beq.n	800880c <_vfiprintf_r+0x13c>
 80087e0:	4654      	mov	r4, sl
 80087e2:	2000      	movs	r0, #0
 80087e4:	f04f 0c0a 	mov.w	ip, #10
 80087e8:	9a07      	ldr	r2, [sp, #28]
 80087ea:	4621      	mov	r1, r4
 80087ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f0:	3b30      	subs	r3, #48	; 0x30
 80087f2:	2b09      	cmp	r3, #9
 80087f4:	d94e      	bls.n	8008894 <_vfiprintf_r+0x1c4>
 80087f6:	b1b0      	cbz	r0, 8008826 <_vfiprintf_r+0x156>
 80087f8:	9207      	str	r2, [sp, #28]
 80087fa:	e014      	b.n	8008826 <_vfiprintf_r+0x156>
 80087fc:	eba0 0308 	sub.w	r3, r0, r8
 8008800:	fa09 f303 	lsl.w	r3, r9, r3
 8008804:	4313      	orrs	r3, r2
 8008806:	46a2      	mov	sl, r4
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	e7d2      	b.n	80087b2 <_vfiprintf_r+0xe2>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	1d19      	adds	r1, r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	9103      	str	r1, [sp, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	bfbb      	ittet	lt
 8008818:	425b      	neglt	r3, r3
 800881a:	f042 0202 	orrlt.w	r2, r2, #2
 800881e:	9307      	strge	r3, [sp, #28]
 8008820:	9307      	strlt	r3, [sp, #28]
 8008822:	bfb8      	it	lt
 8008824:	9204      	strlt	r2, [sp, #16]
 8008826:	7823      	ldrb	r3, [r4, #0]
 8008828:	2b2e      	cmp	r3, #46	; 0x2e
 800882a:	d10c      	bne.n	8008846 <_vfiprintf_r+0x176>
 800882c:	7863      	ldrb	r3, [r4, #1]
 800882e:	2b2a      	cmp	r3, #42	; 0x2a
 8008830:	d135      	bne.n	800889e <_vfiprintf_r+0x1ce>
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	3402      	adds	r4, #2
 8008836:	1d1a      	adds	r2, r3, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	9203      	str	r2, [sp, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfb8      	it	lt
 8008840:	f04f 33ff 	movlt.w	r3, #4294967295
 8008844:	9305      	str	r3, [sp, #20]
 8008846:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008920 <_vfiprintf_r+0x250>
 800884a:	2203      	movs	r2, #3
 800884c:	4650      	mov	r0, sl
 800884e:	7821      	ldrb	r1, [r4, #0]
 8008850:	f7ff f83c 	bl	80078cc <memchr>
 8008854:	b140      	cbz	r0, 8008868 <_vfiprintf_r+0x198>
 8008856:	2340      	movs	r3, #64	; 0x40
 8008858:	eba0 000a 	sub.w	r0, r0, sl
 800885c:	fa03 f000 	lsl.w	r0, r3, r0
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	3401      	adds	r4, #1
 8008864:	4303      	orrs	r3, r0
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800886c:	2206      	movs	r2, #6
 800886e:	482d      	ldr	r0, [pc, #180]	; (8008924 <_vfiprintf_r+0x254>)
 8008870:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008874:	f7ff f82a 	bl	80078cc <memchr>
 8008878:	2800      	cmp	r0, #0
 800887a:	d03f      	beq.n	80088fc <_vfiprintf_r+0x22c>
 800887c:	4b2a      	ldr	r3, [pc, #168]	; (8008928 <_vfiprintf_r+0x258>)
 800887e:	bb1b      	cbnz	r3, 80088c8 <_vfiprintf_r+0x1f8>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	3307      	adds	r3, #7
 8008884:	f023 0307 	bic.w	r3, r3, #7
 8008888:	3308      	adds	r3, #8
 800888a:	9303      	str	r3, [sp, #12]
 800888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888e:	443b      	add	r3, r7
 8008890:	9309      	str	r3, [sp, #36]	; 0x24
 8008892:	e767      	b.n	8008764 <_vfiprintf_r+0x94>
 8008894:	460c      	mov	r4, r1
 8008896:	2001      	movs	r0, #1
 8008898:	fb0c 3202 	mla	r2, ip, r2, r3
 800889c:	e7a5      	b.n	80087ea <_vfiprintf_r+0x11a>
 800889e:	2300      	movs	r3, #0
 80088a0:	f04f 0c0a 	mov.w	ip, #10
 80088a4:	4619      	mov	r1, r3
 80088a6:	3401      	adds	r4, #1
 80088a8:	9305      	str	r3, [sp, #20]
 80088aa:	4620      	mov	r0, r4
 80088ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b0:	3a30      	subs	r2, #48	; 0x30
 80088b2:	2a09      	cmp	r2, #9
 80088b4:	d903      	bls.n	80088be <_vfiprintf_r+0x1ee>
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0c5      	beq.n	8008846 <_vfiprintf_r+0x176>
 80088ba:	9105      	str	r1, [sp, #20]
 80088bc:	e7c3      	b.n	8008846 <_vfiprintf_r+0x176>
 80088be:	4604      	mov	r4, r0
 80088c0:	2301      	movs	r3, #1
 80088c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088c6:	e7f0      	b.n	80088aa <_vfiprintf_r+0x1da>
 80088c8:	ab03      	add	r3, sp, #12
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	462a      	mov	r2, r5
 80088ce:	4630      	mov	r0, r6
 80088d0:	4b16      	ldr	r3, [pc, #88]	; (800892c <_vfiprintf_r+0x25c>)
 80088d2:	a904      	add	r1, sp, #16
 80088d4:	f7fd fbb4 	bl	8006040 <_printf_float>
 80088d8:	4607      	mov	r7, r0
 80088da:	1c78      	adds	r0, r7, #1
 80088dc:	d1d6      	bne.n	800888c <_vfiprintf_r+0x1bc>
 80088de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088e0:	07d9      	lsls	r1, r3, #31
 80088e2:	d405      	bmi.n	80088f0 <_vfiprintf_r+0x220>
 80088e4:	89ab      	ldrh	r3, [r5, #12]
 80088e6:	059a      	lsls	r2, r3, #22
 80088e8:	d402      	bmi.n	80088f0 <_vfiprintf_r+0x220>
 80088ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ec:	f7fe ffda 	bl	80078a4 <__retarget_lock_release_recursive>
 80088f0:	89ab      	ldrh	r3, [r5, #12]
 80088f2:	065b      	lsls	r3, r3, #25
 80088f4:	f53f af12 	bmi.w	800871c <_vfiprintf_r+0x4c>
 80088f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088fa:	e711      	b.n	8008720 <_vfiprintf_r+0x50>
 80088fc:	ab03      	add	r3, sp, #12
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	462a      	mov	r2, r5
 8008902:	4630      	mov	r0, r6
 8008904:	4b09      	ldr	r3, [pc, #36]	; (800892c <_vfiprintf_r+0x25c>)
 8008906:	a904      	add	r1, sp, #16
 8008908:	f7fd fe36 	bl	8006578 <_printf_i>
 800890c:	e7e4      	b.n	80088d8 <_vfiprintf_r+0x208>
 800890e:	bf00      	nop
 8008910:	0800a9f8 	.word	0x0800a9f8
 8008914:	0800aa18 	.word	0x0800aa18
 8008918:	0800a9d8 	.word	0x0800a9d8
 800891c:	0800ab94 	.word	0x0800ab94
 8008920:	0800ab9a 	.word	0x0800ab9a
 8008924:	0800ab9e 	.word	0x0800ab9e
 8008928:	08006041 	.word	0x08006041
 800892c:	080086ab 	.word	0x080086ab

08008930 <_scanf_chars>:
 8008930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008934:	4615      	mov	r5, r2
 8008936:	688a      	ldr	r2, [r1, #8]
 8008938:	4680      	mov	r8, r0
 800893a:	460c      	mov	r4, r1
 800893c:	b932      	cbnz	r2, 800894c <_scanf_chars+0x1c>
 800893e:	698a      	ldr	r2, [r1, #24]
 8008940:	2a00      	cmp	r2, #0
 8008942:	bf0c      	ite	eq
 8008944:	2201      	moveq	r2, #1
 8008946:	f04f 32ff 	movne.w	r2, #4294967295
 800894a:	608a      	str	r2, [r1, #8]
 800894c:	2700      	movs	r7, #0
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80089e0 <_scanf_chars+0xb0>
 8008954:	06d1      	lsls	r1, r2, #27
 8008956:	bf5f      	itttt	pl
 8008958:	681a      	ldrpl	r2, [r3, #0]
 800895a:	1d11      	addpl	r1, r2, #4
 800895c:	6019      	strpl	r1, [r3, #0]
 800895e:	6816      	ldrpl	r6, [r2, #0]
 8008960:	69a0      	ldr	r0, [r4, #24]
 8008962:	b188      	cbz	r0, 8008988 <_scanf_chars+0x58>
 8008964:	2801      	cmp	r0, #1
 8008966:	d107      	bne.n	8008978 <_scanf_chars+0x48>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	781a      	ldrb	r2, [r3, #0]
 800896c:	6963      	ldr	r3, [r4, #20]
 800896e:	5c9b      	ldrb	r3, [r3, r2]
 8008970:	b953      	cbnz	r3, 8008988 <_scanf_chars+0x58>
 8008972:	2f00      	cmp	r7, #0
 8008974:	d031      	beq.n	80089da <_scanf_chars+0xaa>
 8008976:	e022      	b.n	80089be <_scanf_chars+0x8e>
 8008978:	2802      	cmp	r0, #2
 800897a:	d120      	bne.n	80089be <_scanf_chars+0x8e>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008984:	071b      	lsls	r3, r3, #28
 8008986:	d41a      	bmi.n	80089be <_scanf_chars+0x8e>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	3701      	adds	r7, #1
 800898c:	06da      	lsls	r2, r3, #27
 800898e:	bf5e      	ittt	pl
 8008990:	682b      	ldrpl	r3, [r5, #0]
 8008992:	781b      	ldrbpl	r3, [r3, #0]
 8008994:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008998:	682a      	ldr	r2, [r5, #0]
 800899a:	686b      	ldr	r3, [r5, #4]
 800899c:	3201      	adds	r2, #1
 800899e:	602a      	str	r2, [r5, #0]
 80089a0:	68a2      	ldr	r2, [r4, #8]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	3a01      	subs	r2, #1
 80089a6:	606b      	str	r3, [r5, #4]
 80089a8:	60a2      	str	r2, [r4, #8]
 80089aa:	b142      	cbz	r2, 80089be <_scanf_chars+0x8e>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dcd7      	bgt.n	8008960 <_scanf_chars+0x30>
 80089b0:	4629      	mov	r1, r5
 80089b2:	4640      	mov	r0, r8
 80089b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80089b8:	4798      	blx	r3
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d0d0      	beq.n	8008960 <_scanf_chars+0x30>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	f013 0310 	ands.w	r3, r3, #16
 80089c4:	d105      	bne.n	80089d2 <_scanf_chars+0xa2>
 80089c6:	68e2      	ldr	r2, [r4, #12]
 80089c8:	3201      	adds	r2, #1
 80089ca:	60e2      	str	r2, [r4, #12]
 80089cc:	69a2      	ldr	r2, [r4, #24]
 80089ce:	b102      	cbz	r2, 80089d2 <_scanf_chars+0xa2>
 80089d0:	7033      	strb	r3, [r6, #0]
 80089d2:	2000      	movs	r0, #0
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	443b      	add	r3, r7
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089de:	bf00      	nop
 80089e0:	0800abfd 	.word	0x0800abfd

080089e4 <_scanf_i>:
 80089e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	460c      	mov	r4, r1
 80089ea:	4698      	mov	r8, r3
 80089ec:	4b75      	ldr	r3, [pc, #468]	; (8008bc4 <_scanf_i+0x1e0>)
 80089ee:	b087      	sub	sp, #28
 80089f0:	4682      	mov	sl, r0
 80089f2:	4616      	mov	r6, r2
 80089f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089fe:	4b72      	ldr	r3, [pc, #456]	; (8008bc8 <_scanf_i+0x1e4>)
 8008a00:	69a1      	ldr	r1, [r4, #24]
 8008a02:	4a72      	ldr	r2, [pc, #456]	; (8008bcc <_scanf_i+0x1e8>)
 8008a04:	4627      	mov	r7, r4
 8008a06:	2903      	cmp	r1, #3
 8008a08:	bf18      	it	ne
 8008a0a:	461a      	movne	r2, r3
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	9201      	str	r2, [sp, #4]
 8008a10:	1e5a      	subs	r2, r3, #1
 8008a12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008a16:	bf81      	itttt	hi
 8008a18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008a1c:	eb03 0905 	addhi.w	r9, r3, r5
 8008a20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008a24:	60a3      	strhi	r3, [r4, #8]
 8008a26:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008a2a:	bf98      	it	ls
 8008a2c:	f04f 0900 	movls.w	r9, #0
 8008a30:	463d      	mov	r5, r7
 8008a32:	f04f 0b00 	mov.w	fp, #0
 8008a36:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	6831      	ldr	r1, [r6, #0]
 8008a3e:	ab03      	add	r3, sp, #12
 8008a40:	2202      	movs	r2, #2
 8008a42:	7809      	ldrb	r1, [r1, #0]
 8008a44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a48:	f7fe ff40 	bl	80078cc <memchr>
 8008a4c:	b328      	cbz	r0, 8008a9a <_scanf_i+0xb6>
 8008a4e:	f1bb 0f01 	cmp.w	fp, #1
 8008a52:	d159      	bne.n	8008b08 <_scanf_i+0x124>
 8008a54:	6862      	ldr	r2, [r4, #4]
 8008a56:	b92a      	cbnz	r2, 8008a64 <_scanf_i+0x80>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	6063      	str	r3, [r4, #4]
 8008a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a62:	6022      	str	r2, [r4, #0]
 8008a64:	6822      	ldr	r2, [r4, #0]
 8008a66:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008a6a:	6022      	str	r2, [r4, #0]
 8008a6c:	68a2      	ldr	r2, [r4, #8]
 8008a6e:	1e51      	subs	r1, r2, #1
 8008a70:	60a1      	str	r1, [r4, #8]
 8008a72:	b192      	cbz	r2, 8008a9a <_scanf_i+0xb6>
 8008a74:	6832      	ldr	r2, [r6, #0]
 8008a76:	1c51      	adds	r1, r2, #1
 8008a78:	6031      	str	r1, [r6, #0]
 8008a7a:	7812      	ldrb	r2, [r2, #0]
 8008a7c:	f805 2b01 	strb.w	r2, [r5], #1
 8008a80:	6872      	ldr	r2, [r6, #4]
 8008a82:	3a01      	subs	r2, #1
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	6072      	str	r2, [r6, #4]
 8008a88:	dc07      	bgt.n	8008a9a <_scanf_i+0xb6>
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008a92:	4790      	blx	r2
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f040 8085 	bne.w	8008ba4 <_scanf_i+0x1c0>
 8008a9a:	f10b 0b01 	add.w	fp, fp, #1
 8008a9e:	f1bb 0f03 	cmp.w	fp, #3
 8008aa2:	d1cb      	bne.n	8008a3c <_scanf_i+0x58>
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	b90b      	cbnz	r3, 8008aac <_scanf_i+0xc8>
 8008aa8:	230a      	movs	r3, #10
 8008aaa:	6063      	str	r3, [r4, #4]
 8008aac:	6863      	ldr	r3, [r4, #4]
 8008aae:	4948      	ldr	r1, [pc, #288]	; (8008bd0 <_scanf_i+0x1ec>)
 8008ab0:	6960      	ldr	r0, [r4, #20]
 8008ab2:	1ac9      	subs	r1, r1, r3
 8008ab4:	f000 f8a0 	bl	8008bf8 <__sccl>
 8008ab8:	f04f 0b00 	mov.w	fp, #0
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d03d      	beq.n	8008b40 <_scanf_i+0x15c>
 8008ac4:	6831      	ldr	r1, [r6, #0]
 8008ac6:	6960      	ldr	r0, [r4, #20]
 8008ac8:	f891 c000 	ldrb.w	ip, [r1]
 8008acc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d035      	beq.n	8008b40 <_scanf_i+0x15c>
 8008ad4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008ad8:	d124      	bne.n	8008b24 <_scanf_i+0x140>
 8008ada:	0510      	lsls	r0, r2, #20
 8008adc:	d522      	bpl.n	8008b24 <_scanf_i+0x140>
 8008ade:	f10b 0b01 	add.w	fp, fp, #1
 8008ae2:	f1b9 0f00 	cmp.w	r9, #0
 8008ae6:	d003      	beq.n	8008af0 <_scanf_i+0x10c>
 8008ae8:	3301      	adds	r3, #1
 8008aea:	f109 39ff 	add.w	r9, r9, #4294967295
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	6873      	ldr	r3, [r6, #4]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	6073      	str	r3, [r6, #4]
 8008af8:	dd1b      	ble.n	8008b32 <_scanf_i+0x14e>
 8008afa:	6833      	ldr	r3, [r6, #0]
 8008afc:	3301      	adds	r3, #1
 8008afe:	6033      	str	r3, [r6, #0]
 8008b00:	68a3      	ldr	r3, [r4, #8]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	e7d9      	b.n	8008abc <_scanf_i+0xd8>
 8008b08:	f1bb 0f02 	cmp.w	fp, #2
 8008b0c:	d1ae      	bne.n	8008a6c <_scanf_i+0x88>
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008b14:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008b18:	d1bf      	bne.n	8008a9a <_scanf_i+0xb6>
 8008b1a:	2310      	movs	r3, #16
 8008b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	e7a2      	b.n	8008a6a <_scanf_i+0x86>
 8008b24:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008b28:	6022      	str	r2, [r4, #0]
 8008b2a:	780b      	ldrb	r3, [r1, #0]
 8008b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008b30:	e7de      	b.n	8008af0 <_scanf_i+0x10c>
 8008b32:	4631      	mov	r1, r6
 8008b34:	4650      	mov	r0, sl
 8008b36:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b3a:	4798      	blx	r3
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d0df      	beq.n	8008b00 <_scanf_i+0x11c>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	05db      	lsls	r3, r3, #23
 8008b44:	d50d      	bpl.n	8008b62 <_scanf_i+0x17e>
 8008b46:	42bd      	cmp	r5, r7
 8008b48:	d909      	bls.n	8008b5e <_scanf_i+0x17a>
 8008b4a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b4e:	4632      	mov	r2, r6
 8008b50:	4650      	mov	r0, sl
 8008b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b56:	f105 39ff 	add.w	r9, r5, #4294967295
 8008b5a:	4798      	blx	r3
 8008b5c:	464d      	mov	r5, r9
 8008b5e:	42bd      	cmp	r5, r7
 8008b60:	d02d      	beq.n	8008bbe <_scanf_i+0x1da>
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	f012 0210 	ands.w	r2, r2, #16
 8008b68:	d113      	bne.n	8008b92 <_scanf_i+0x1ae>
 8008b6a:	702a      	strb	r2, [r5, #0]
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	6863      	ldr	r3, [r4, #4]
 8008b70:	4650      	mov	r0, sl
 8008b72:	9e01      	ldr	r6, [sp, #4]
 8008b74:	47b0      	blx	r6
 8008b76:	6821      	ldr	r1, [r4, #0]
 8008b78:	f8d8 3000 	ldr.w	r3, [r8]
 8008b7c:	f011 0f20 	tst.w	r1, #32
 8008b80:	d013      	beq.n	8008baa <_scanf_i+0x1c6>
 8008b82:	1d1a      	adds	r2, r3, #4
 8008b84:	f8c8 2000 	str.w	r2, [r8]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6018      	str	r0, [r3, #0]
 8008b8c:	68e3      	ldr	r3, [r4, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60e3      	str	r3, [r4, #12]
 8008b92:	2000      	movs	r0, #0
 8008b94:	1bed      	subs	r5, r5, r7
 8008b96:	44ab      	add	fp, r5
 8008b98:	6925      	ldr	r5, [r4, #16]
 8008b9a:	445d      	add	r5, fp
 8008b9c:	6125      	str	r5, [r4, #16]
 8008b9e:	b007      	add	sp, #28
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	f04f 0b00 	mov.w	fp, #0
 8008ba8:	e7ca      	b.n	8008b40 <_scanf_i+0x15c>
 8008baa:	1d1a      	adds	r2, r3, #4
 8008bac:	f8c8 2000 	str.w	r2, [r8]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f011 0f01 	tst.w	r1, #1
 8008bb6:	bf14      	ite	ne
 8008bb8:	8018      	strhne	r0, [r3, #0]
 8008bba:	6018      	streq	r0, [r3, #0]
 8008bbc:	e7e6      	b.n	8008b8c <_scanf_i+0x1a8>
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e7ed      	b.n	8008b9e <_scanf_i+0x1ba>
 8008bc2:	bf00      	nop
 8008bc4:	08009590 	.word	0x08009590
 8008bc8:	08008e49 	.word	0x08008e49
 8008bcc:	08008d61 	.word	0x08008d61
 8008bd0:	0800abbe 	.word	0x0800abbe

08008bd4 <_read_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	4611      	mov	r1, r2
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4d05      	ldr	r5, [pc, #20]	; (8008bf4 <_read_r+0x20>)
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f9 fe67 	bl	80028b6 <_read>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_read_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_read_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000798 	.word	0x20000798

08008bf8 <__sccl>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	780b      	ldrb	r3, [r1, #0]
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	2b5e      	cmp	r3, #94	; 0x5e
 8008c00:	bf13      	iteet	ne
 8008c02:	2200      	movne	r2, #0
 8008c04:	2201      	moveq	r2, #1
 8008c06:	784b      	ldrbeq	r3, [r1, #1]
 8008c08:	1c48      	addne	r0, r1, #1
 8008c0a:	bf08      	it	eq
 8008c0c:	1c88      	addeq	r0, r1, #2
 8008c0e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008c12:	1e61      	subs	r1, r4, #1
 8008c14:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008c18:	42a9      	cmp	r1, r5
 8008c1a:	d1fb      	bne.n	8008c14 <__sccl+0x1c>
 8008c1c:	b90b      	cbnz	r3, 8008c22 <__sccl+0x2a>
 8008c1e:	3801      	subs	r0, #1
 8008c20:	bd70      	pop	{r4, r5, r6, pc}
 8008c22:	f082 0201 	eor.w	r2, r2, #1
 8008c26:	4605      	mov	r5, r0
 8008c28:	54e2      	strb	r2, [r4, r3]
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008c30:	292d      	cmp	r1, #45	; 0x2d
 8008c32:	d006      	beq.n	8008c42 <__sccl+0x4a>
 8008c34:	295d      	cmp	r1, #93	; 0x5d
 8008c36:	d0f3      	beq.n	8008c20 <__sccl+0x28>
 8008c38:	b909      	cbnz	r1, 8008c3e <__sccl+0x46>
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	e7f0      	b.n	8008c20 <__sccl+0x28>
 8008c3e:	460b      	mov	r3, r1
 8008c40:	e7f1      	b.n	8008c26 <__sccl+0x2e>
 8008c42:	786e      	ldrb	r6, [r5, #1]
 8008c44:	2e5d      	cmp	r6, #93	; 0x5d
 8008c46:	d0fa      	beq.n	8008c3e <__sccl+0x46>
 8008c48:	42b3      	cmp	r3, r6
 8008c4a:	dcf8      	bgt.n	8008c3e <__sccl+0x46>
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	3502      	adds	r5, #2
 8008c50:	3101      	adds	r1, #1
 8008c52:	428e      	cmp	r6, r1
 8008c54:	5462      	strb	r2, [r4, r1]
 8008c56:	dcfb      	bgt.n	8008c50 <__sccl+0x58>
 8008c58:	1af1      	subs	r1, r6, r3
 8008c5a:	3901      	subs	r1, #1
 8008c5c:	42b3      	cmp	r3, r6
 8008c5e:	bfa8      	it	ge
 8008c60:	2100      	movge	r1, #0
 8008c62:	1c58      	adds	r0, r3, #1
 8008c64:	1843      	adds	r3, r0, r1
 8008c66:	e7e0      	b.n	8008c2a <__sccl+0x32>

08008c68 <_strtol_l.constprop.0>:
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6e:	4680      	mov	r8, r0
 8008c70:	d001      	beq.n	8008c76 <_strtol_l.constprop.0+0xe>
 8008c72:	2b24      	cmp	r3, #36	; 0x24
 8008c74:	d906      	bls.n	8008c84 <_strtol_l.constprop.0+0x1c>
 8008c76:	f7fd f81b 	bl	8005cb0 <__errno>
 8008c7a:	2316      	movs	r3, #22
 8008c7c:	6003      	str	r3, [r0, #0]
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c84:	460d      	mov	r5, r1
 8008c86:	4f35      	ldr	r7, [pc, #212]	; (8008d5c <_strtol_l.constprop.0+0xf4>)
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c8e:	5de6      	ldrb	r6, [r4, r7]
 8008c90:	f016 0608 	ands.w	r6, r6, #8
 8008c94:	d1f8      	bne.n	8008c88 <_strtol_l.constprop.0+0x20>
 8008c96:	2c2d      	cmp	r4, #45	; 0x2d
 8008c98:	d12f      	bne.n	8008cfa <_strtol_l.constprop.0+0x92>
 8008c9a:	2601      	movs	r6, #1
 8008c9c:	782c      	ldrb	r4, [r5, #0]
 8008c9e:	1c85      	adds	r5, r0, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d057      	beq.n	8008d54 <_strtol_l.constprop.0+0xec>
 8008ca4:	2b10      	cmp	r3, #16
 8008ca6:	d109      	bne.n	8008cbc <_strtol_l.constprop.0+0x54>
 8008ca8:	2c30      	cmp	r4, #48	; 0x30
 8008caa:	d107      	bne.n	8008cbc <_strtol_l.constprop.0+0x54>
 8008cac:	7828      	ldrb	r0, [r5, #0]
 8008cae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008cb2:	2858      	cmp	r0, #88	; 0x58
 8008cb4:	d149      	bne.n	8008d4a <_strtol_l.constprop.0+0xe2>
 8008cb6:	2310      	movs	r3, #16
 8008cb8:	786c      	ldrb	r4, [r5, #1]
 8008cba:	3502      	adds	r5, #2
 8008cbc:	2700      	movs	r7, #0
 8008cbe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008cc2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008cc6:	fbbe f9f3 	udiv	r9, lr, r3
 8008cca:	4638      	mov	r0, r7
 8008ccc:	fb03 ea19 	mls	sl, r3, r9, lr
 8008cd0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008cd4:	f1bc 0f09 	cmp.w	ip, #9
 8008cd8:	d814      	bhi.n	8008d04 <_strtol_l.constprop.0+0x9c>
 8008cda:	4664      	mov	r4, ip
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	dd22      	ble.n	8008d26 <_strtol_l.constprop.0+0xbe>
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	db1d      	blt.n	8008d20 <_strtol_l.constprop.0+0xb8>
 8008ce4:	4581      	cmp	r9, r0
 8008ce6:	d31b      	bcc.n	8008d20 <_strtol_l.constprop.0+0xb8>
 8008ce8:	d101      	bne.n	8008cee <_strtol_l.constprop.0+0x86>
 8008cea:	45a2      	cmp	sl, r4
 8008cec:	db18      	blt.n	8008d20 <_strtol_l.constprop.0+0xb8>
 8008cee:	2701      	movs	r7, #1
 8008cf0:	fb00 4003 	mla	r0, r0, r3, r4
 8008cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cf8:	e7ea      	b.n	8008cd0 <_strtol_l.constprop.0+0x68>
 8008cfa:	2c2b      	cmp	r4, #43	; 0x2b
 8008cfc:	bf04      	itt	eq
 8008cfe:	782c      	ldrbeq	r4, [r5, #0]
 8008d00:	1c85      	addeq	r5, r0, #2
 8008d02:	e7cd      	b.n	8008ca0 <_strtol_l.constprop.0+0x38>
 8008d04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008d08:	f1bc 0f19 	cmp.w	ip, #25
 8008d0c:	d801      	bhi.n	8008d12 <_strtol_l.constprop.0+0xaa>
 8008d0e:	3c37      	subs	r4, #55	; 0x37
 8008d10:	e7e4      	b.n	8008cdc <_strtol_l.constprop.0+0x74>
 8008d12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008d16:	f1bc 0f19 	cmp.w	ip, #25
 8008d1a:	d804      	bhi.n	8008d26 <_strtol_l.constprop.0+0xbe>
 8008d1c:	3c57      	subs	r4, #87	; 0x57
 8008d1e:	e7dd      	b.n	8008cdc <_strtol_l.constprop.0+0x74>
 8008d20:	f04f 37ff 	mov.w	r7, #4294967295
 8008d24:	e7e6      	b.n	8008cf4 <_strtol_l.constprop.0+0x8c>
 8008d26:	2f00      	cmp	r7, #0
 8008d28:	da07      	bge.n	8008d3a <_strtol_l.constprop.0+0xd2>
 8008d2a:	2322      	movs	r3, #34	; 0x22
 8008d2c:	4670      	mov	r0, lr
 8008d2e:	f8c8 3000 	str.w	r3, [r8]
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d0a4      	beq.n	8008c80 <_strtol_l.constprop.0+0x18>
 8008d36:	1e69      	subs	r1, r5, #1
 8008d38:	e005      	b.n	8008d46 <_strtol_l.constprop.0+0xde>
 8008d3a:	b106      	cbz	r6, 8008d3e <_strtol_l.constprop.0+0xd6>
 8008d3c:	4240      	negs	r0, r0
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	d09e      	beq.n	8008c80 <_strtol_l.constprop.0+0x18>
 8008d42:	2f00      	cmp	r7, #0
 8008d44:	d1f7      	bne.n	8008d36 <_strtol_l.constprop.0+0xce>
 8008d46:	6011      	str	r1, [r2, #0]
 8008d48:	e79a      	b.n	8008c80 <_strtol_l.constprop.0+0x18>
 8008d4a:	2430      	movs	r4, #48	; 0x30
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1b5      	bne.n	8008cbc <_strtol_l.constprop.0+0x54>
 8008d50:	2308      	movs	r3, #8
 8008d52:	e7b3      	b.n	8008cbc <_strtol_l.constprop.0+0x54>
 8008d54:	2c30      	cmp	r4, #48	; 0x30
 8008d56:	d0a9      	beq.n	8008cac <_strtol_l.constprop.0+0x44>
 8008d58:	230a      	movs	r3, #10
 8008d5a:	e7af      	b.n	8008cbc <_strtol_l.constprop.0+0x54>
 8008d5c:	0800abfd 	.word	0x0800abfd

08008d60 <_strtol_r>:
 8008d60:	f7ff bf82 	b.w	8008c68 <_strtol_l.constprop.0>

08008d64 <_strtoul_l.constprop.0>:
 8008d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d68:	4686      	mov	lr, r0
 8008d6a:	460d      	mov	r5, r1
 8008d6c:	4f35      	ldr	r7, [pc, #212]	; (8008e44 <_strtoul_l.constprop.0+0xe0>)
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d74:	5de6      	ldrb	r6, [r4, r7]
 8008d76:	f016 0608 	ands.w	r6, r6, #8
 8008d7a:	d1f8      	bne.n	8008d6e <_strtoul_l.constprop.0+0xa>
 8008d7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008d7e:	d12f      	bne.n	8008de0 <_strtoul_l.constprop.0+0x7c>
 8008d80:	2601      	movs	r6, #1
 8008d82:	782c      	ldrb	r4, [r5, #0]
 8008d84:	1c85      	adds	r5, r0, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d057      	beq.n	8008e3a <_strtoul_l.constprop.0+0xd6>
 8008d8a:	2b10      	cmp	r3, #16
 8008d8c:	d109      	bne.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008d8e:	2c30      	cmp	r4, #48	; 0x30
 8008d90:	d107      	bne.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008d92:	7828      	ldrb	r0, [r5, #0]
 8008d94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008d98:	2858      	cmp	r0, #88	; 0x58
 8008d9a:	d149      	bne.n	8008e30 <_strtoul_l.constprop.0+0xcc>
 8008d9c:	2310      	movs	r3, #16
 8008d9e:	786c      	ldrb	r4, [r5, #1]
 8008da0:	3502      	adds	r5, #2
 8008da2:	f04f 38ff 	mov.w	r8, #4294967295
 8008da6:	fbb8 f8f3 	udiv	r8, r8, r3
 8008daa:	2700      	movs	r7, #0
 8008dac:	fb03 f908 	mul.w	r9, r3, r8
 8008db0:	4638      	mov	r0, r7
 8008db2:	ea6f 0909 	mvn.w	r9, r9
 8008db6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008dba:	f1bc 0f09 	cmp.w	ip, #9
 8008dbe:	d814      	bhi.n	8008dea <_strtoul_l.constprop.0+0x86>
 8008dc0:	4664      	mov	r4, ip
 8008dc2:	42a3      	cmp	r3, r4
 8008dc4:	dd22      	ble.n	8008e0c <_strtoul_l.constprop.0+0xa8>
 8008dc6:	2f00      	cmp	r7, #0
 8008dc8:	db1d      	blt.n	8008e06 <_strtoul_l.constprop.0+0xa2>
 8008dca:	4580      	cmp	r8, r0
 8008dcc:	d31b      	bcc.n	8008e06 <_strtoul_l.constprop.0+0xa2>
 8008dce:	d101      	bne.n	8008dd4 <_strtoul_l.constprop.0+0x70>
 8008dd0:	45a1      	cmp	r9, r4
 8008dd2:	db18      	blt.n	8008e06 <_strtoul_l.constprop.0+0xa2>
 8008dd4:	2701      	movs	r7, #1
 8008dd6:	fb00 4003 	mla	r0, r0, r3, r4
 8008dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dde:	e7ea      	b.n	8008db6 <_strtoul_l.constprop.0+0x52>
 8008de0:	2c2b      	cmp	r4, #43	; 0x2b
 8008de2:	bf04      	itt	eq
 8008de4:	782c      	ldrbeq	r4, [r5, #0]
 8008de6:	1c85      	addeq	r5, r0, #2
 8008de8:	e7cd      	b.n	8008d86 <_strtoul_l.constprop.0+0x22>
 8008dea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008dee:	f1bc 0f19 	cmp.w	ip, #25
 8008df2:	d801      	bhi.n	8008df8 <_strtoul_l.constprop.0+0x94>
 8008df4:	3c37      	subs	r4, #55	; 0x37
 8008df6:	e7e4      	b.n	8008dc2 <_strtoul_l.constprop.0+0x5e>
 8008df8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008dfc:	f1bc 0f19 	cmp.w	ip, #25
 8008e00:	d804      	bhi.n	8008e0c <_strtoul_l.constprop.0+0xa8>
 8008e02:	3c57      	subs	r4, #87	; 0x57
 8008e04:	e7dd      	b.n	8008dc2 <_strtoul_l.constprop.0+0x5e>
 8008e06:	f04f 37ff 	mov.w	r7, #4294967295
 8008e0a:	e7e6      	b.n	8008dda <_strtoul_l.constprop.0+0x76>
 8008e0c:	2f00      	cmp	r7, #0
 8008e0e:	da07      	bge.n	8008e20 <_strtoul_l.constprop.0+0xbc>
 8008e10:	2322      	movs	r3, #34	; 0x22
 8008e12:	f04f 30ff 	mov.w	r0, #4294967295
 8008e16:	f8ce 3000 	str.w	r3, [lr]
 8008e1a:	b932      	cbnz	r2, 8008e2a <_strtoul_l.constprop.0+0xc6>
 8008e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e20:	b106      	cbz	r6, 8008e24 <_strtoul_l.constprop.0+0xc0>
 8008e22:	4240      	negs	r0, r0
 8008e24:	2a00      	cmp	r2, #0
 8008e26:	d0f9      	beq.n	8008e1c <_strtoul_l.constprop.0+0xb8>
 8008e28:	b107      	cbz	r7, 8008e2c <_strtoul_l.constprop.0+0xc8>
 8008e2a:	1e69      	subs	r1, r5, #1
 8008e2c:	6011      	str	r1, [r2, #0]
 8008e2e:	e7f5      	b.n	8008e1c <_strtoul_l.constprop.0+0xb8>
 8008e30:	2430      	movs	r4, #48	; 0x30
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1b5      	bne.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008e36:	2308      	movs	r3, #8
 8008e38:	e7b3      	b.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008e3a:	2c30      	cmp	r4, #48	; 0x30
 8008e3c:	d0a9      	beq.n	8008d92 <_strtoul_l.constprop.0+0x2e>
 8008e3e:	230a      	movs	r3, #10
 8008e40:	e7af      	b.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008e42:	bf00      	nop
 8008e44:	0800abfd 	.word	0x0800abfd

08008e48 <_strtoul_r>:
 8008e48:	f7ff bf8c 	b.w	8008d64 <_strtoul_l.constprop.0>

08008e4c <__submore>:
 8008e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e50:	460c      	mov	r4, r1
 8008e52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e58:	4299      	cmp	r1, r3
 8008e5a:	d11b      	bne.n	8008e94 <__submore+0x48>
 8008e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e60:	f7fc ffdc 	bl	8005e1c <_malloc_r>
 8008e64:	b918      	cbnz	r0, 8008e6e <__submore+0x22>
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e72:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e74:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008e78:	6360      	str	r0, [r4, #52]	; 0x34
 8008e7a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008e7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008e86:	7043      	strb	r3, [r0, #1]
 8008e88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e8c:	7003      	strb	r3, [r0, #0]
 8008e8e:	6020      	str	r0, [r4, #0]
 8008e90:	2000      	movs	r0, #0
 8008e92:	e7ea      	b.n	8008e6a <__submore+0x1e>
 8008e94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008e96:	0077      	lsls	r7, r6, #1
 8008e98:	463a      	mov	r2, r7
 8008e9a:	f000 fa4f 	bl	800933c <_realloc_r>
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d0e0      	beq.n	8008e66 <__submore+0x1a>
 8008ea4:	eb00 0806 	add.w	r8, r0, r6
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	4632      	mov	r2, r6
 8008eac:	4640      	mov	r0, r8
 8008eae:	f7fe fd1b 	bl	80078e8 <memcpy>
 8008eb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008eb6:	f8c4 8000 	str.w	r8, [r4]
 8008eba:	e7e9      	b.n	8008e90 <__submore+0x44>

08008ebc <__swbuf_r>:
 8008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebe:	460e      	mov	r6, r1
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	b118      	cbz	r0, 8008ece <__swbuf_r+0x12>
 8008ec6:	6983      	ldr	r3, [r0, #24]
 8008ec8:	b90b      	cbnz	r3, 8008ece <__swbuf_r+0x12>
 8008eca:	f7fe fc47 	bl	800775c <__sinit>
 8008ece:	4b21      	ldr	r3, [pc, #132]	; (8008f54 <__swbuf_r+0x98>)
 8008ed0:	429c      	cmp	r4, r3
 8008ed2:	d12b      	bne.n	8008f2c <__swbuf_r+0x70>
 8008ed4:	686c      	ldr	r4, [r5, #4]
 8008ed6:	69a3      	ldr	r3, [r4, #24]
 8008ed8:	60a3      	str	r3, [r4, #8]
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	071a      	lsls	r2, r3, #28
 8008ede:	d52f      	bpl.n	8008f40 <__swbuf_r+0x84>
 8008ee0:	6923      	ldr	r3, [r4, #16]
 8008ee2:	b36b      	cbz	r3, 8008f40 <__swbuf_r+0x84>
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	6820      	ldr	r0, [r4, #0]
 8008ee8:	b2f6      	uxtb	r6, r6
 8008eea:	1ac0      	subs	r0, r0, r3
 8008eec:	6963      	ldr	r3, [r4, #20]
 8008eee:	4637      	mov	r7, r6
 8008ef0:	4283      	cmp	r3, r0
 8008ef2:	dc04      	bgt.n	8008efe <__swbuf_r+0x42>
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f000 f940 	bl	800917c <_fflush_r>
 8008efc:	bb30      	cbnz	r0, 8008f4c <__swbuf_r+0x90>
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	3001      	adds	r0, #1
 8008f02:	3b01      	subs	r3, #1
 8008f04:	60a3      	str	r3, [r4, #8]
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	6022      	str	r2, [r4, #0]
 8008f0c:	701e      	strb	r6, [r3, #0]
 8008f0e:	6963      	ldr	r3, [r4, #20]
 8008f10:	4283      	cmp	r3, r0
 8008f12:	d004      	beq.n	8008f1e <__swbuf_r+0x62>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	07db      	lsls	r3, r3, #31
 8008f18:	d506      	bpl.n	8008f28 <__swbuf_r+0x6c>
 8008f1a:	2e0a      	cmp	r6, #10
 8008f1c:	d104      	bne.n	8008f28 <__swbuf_r+0x6c>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f92b 	bl	800917c <_fflush_r>
 8008f26:	b988      	cbnz	r0, 8008f4c <__swbuf_r+0x90>
 8008f28:	4638      	mov	r0, r7
 8008f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <__swbuf_r+0x9c>)
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	d101      	bne.n	8008f36 <__swbuf_r+0x7a>
 8008f32:	68ac      	ldr	r4, [r5, #8]
 8008f34:	e7cf      	b.n	8008ed6 <__swbuf_r+0x1a>
 8008f36:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <__swbuf_r+0xa0>)
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	bf08      	it	eq
 8008f3c:	68ec      	ldreq	r4, [r5, #12]
 8008f3e:	e7ca      	b.n	8008ed6 <__swbuf_r+0x1a>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 f80c 	bl	8008f60 <__swsetup_r>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d0cb      	beq.n	8008ee4 <__swbuf_r+0x28>
 8008f4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f50:	e7ea      	b.n	8008f28 <__swbuf_r+0x6c>
 8008f52:	bf00      	nop
 8008f54:	0800a9f8 	.word	0x0800a9f8
 8008f58:	0800aa18 	.word	0x0800aa18
 8008f5c:	0800a9d8 	.word	0x0800a9d8

08008f60 <__swsetup_r>:
 8008f60:	4b32      	ldr	r3, [pc, #200]	; (800902c <__swsetup_r+0xcc>)
 8008f62:	b570      	push	{r4, r5, r6, lr}
 8008f64:	681d      	ldr	r5, [r3, #0]
 8008f66:	4606      	mov	r6, r0
 8008f68:	460c      	mov	r4, r1
 8008f6a:	b125      	cbz	r5, 8008f76 <__swsetup_r+0x16>
 8008f6c:	69ab      	ldr	r3, [r5, #24]
 8008f6e:	b913      	cbnz	r3, 8008f76 <__swsetup_r+0x16>
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7fe fbf3 	bl	800775c <__sinit>
 8008f76:	4b2e      	ldr	r3, [pc, #184]	; (8009030 <__swsetup_r+0xd0>)
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d10f      	bne.n	8008f9c <__swsetup_r+0x3c>
 8008f7c:	686c      	ldr	r4, [r5, #4]
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f84:	0719      	lsls	r1, r3, #28
 8008f86:	d42c      	bmi.n	8008fe2 <__swsetup_r+0x82>
 8008f88:	06dd      	lsls	r5, r3, #27
 8008f8a:	d411      	bmi.n	8008fb0 <__swsetup_r+0x50>
 8008f8c:	2309      	movs	r3, #9
 8008f8e:	6033      	str	r3, [r6, #0]
 8008f90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	81a3      	strh	r3, [r4, #12]
 8008f9a:	e03e      	b.n	800901a <__swsetup_r+0xba>
 8008f9c:	4b25      	ldr	r3, [pc, #148]	; (8009034 <__swsetup_r+0xd4>)
 8008f9e:	429c      	cmp	r4, r3
 8008fa0:	d101      	bne.n	8008fa6 <__swsetup_r+0x46>
 8008fa2:	68ac      	ldr	r4, [r5, #8]
 8008fa4:	e7eb      	b.n	8008f7e <__swsetup_r+0x1e>
 8008fa6:	4b24      	ldr	r3, [pc, #144]	; (8009038 <__swsetup_r+0xd8>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	bf08      	it	eq
 8008fac:	68ec      	ldreq	r4, [r5, #12]
 8008fae:	e7e6      	b.n	8008f7e <__swsetup_r+0x1e>
 8008fb0:	0758      	lsls	r0, r3, #29
 8008fb2:	d512      	bpl.n	8008fda <__swsetup_r+0x7a>
 8008fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb6:	b141      	cbz	r1, 8008fca <__swsetup_r+0x6a>
 8008fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fbc:	4299      	cmp	r1, r3
 8008fbe:	d002      	beq.n	8008fc6 <__swsetup_r+0x66>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7fc fec3 	bl	8005d4c <_free_r>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	6363      	str	r3, [r4, #52]	; 0x34
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6063      	str	r3, [r4, #4]
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f043 0308 	orr.w	r3, r3, #8
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	b94b      	cbnz	r3, 8008ffa <__swsetup_r+0x9a>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ff0:	d003      	beq.n	8008ffa <__swsetup_r+0x9a>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f000 f935 	bl	8009264 <__smakebuf_r>
 8008ffa:	89a0      	ldrh	r0, [r4, #12]
 8008ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009000:	f010 0301 	ands.w	r3, r0, #1
 8009004:	d00a      	beq.n	800901c <__swsetup_r+0xbc>
 8009006:	2300      	movs	r3, #0
 8009008:	60a3      	str	r3, [r4, #8]
 800900a:	6963      	ldr	r3, [r4, #20]
 800900c:	425b      	negs	r3, r3
 800900e:	61a3      	str	r3, [r4, #24]
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	b943      	cbnz	r3, 8009026 <__swsetup_r+0xc6>
 8009014:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009018:	d1ba      	bne.n	8008f90 <__swsetup_r+0x30>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	0781      	lsls	r1, r0, #30
 800901e:	bf58      	it	pl
 8009020:	6963      	ldrpl	r3, [r4, #20]
 8009022:	60a3      	str	r3, [r4, #8]
 8009024:	e7f4      	b.n	8009010 <__swsetup_r+0xb0>
 8009026:	2000      	movs	r0, #0
 8009028:	e7f7      	b.n	800901a <__swsetup_r+0xba>
 800902a:	bf00      	nop
 800902c:	2000002c 	.word	0x2000002c
 8009030:	0800a9f8 	.word	0x0800a9f8
 8009034:	0800aa18 	.word	0x0800aa18
 8009038:	0800a9d8 	.word	0x0800a9d8

0800903c <__assert_func>:
 800903c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800903e:	4614      	mov	r4, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <__assert_func+0x2c>)
 8009044:	4605      	mov	r5, r0
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68d8      	ldr	r0, [r3, #12]
 800904a:	b14c      	cbz	r4, 8009060 <__assert_func+0x24>
 800904c:	4b07      	ldr	r3, [pc, #28]	; (800906c <__assert_func+0x30>)
 800904e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009052:	9100      	str	r1, [sp, #0]
 8009054:	462b      	mov	r3, r5
 8009056:	4906      	ldr	r1, [pc, #24]	; (8009070 <__assert_func+0x34>)
 8009058:	f000 f8cc 	bl	80091f4 <fiprintf>
 800905c:	f000 f9aa 	bl	80093b4 <abort>
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <__assert_func+0x38>)
 8009062:	461c      	mov	r4, r3
 8009064:	e7f3      	b.n	800904e <__assert_func+0x12>
 8009066:	bf00      	nop
 8009068:	2000002c 	.word	0x2000002c
 800906c:	0800abc0 	.word	0x0800abc0
 8009070:	0800abcd 	.word	0x0800abcd
 8009074:	0800abfb 	.word	0x0800abfb

08009078 <__sflush_r>:
 8009078:	898a      	ldrh	r2, [r1, #12]
 800907a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907c:	4605      	mov	r5, r0
 800907e:	0710      	lsls	r0, r2, #28
 8009080:	460c      	mov	r4, r1
 8009082:	d457      	bmi.n	8009134 <__sflush_r+0xbc>
 8009084:	684b      	ldr	r3, [r1, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	dc04      	bgt.n	8009094 <__sflush_r+0x1c>
 800908a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	dc01      	bgt.n	8009094 <__sflush_r+0x1c>
 8009090:	2000      	movs	r0, #0
 8009092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009096:	2e00      	cmp	r6, #0
 8009098:	d0fa      	beq.n	8009090 <__sflush_r+0x18>
 800909a:	2300      	movs	r3, #0
 800909c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090a0:	682f      	ldr	r7, [r5, #0]
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	d032      	beq.n	800910c <__sflush_r+0x94>
 80090a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	075a      	lsls	r2, r3, #29
 80090ac:	d505      	bpl.n	80090ba <__sflush_r+0x42>
 80090ae:	6863      	ldr	r3, [r4, #4]
 80090b0:	1ac0      	subs	r0, r0, r3
 80090b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090b4:	b10b      	cbz	r3, 80090ba <__sflush_r+0x42>
 80090b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090b8:	1ac0      	subs	r0, r0, r3
 80090ba:	2300      	movs	r3, #0
 80090bc:	4602      	mov	r2, r0
 80090be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090c0:	4628      	mov	r0, r5
 80090c2:	6a21      	ldr	r1, [r4, #32]
 80090c4:	47b0      	blx	r6
 80090c6:	1c43      	adds	r3, r0, #1
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	d106      	bne.n	80090da <__sflush_r+0x62>
 80090cc:	6829      	ldr	r1, [r5, #0]
 80090ce:	291d      	cmp	r1, #29
 80090d0:	d82c      	bhi.n	800912c <__sflush_r+0xb4>
 80090d2:	4a29      	ldr	r2, [pc, #164]	; (8009178 <__sflush_r+0x100>)
 80090d4:	40ca      	lsrs	r2, r1
 80090d6:	07d6      	lsls	r6, r2, #31
 80090d8:	d528      	bpl.n	800912c <__sflush_r+0xb4>
 80090da:	2200      	movs	r2, #0
 80090dc:	6062      	str	r2, [r4, #4]
 80090de:	6922      	ldr	r2, [r4, #16]
 80090e0:	04d9      	lsls	r1, r3, #19
 80090e2:	6022      	str	r2, [r4, #0]
 80090e4:	d504      	bpl.n	80090f0 <__sflush_r+0x78>
 80090e6:	1c42      	adds	r2, r0, #1
 80090e8:	d101      	bne.n	80090ee <__sflush_r+0x76>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	b903      	cbnz	r3, 80090f0 <__sflush_r+0x78>
 80090ee:	6560      	str	r0, [r4, #84]	; 0x54
 80090f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090f2:	602f      	str	r7, [r5, #0]
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d0cb      	beq.n	8009090 <__sflush_r+0x18>
 80090f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090fc:	4299      	cmp	r1, r3
 80090fe:	d002      	beq.n	8009106 <__sflush_r+0x8e>
 8009100:	4628      	mov	r0, r5
 8009102:	f7fc fe23 	bl	8005d4c <_free_r>
 8009106:	2000      	movs	r0, #0
 8009108:	6360      	str	r0, [r4, #52]	; 0x34
 800910a:	e7c2      	b.n	8009092 <__sflush_r+0x1a>
 800910c:	6a21      	ldr	r1, [r4, #32]
 800910e:	2301      	movs	r3, #1
 8009110:	4628      	mov	r0, r5
 8009112:	47b0      	blx	r6
 8009114:	1c41      	adds	r1, r0, #1
 8009116:	d1c7      	bne.n	80090a8 <__sflush_r+0x30>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0c4      	beq.n	80090a8 <__sflush_r+0x30>
 800911e:	2b1d      	cmp	r3, #29
 8009120:	d001      	beq.n	8009126 <__sflush_r+0xae>
 8009122:	2b16      	cmp	r3, #22
 8009124:	d101      	bne.n	800912a <__sflush_r+0xb2>
 8009126:	602f      	str	r7, [r5, #0]
 8009128:	e7b2      	b.n	8009090 <__sflush_r+0x18>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	e7ae      	b.n	8009092 <__sflush_r+0x1a>
 8009134:	690f      	ldr	r7, [r1, #16]
 8009136:	2f00      	cmp	r7, #0
 8009138:	d0aa      	beq.n	8009090 <__sflush_r+0x18>
 800913a:	0793      	lsls	r3, r2, #30
 800913c:	bf18      	it	ne
 800913e:	2300      	movne	r3, #0
 8009140:	680e      	ldr	r6, [r1, #0]
 8009142:	bf08      	it	eq
 8009144:	694b      	ldreq	r3, [r1, #20]
 8009146:	1bf6      	subs	r6, r6, r7
 8009148:	600f      	str	r7, [r1, #0]
 800914a:	608b      	str	r3, [r1, #8]
 800914c:	2e00      	cmp	r6, #0
 800914e:	dd9f      	ble.n	8009090 <__sflush_r+0x18>
 8009150:	4633      	mov	r3, r6
 8009152:	463a      	mov	r2, r7
 8009154:	4628      	mov	r0, r5
 8009156:	6a21      	ldr	r1, [r4, #32]
 8009158:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800915c:	47e0      	blx	ip
 800915e:	2800      	cmp	r0, #0
 8009160:	dc06      	bgt.n	8009170 <__sflush_r+0xf8>
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	e790      	b.n	8009092 <__sflush_r+0x1a>
 8009170:	4407      	add	r7, r0
 8009172:	1a36      	subs	r6, r6, r0
 8009174:	e7ea      	b.n	800914c <__sflush_r+0xd4>
 8009176:	bf00      	nop
 8009178:	20400001 	.word	0x20400001

0800917c <_fflush_r>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	690b      	ldr	r3, [r1, #16]
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	b913      	cbnz	r3, 800918c <_fflush_r+0x10>
 8009186:	2500      	movs	r5, #0
 8009188:	4628      	mov	r0, r5
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	b118      	cbz	r0, 8009196 <_fflush_r+0x1a>
 800918e:	6983      	ldr	r3, [r0, #24]
 8009190:	b90b      	cbnz	r3, 8009196 <_fflush_r+0x1a>
 8009192:	f7fe fae3 	bl	800775c <__sinit>
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <_fflush_r+0x6c>)
 8009198:	429c      	cmp	r4, r3
 800919a:	d11b      	bne.n	80091d4 <_fflush_r+0x58>
 800919c:	686c      	ldr	r4, [r5, #4]
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0ef      	beq.n	8009186 <_fflush_r+0xa>
 80091a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091a8:	07d0      	lsls	r0, r2, #31
 80091aa:	d404      	bmi.n	80091b6 <_fflush_r+0x3a>
 80091ac:	0599      	lsls	r1, r3, #22
 80091ae:	d402      	bmi.n	80091b6 <_fflush_r+0x3a>
 80091b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091b2:	f7fe fb76 	bl	80078a2 <__retarget_lock_acquire_recursive>
 80091b6:	4628      	mov	r0, r5
 80091b8:	4621      	mov	r1, r4
 80091ba:	f7ff ff5d 	bl	8009078 <__sflush_r>
 80091be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091c0:	4605      	mov	r5, r0
 80091c2:	07da      	lsls	r2, r3, #31
 80091c4:	d4e0      	bmi.n	8009188 <_fflush_r+0xc>
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	059b      	lsls	r3, r3, #22
 80091ca:	d4dd      	bmi.n	8009188 <_fflush_r+0xc>
 80091cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ce:	f7fe fb69 	bl	80078a4 <__retarget_lock_release_recursive>
 80091d2:	e7d9      	b.n	8009188 <_fflush_r+0xc>
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <_fflush_r+0x70>)
 80091d6:	429c      	cmp	r4, r3
 80091d8:	d101      	bne.n	80091de <_fflush_r+0x62>
 80091da:	68ac      	ldr	r4, [r5, #8]
 80091dc:	e7df      	b.n	800919e <_fflush_r+0x22>
 80091de:	4b04      	ldr	r3, [pc, #16]	; (80091f0 <_fflush_r+0x74>)
 80091e0:	429c      	cmp	r4, r3
 80091e2:	bf08      	it	eq
 80091e4:	68ec      	ldreq	r4, [r5, #12]
 80091e6:	e7da      	b.n	800919e <_fflush_r+0x22>
 80091e8:	0800a9f8 	.word	0x0800a9f8
 80091ec:	0800aa18 	.word	0x0800aa18
 80091f0:	0800a9d8 	.word	0x0800a9d8

080091f4 <fiprintf>:
 80091f4:	b40e      	push	{r1, r2, r3}
 80091f6:	b503      	push	{r0, r1, lr}
 80091f8:	4601      	mov	r1, r0
 80091fa:	ab03      	add	r3, sp, #12
 80091fc:	4805      	ldr	r0, [pc, #20]	; (8009214 <fiprintf+0x20>)
 80091fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009202:	6800      	ldr	r0, [r0, #0]
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	f7ff fa63 	bl	80086d0 <_vfiprintf_r>
 800920a:	b002      	add	sp, #8
 800920c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009210:	b003      	add	sp, #12
 8009212:	4770      	bx	lr
 8009214:	2000002c 	.word	0x2000002c

08009218 <__swhatbuf_r>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	460e      	mov	r6, r1
 800921c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009220:	4614      	mov	r4, r2
 8009222:	2900      	cmp	r1, #0
 8009224:	461d      	mov	r5, r3
 8009226:	b096      	sub	sp, #88	; 0x58
 8009228:	da08      	bge.n	800923c <__swhatbuf_r+0x24>
 800922a:	2200      	movs	r2, #0
 800922c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009230:	602a      	str	r2, [r5, #0]
 8009232:	061a      	lsls	r2, r3, #24
 8009234:	d410      	bmi.n	8009258 <__swhatbuf_r+0x40>
 8009236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800923a:	e00e      	b.n	800925a <__swhatbuf_r+0x42>
 800923c:	466a      	mov	r2, sp
 800923e:	f000 f8c1 	bl	80093c4 <_fstat_r>
 8009242:	2800      	cmp	r0, #0
 8009244:	dbf1      	blt.n	800922a <__swhatbuf_r+0x12>
 8009246:	9a01      	ldr	r2, [sp, #4]
 8009248:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800924c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009250:	425a      	negs	r2, r3
 8009252:	415a      	adcs	r2, r3
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	e7ee      	b.n	8009236 <__swhatbuf_r+0x1e>
 8009258:	2340      	movs	r3, #64	; 0x40
 800925a:	2000      	movs	r0, #0
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	b016      	add	sp, #88	; 0x58
 8009260:	bd70      	pop	{r4, r5, r6, pc}
	...

08009264 <__smakebuf_r>:
 8009264:	898b      	ldrh	r3, [r1, #12]
 8009266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009268:	079d      	lsls	r5, r3, #30
 800926a:	4606      	mov	r6, r0
 800926c:	460c      	mov	r4, r1
 800926e:	d507      	bpl.n	8009280 <__smakebuf_r+0x1c>
 8009270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	2301      	movs	r3, #1
 800927a:	6163      	str	r3, [r4, #20]
 800927c:	b002      	add	sp, #8
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	466a      	mov	r2, sp
 8009282:	ab01      	add	r3, sp, #4
 8009284:	f7ff ffc8 	bl	8009218 <__swhatbuf_r>
 8009288:	9900      	ldr	r1, [sp, #0]
 800928a:	4605      	mov	r5, r0
 800928c:	4630      	mov	r0, r6
 800928e:	f7fc fdc5 	bl	8005e1c <_malloc_r>
 8009292:	b948      	cbnz	r0, 80092a8 <__smakebuf_r+0x44>
 8009294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009298:	059a      	lsls	r2, r3, #22
 800929a:	d4ef      	bmi.n	800927c <__smakebuf_r+0x18>
 800929c:	f023 0303 	bic.w	r3, r3, #3
 80092a0:	f043 0302 	orr.w	r3, r3, #2
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	e7e3      	b.n	8009270 <__smakebuf_r+0xc>
 80092a8:	4b0d      	ldr	r3, [pc, #52]	; (80092e0 <__smakebuf_r+0x7c>)
 80092aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	6020      	str	r0, [r4, #0]
 80092b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	6120      	str	r0, [r4, #16]
 80092ba:	6163      	str	r3, [r4, #20]
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	b15b      	cbz	r3, 80092d8 <__smakebuf_r+0x74>
 80092c0:	4630      	mov	r0, r6
 80092c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092c6:	f000 f88f 	bl	80093e8 <_isatty_r>
 80092ca:	b128      	cbz	r0, 80092d8 <__smakebuf_r+0x74>
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	f043 0301 	orr.w	r3, r3, #1
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	89a0      	ldrh	r0, [r4, #12]
 80092da:	4305      	orrs	r5, r0
 80092dc:	81a5      	strh	r5, [r4, #12]
 80092de:	e7cd      	b.n	800927c <__smakebuf_r+0x18>
 80092e0:	080076f5 	.word	0x080076f5

080092e4 <__ascii_mbtowc>:
 80092e4:	b082      	sub	sp, #8
 80092e6:	b901      	cbnz	r1, 80092ea <__ascii_mbtowc+0x6>
 80092e8:	a901      	add	r1, sp, #4
 80092ea:	b142      	cbz	r2, 80092fe <__ascii_mbtowc+0x1a>
 80092ec:	b14b      	cbz	r3, 8009302 <__ascii_mbtowc+0x1e>
 80092ee:	7813      	ldrb	r3, [r2, #0]
 80092f0:	600b      	str	r3, [r1, #0]
 80092f2:	7812      	ldrb	r2, [r2, #0]
 80092f4:	1e10      	subs	r0, r2, #0
 80092f6:	bf18      	it	ne
 80092f8:	2001      	movne	r0, #1
 80092fa:	b002      	add	sp, #8
 80092fc:	4770      	bx	lr
 80092fe:	4610      	mov	r0, r2
 8009300:	e7fb      	b.n	80092fa <__ascii_mbtowc+0x16>
 8009302:	f06f 0001 	mvn.w	r0, #1
 8009306:	e7f8      	b.n	80092fa <__ascii_mbtowc+0x16>

08009308 <memmove>:
 8009308:	4288      	cmp	r0, r1
 800930a:	b510      	push	{r4, lr}
 800930c:	eb01 0402 	add.w	r4, r1, r2
 8009310:	d902      	bls.n	8009318 <memmove+0x10>
 8009312:	4284      	cmp	r4, r0
 8009314:	4623      	mov	r3, r4
 8009316:	d807      	bhi.n	8009328 <memmove+0x20>
 8009318:	1e43      	subs	r3, r0, #1
 800931a:	42a1      	cmp	r1, r4
 800931c:	d008      	beq.n	8009330 <memmove+0x28>
 800931e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009322:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009326:	e7f8      	b.n	800931a <memmove+0x12>
 8009328:	4601      	mov	r1, r0
 800932a:	4402      	add	r2, r0
 800932c:	428a      	cmp	r2, r1
 800932e:	d100      	bne.n	8009332 <memmove+0x2a>
 8009330:	bd10      	pop	{r4, pc}
 8009332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009336:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800933a:	e7f7      	b.n	800932c <memmove+0x24>

0800933c <_realloc_r>:
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	4680      	mov	r8, r0
 8009342:	4614      	mov	r4, r2
 8009344:	460e      	mov	r6, r1
 8009346:	b921      	cbnz	r1, 8009352 <_realloc_r+0x16>
 8009348:	4611      	mov	r1, r2
 800934a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800934e:	f7fc bd65 	b.w	8005e1c <_malloc_r>
 8009352:	b92a      	cbnz	r2, 8009360 <_realloc_r+0x24>
 8009354:	f7fc fcfa 	bl	8005d4c <_free_r>
 8009358:	4625      	mov	r5, r4
 800935a:	4628      	mov	r0, r5
 800935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009360:	f000 f852 	bl	8009408 <_malloc_usable_size_r>
 8009364:	4284      	cmp	r4, r0
 8009366:	4607      	mov	r7, r0
 8009368:	d802      	bhi.n	8009370 <_realloc_r+0x34>
 800936a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800936e:	d812      	bhi.n	8009396 <_realloc_r+0x5a>
 8009370:	4621      	mov	r1, r4
 8009372:	4640      	mov	r0, r8
 8009374:	f7fc fd52 	bl	8005e1c <_malloc_r>
 8009378:	4605      	mov	r5, r0
 800937a:	2800      	cmp	r0, #0
 800937c:	d0ed      	beq.n	800935a <_realloc_r+0x1e>
 800937e:	42bc      	cmp	r4, r7
 8009380:	4622      	mov	r2, r4
 8009382:	4631      	mov	r1, r6
 8009384:	bf28      	it	cs
 8009386:	463a      	movcs	r2, r7
 8009388:	f7fe faae 	bl	80078e8 <memcpy>
 800938c:	4631      	mov	r1, r6
 800938e:	4640      	mov	r0, r8
 8009390:	f7fc fcdc 	bl	8005d4c <_free_r>
 8009394:	e7e1      	b.n	800935a <_realloc_r+0x1e>
 8009396:	4635      	mov	r5, r6
 8009398:	e7df      	b.n	800935a <_realloc_r+0x1e>

0800939a <__ascii_wctomb>:
 800939a:	4603      	mov	r3, r0
 800939c:	4608      	mov	r0, r1
 800939e:	b141      	cbz	r1, 80093b2 <__ascii_wctomb+0x18>
 80093a0:	2aff      	cmp	r2, #255	; 0xff
 80093a2:	d904      	bls.n	80093ae <__ascii_wctomb+0x14>
 80093a4:	228a      	movs	r2, #138	; 0x8a
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	4770      	bx	lr
 80093ae:	2001      	movs	r0, #1
 80093b0:	700a      	strb	r2, [r1, #0]
 80093b2:	4770      	bx	lr

080093b4 <abort>:
 80093b4:	2006      	movs	r0, #6
 80093b6:	b508      	push	{r3, lr}
 80093b8:	f000 f856 	bl	8009468 <raise>
 80093bc:	2001      	movs	r0, #1
 80093be:	f7f9 fa70 	bl	80028a2 <_exit>
	...

080093c4 <_fstat_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	2300      	movs	r3, #0
 80093c8:	4d06      	ldr	r5, [pc, #24]	; (80093e4 <_fstat_r+0x20>)
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	f7f9 fab4 	bl	800293e <_fstat>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d102      	bne.n	80093e0 <_fstat_r+0x1c>
 80093da:	682b      	ldr	r3, [r5, #0]
 80093dc:	b103      	cbz	r3, 80093e0 <_fstat_r+0x1c>
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	bf00      	nop
 80093e4:	20000798 	.word	0x20000798

080093e8 <_isatty_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	2300      	movs	r3, #0
 80093ec:	4d05      	ldr	r5, [pc, #20]	; (8009404 <_isatty_r+0x1c>)
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f7f9 fab2 	bl	800295c <_isatty>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_isatty_r+0x1a>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_isatty_r+0x1a>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20000798 	.word	0x20000798

08009408 <_malloc_usable_size_r>:
 8009408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800940c:	1f18      	subs	r0, r3, #4
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfbc      	itt	lt
 8009412:	580b      	ldrlt	r3, [r1, r0]
 8009414:	18c0      	addlt	r0, r0, r3
 8009416:	4770      	bx	lr

08009418 <_raise_r>:
 8009418:	291f      	cmp	r1, #31
 800941a:	b538      	push	{r3, r4, r5, lr}
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	d904      	bls.n	800942c <_raise_r+0x14>
 8009422:	2316      	movs	r3, #22
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	f04f 30ff 	mov.w	r0, #4294967295
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800942e:	b112      	cbz	r2, 8009436 <_raise_r+0x1e>
 8009430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009434:	b94b      	cbnz	r3, 800944a <_raise_r+0x32>
 8009436:	4620      	mov	r0, r4
 8009438:	f000 f830 	bl	800949c <_getpid_r>
 800943c:	462a      	mov	r2, r5
 800943e:	4601      	mov	r1, r0
 8009440:	4620      	mov	r0, r4
 8009442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009446:	f000 b817 	b.w	8009478 <_kill_r>
 800944a:	2b01      	cmp	r3, #1
 800944c:	d00a      	beq.n	8009464 <_raise_r+0x4c>
 800944e:	1c59      	adds	r1, r3, #1
 8009450:	d103      	bne.n	800945a <_raise_r+0x42>
 8009452:	2316      	movs	r3, #22
 8009454:	6003      	str	r3, [r0, #0]
 8009456:	2001      	movs	r0, #1
 8009458:	e7e7      	b.n	800942a <_raise_r+0x12>
 800945a:	2400      	movs	r4, #0
 800945c:	4628      	mov	r0, r5
 800945e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009462:	4798      	blx	r3
 8009464:	2000      	movs	r0, #0
 8009466:	e7e0      	b.n	800942a <_raise_r+0x12>

08009468 <raise>:
 8009468:	4b02      	ldr	r3, [pc, #8]	; (8009474 <raise+0xc>)
 800946a:	4601      	mov	r1, r0
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	f7ff bfd3 	b.w	8009418 <_raise_r>
 8009472:	bf00      	nop
 8009474:	2000002c 	.word	0x2000002c

08009478 <_kill_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	2300      	movs	r3, #0
 800947c:	4d06      	ldr	r5, [pc, #24]	; (8009498 <_kill_r+0x20>)
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	4611      	mov	r1, r2
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	f7f9 f9fc 	bl	8002882 <_kill>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d102      	bne.n	8009494 <_kill_r+0x1c>
 800948e:	682b      	ldr	r3, [r5, #0]
 8009490:	b103      	cbz	r3, 8009494 <_kill_r+0x1c>
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	bd38      	pop	{r3, r4, r5, pc}
 8009496:	bf00      	nop
 8009498:	20000798 	.word	0x20000798

0800949c <_getpid_r>:
 800949c:	f7f9 b9ea 	b.w	8002874 <_getpid>

080094a0 <_init>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	bf00      	nop
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr

080094ac <_fini>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr
